
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc34  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012b8  0800be08  0800be08  0000ce08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0c0  0800d0c0  0000f1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0c0  0800d0c0  0000e0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0c8  0800d0c8  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0c8  0800d0c8  0000e0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0cc  0800d0cc  0000e0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d0d0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fcc  200001e8  0800d2b8  0000f1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200051b4  0800d2b8  000101b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b726  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cfc  00000000  00000000  0002a93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f0  00000000  00000000  0002e640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000137f  00000000  00000000  0002ff30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000252b4  00000000  00000000  000312af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df4a  00000000  00000000  00056563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dff03  00000000  00000000  000744ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001543b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ea0  00000000  00000000  001543f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0015c294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bdec 	.word	0x0800bdec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800bdec 	.word	0x0800bdec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
	int done=1;
 800102a:	2301      	movs	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
	while(done)
 800102e:	e19b      	b.n	8001368 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001036:	48b3      	ldr	r0, [pc, #716]	@ (8001304 <Get_Key+0x2e0>)
 8001038:	f001 fc78 	bl	800292c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 800103c:	2200      	movs	r2, #0
 800103e:	2110      	movs	r1, #16
 8001040:	48b0      	ldr	r0, [pc, #704]	@ (8001304 <Get_Key+0x2e0>)
 8001042:	f001 fc73 	bl	800292c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8001046:	2200      	movs	r2, #0
 8001048:	2120      	movs	r1, #32
 800104a:	48ae      	ldr	r0, [pc, #696]	@ (8001304 <Get_Key+0x2e0>)
 800104c:	f001 fc6e 	bl	800292c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8001050:	2200      	movs	r2, #0
 8001052:	2108      	movs	r1, #8
 8001054:	48ab      	ldr	r0, [pc, #684]	@ (8001304 <Get_Key+0x2e0>)
 8001056:	f001 fc69 	bl	800292c <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800105a:	2140      	movs	r1, #64	@ 0x40
 800105c:	48a9      	ldr	r0, [pc, #676]	@ (8001304 <Get_Key+0x2e0>)
 800105e:	f001 fc4d 	bl	80028fc <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00b      	beq.n	8001080 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8001068:	bf00      	nop
 800106a:	2140      	movs	r1, #64	@ 0x40
 800106c:	48a5      	ldr	r0, [pc, #660]	@ (8001304 <Get_Key+0x2e0>)
 800106e:	f001 fc45 	bl	80028fc <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1f8      	bne.n	800106a <Get_Key+0x46>
		key='1';
 8001078:	4ba3      	ldr	r3, [pc, #652]	@ (8001308 <Get_Key+0x2e4>)
 800107a:	2231      	movs	r2, #49	@ 0x31
 800107c:	701a      	strb	r2, [r3, #0]
		break;
 800107e:	e177      	b.n	8001370 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8001080:	2180      	movs	r1, #128	@ 0x80
 8001082:	48a2      	ldr	r0, [pc, #648]	@ (800130c <Get_Key+0x2e8>)
 8001084:	f001 fc3a 	bl	80028fc <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00b      	beq.n	80010a6 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800108e:	bf00      	nop
 8001090:	2180      	movs	r1, #128	@ 0x80
 8001092:	489e      	ldr	r0, [pc, #632]	@ (800130c <Get_Key+0x2e8>)
 8001094:	f001 fc32 	bl	80028fc <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f8      	bne.n	8001090 <Get_Key+0x6c>
		key='4';
 800109e:	4b9a      	ldr	r3, [pc, #616]	@ (8001308 <Get_Key+0x2e4>)
 80010a0:	2234      	movs	r2, #52	@ 0x34
 80010a2:	701a      	strb	r2, [r3, #0]
		break;
 80010a4:	e164      	b.n	8001370 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80010a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010aa:	4899      	ldr	r0, [pc, #612]	@ (8001310 <Get_Key+0x2ec>)
 80010ac:	f001 fc26 	bl	80028fc <HAL_GPIO_ReadPin>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00c      	beq.n	80010d0 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80010b6:	bf00      	nop
 80010b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010bc:	4894      	ldr	r0, [pc, #592]	@ (8001310 <Get_Key+0x2ec>)
 80010be:	f001 fc1d 	bl	80028fc <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f7      	bne.n	80010b8 <Get_Key+0x94>
		key='7';
 80010c8:	4b8f      	ldr	r3, [pc, #572]	@ (8001308 <Get_Key+0x2e4>)
 80010ca:	2237      	movs	r2, #55	@ 0x37
 80010cc:	701a      	strb	r2, [r3, #0]
		break;
 80010ce:	e14f      	b.n	8001370 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80010d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010d4:	488e      	ldr	r0, [pc, #568]	@ (8001310 <Get_Key+0x2ec>)
 80010d6:	f001 fc11 	bl	80028fc <HAL_GPIO_ReadPin>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00c      	beq.n	80010fa <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80010e0:	bf00      	nop
 80010e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010e6:	488a      	ldr	r0, [pc, #552]	@ (8001310 <Get_Key+0x2ec>)
 80010e8:	f001 fc08 	bl	80028fc <HAL_GPIO_ReadPin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f7      	bne.n	80010e2 <Get_Key+0xbe>
		key='*';
 80010f2:	4b85      	ldr	r3, [pc, #532]	@ (8001308 <Get_Key+0x2e4>)
 80010f4:	222a      	movs	r2, #42	@ 0x2a
 80010f6:	701a      	strb	r2, [r3, #0]
		break;
 80010f8:	e13a      	b.n	8001370 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001100:	4880      	ldr	r0, [pc, #512]	@ (8001304 <Get_Key+0x2e0>)
 8001102:	f001 fc13 	bl	800292c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8001106:	2201      	movs	r2, #1
 8001108:	2110      	movs	r1, #16
 800110a:	487e      	ldr	r0, [pc, #504]	@ (8001304 <Get_Key+0x2e0>)
 800110c:	f001 fc0e 	bl	800292c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8001110:	2200      	movs	r2, #0
 8001112:	2120      	movs	r1, #32
 8001114:	487b      	ldr	r0, [pc, #492]	@ (8001304 <Get_Key+0x2e0>)
 8001116:	f001 fc09 	bl	800292c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 800111a:	2200      	movs	r2, #0
 800111c:	2108      	movs	r1, #8
 800111e:	4879      	ldr	r0, [pc, #484]	@ (8001304 <Get_Key+0x2e0>)
 8001120:	f001 fc04 	bl	800292c <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8001124:	2140      	movs	r1, #64	@ 0x40
 8001126:	4877      	ldr	r0, [pc, #476]	@ (8001304 <Get_Key+0x2e0>)
 8001128:	f001 fbe8 	bl	80028fc <HAL_GPIO_ReadPin>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8001132:	bf00      	nop
 8001134:	2140      	movs	r1, #64	@ 0x40
 8001136:	4873      	ldr	r0, [pc, #460]	@ (8001304 <Get_Key+0x2e0>)
 8001138:	f001 fbe0 	bl	80028fc <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f8      	bne.n	8001134 <Get_Key+0x110>
		key='2';
 8001142:	4b71      	ldr	r3, [pc, #452]	@ (8001308 <Get_Key+0x2e4>)
 8001144:	2232      	movs	r2, #50	@ 0x32
 8001146:	701a      	strb	r2, [r3, #0]
		break;
 8001148:	e112      	b.n	8001370 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800114a:	2180      	movs	r1, #128	@ 0x80
 800114c:	486f      	ldr	r0, [pc, #444]	@ (800130c <Get_Key+0x2e8>)
 800114e:	f001 fbd5 	bl	80028fc <HAL_GPIO_ReadPin>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00b      	beq.n	8001170 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8001158:	bf00      	nop
 800115a:	2180      	movs	r1, #128	@ 0x80
 800115c:	486b      	ldr	r0, [pc, #428]	@ (800130c <Get_Key+0x2e8>)
 800115e:	f001 fbcd 	bl	80028fc <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f8      	bne.n	800115a <Get_Key+0x136>
		key='5';
 8001168:	4b67      	ldr	r3, [pc, #412]	@ (8001308 <Get_Key+0x2e4>)
 800116a:	2235      	movs	r2, #53	@ 0x35
 800116c:	701a      	strb	r2, [r3, #0]
		break;
 800116e:	e0ff      	b.n	8001370 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8001170:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001174:	4866      	ldr	r0, [pc, #408]	@ (8001310 <Get_Key+0x2ec>)
 8001176:	f001 fbc1 	bl	80028fc <HAL_GPIO_ReadPin>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00c      	beq.n	800119a <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8001180:	bf00      	nop
 8001182:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001186:	4862      	ldr	r0, [pc, #392]	@ (8001310 <Get_Key+0x2ec>)
 8001188:	f001 fbb8 	bl	80028fc <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f7      	bne.n	8001182 <Get_Key+0x15e>
		key='8';
 8001192:	4b5d      	ldr	r3, [pc, #372]	@ (8001308 <Get_Key+0x2e4>)
 8001194:	2238      	movs	r2, #56	@ 0x38
 8001196:	701a      	strb	r2, [r3, #0]
		break;
 8001198:	e0ea      	b.n	8001370 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800119a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800119e:	485c      	ldr	r0, [pc, #368]	@ (8001310 <Get_Key+0x2ec>)
 80011a0:	f001 fbac 	bl	80028fc <HAL_GPIO_ReadPin>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00c      	beq.n	80011c4 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80011aa:	bf00      	nop
 80011ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b0:	4857      	ldr	r0, [pc, #348]	@ (8001310 <Get_Key+0x2ec>)
 80011b2:	f001 fba3 	bl	80028fc <HAL_GPIO_ReadPin>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f7      	bne.n	80011ac <Get_Key+0x188>
		key='0';
 80011bc:	4b52      	ldr	r3, [pc, #328]	@ (8001308 <Get_Key+0x2e4>)
 80011be:	2230      	movs	r2, #48	@ 0x30
 80011c0:	701a      	strb	r2, [r3, #0]
		break;
 80011c2:	e0d5      	b.n	8001370 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011ca:	484e      	ldr	r0, [pc, #312]	@ (8001304 <Get_Key+0x2e0>)
 80011cc:	f001 fbae 	bl	800292c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80011d0:	2200      	movs	r2, #0
 80011d2:	2110      	movs	r1, #16
 80011d4:	484b      	ldr	r0, [pc, #300]	@ (8001304 <Get_Key+0x2e0>)
 80011d6:	f001 fba9 	bl	800292c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80011da:	2201      	movs	r2, #1
 80011dc:	2120      	movs	r1, #32
 80011de:	4849      	ldr	r0, [pc, #292]	@ (8001304 <Get_Key+0x2e0>)
 80011e0:	f001 fba4 	bl	800292c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80011e4:	2200      	movs	r2, #0
 80011e6:	2108      	movs	r1, #8
 80011e8:	4846      	ldr	r0, [pc, #280]	@ (8001304 <Get_Key+0x2e0>)
 80011ea:	f001 fb9f 	bl	800292c <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80011ee:	2140      	movs	r1, #64	@ 0x40
 80011f0:	4844      	ldr	r0, [pc, #272]	@ (8001304 <Get_Key+0x2e0>)
 80011f2:	f001 fb83 	bl	80028fc <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00b      	beq.n	8001214 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80011fc:	bf00      	nop
 80011fe:	2140      	movs	r1, #64	@ 0x40
 8001200:	4840      	ldr	r0, [pc, #256]	@ (8001304 <Get_Key+0x2e0>)
 8001202:	f001 fb7b 	bl	80028fc <HAL_GPIO_ReadPin>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f8      	bne.n	80011fe <Get_Key+0x1da>
		key='3';
 800120c:	4b3e      	ldr	r3, [pc, #248]	@ (8001308 <Get_Key+0x2e4>)
 800120e:	2233      	movs	r2, #51	@ 0x33
 8001210:	701a      	strb	r2, [r3, #0]
		break;
 8001212:	e0ad      	b.n	8001370 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8001214:	2180      	movs	r1, #128	@ 0x80
 8001216:	483d      	ldr	r0, [pc, #244]	@ (800130c <Get_Key+0x2e8>)
 8001218:	f001 fb70 	bl	80028fc <HAL_GPIO_ReadPin>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8001222:	bf00      	nop
 8001224:	2180      	movs	r1, #128	@ 0x80
 8001226:	4839      	ldr	r0, [pc, #228]	@ (800130c <Get_Key+0x2e8>)
 8001228:	f001 fb68 	bl	80028fc <HAL_GPIO_ReadPin>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f8      	bne.n	8001224 <Get_Key+0x200>
		key='6';
 8001232:	4b35      	ldr	r3, [pc, #212]	@ (8001308 <Get_Key+0x2e4>)
 8001234:	2236      	movs	r2, #54	@ 0x36
 8001236:	701a      	strb	r2, [r3, #0]
		break;
 8001238:	e09a      	b.n	8001370 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800123a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800123e:	4834      	ldr	r0, [pc, #208]	@ (8001310 <Get_Key+0x2ec>)
 8001240:	f001 fb5c 	bl	80028fc <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00c      	beq.n	8001264 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800124a:	bf00      	nop
 800124c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001250:	482f      	ldr	r0, [pc, #188]	@ (8001310 <Get_Key+0x2ec>)
 8001252:	f001 fb53 	bl	80028fc <HAL_GPIO_ReadPin>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f7      	bne.n	800124c <Get_Key+0x228>
		key='9';
 800125c:	4b2a      	ldr	r3, [pc, #168]	@ (8001308 <Get_Key+0x2e4>)
 800125e:	2239      	movs	r2, #57	@ 0x39
 8001260:	701a      	strb	r2, [r3, #0]
		break;
 8001262:	e085      	b.n	8001370 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8001264:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001268:	4829      	ldr	r0, [pc, #164]	@ (8001310 <Get_Key+0x2ec>)
 800126a:	f001 fb47 	bl	80028fc <HAL_GPIO_ReadPin>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00c      	beq.n	800128e <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8001274:	bf00      	nop
 8001276:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800127a:	4825      	ldr	r0, [pc, #148]	@ (8001310 <Get_Key+0x2ec>)
 800127c:	f001 fb3e 	bl	80028fc <HAL_GPIO_ReadPin>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f7      	bne.n	8001276 <Get_Key+0x252>
		key='#';
 8001286:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <Get_Key+0x2e4>)
 8001288:	2223      	movs	r2, #35	@ 0x23
 800128a:	701a      	strb	r2, [r3, #0]
		break;
 800128c:	e070      	b.n	8001370 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001294:	481b      	ldr	r0, [pc, #108]	@ (8001304 <Get_Key+0x2e0>)
 8001296:	f001 fb49 	bl	800292c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 800129a:	2200      	movs	r2, #0
 800129c:	2110      	movs	r1, #16
 800129e:	4819      	ldr	r0, [pc, #100]	@ (8001304 <Get_Key+0x2e0>)
 80012a0:	f001 fb44 	bl	800292c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80012a4:	2200      	movs	r2, #0
 80012a6:	2120      	movs	r1, #32
 80012a8:	4816      	ldr	r0, [pc, #88]	@ (8001304 <Get_Key+0x2e0>)
 80012aa:	f001 fb3f 	bl	800292c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 80012ae:	2201      	movs	r2, #1
 80012b0:	2108      	movs	r1, #8
 80012b2:	4814      	ldr	r0, [pc, #80]	@ (8001304 <Get_Key+0x2e0>)
 80012b4:	f001 fb3a 	bl	800292c <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80012b8:	2140      	movs	r1, #64	@ 0x40
 80012ba:	4812      	ldr	r0, [pc, #72]	@ (8001304 <Get_Key+0x2e0>)
 80012bc:	f001 fb1e 	bl	80028fc <HAL_GPIO_ReadPin>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00b      	beq.n	80012de <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80012c6:	bf00      	nop
 80012c8:	2140      	movs	r1, #64	@ 0x40
 80012ca:	480e      	ldr	r0, [pc, #56]	@ (8001304 <Get_Key+0x2e0>)
 80012cc:	f001 fb16 	bl	80028fc <HAL_GPIO_ReadPin>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f8      	bne.n	80012c8 <Get_Key+0x2a4>
		key='A';
 80012d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <Get_Key+0x2e4>)
 80012d8:	2241      	movs	r2, #65	@ 0x41
 80012da:	701a      	strb	r2, [r3, #0]
		break;
 80012dc:	e048      	b.n	8001370 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80012de:	2180      	movs	r1, #128	@ 0x80
 80012e0:	480a      	ldr	r0, [pc, #40]	@ (800130c <Get_Key+0x2e8>)
 80012e2:	f001 fb0b 	bl	80028fc <HAL_GPIO_ReadPin>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80012ec:	bf00      	nop
 80012ee:	2180      	movs	r1, #128	@ 0x80
 80012f0:	4806      	ldr	r0, [pc, #24]	@ (800130c <Get_Key+0x2e8>)
 80012f2:	f001 fb03 	bl	80028fc <HAL_GPIO_ReadPin>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f8      	bne.n	80012ee <Get_Key+0x2ca>
		key='B';
 80012fc:	4b02      	ldr	r3, [pc, #8]	@ (8001308 <Get_Key+0x2e4>)
 80012fe:	2242      	movs	r2, #66	@ 0x42
 8001300:	701a      	strb	r2, [r3, #0]
		break;
 8001302:	e035      	b.n	8001370 <Get_Key+0x34c>
 8001304:	40020400 	.word	0x40020400
 8001308:	20000204 	.word	0x20000204
 800130c:	40020800 	.word	0x40020800
 8001310:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8001314:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001318:	481a      	ldr	r0, [pc, #104]	@ (8001384 <Get_Key+0x360>)
 800131a:	f001 faef 	bl	80028fc <HAL_GPIO_ReadPin>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00c      	beq.n	800133e <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8001324:	bf00      	nop
 8001326:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800132a:	4816      	ldr	r0, [pc, #88]	@ (8001384 <Get_Key+0x360>)
 800132c:	f001 fae6 	bl	80028fc <HAL_GPIO_ReadPin>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f7      	bne.n	8001326 <Get_Key+0x302>
		key='C';
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <Get_Key+0x364>)
 8001338:	2243      	movs	r2, #67	@ 0x43
 800133a:	701a      	strb	r2, [r3, #0]
		break;
 800133c:	e018      	b.n	8001370 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800133e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001342:	4810      	ldr	r0, [pc, #64]	@ (8001384 <Get_Key+0x360>)
 8001344:	f001 fada 	bl	80028fc <HAL_GPIO_ReadPin>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00c      	beq.n	8001368 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800134e:	bf00      	nop
 8001350:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001354:	480b      	ldr	r0, [pc, #44]	@ (8001384 <Get_Key+0x360>)
 8001356:	f001 fad1 	bl	80028fc <HAL_GPIO_ReadPin>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f7      	bne.n	8001350 <Get_Key+0x32c>
		key='D';
 8001360:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <Get_Key+0x364>)
 8001362:	2244      	movs	r2, #68	@ 0x44
 8001364:	701a      	strb	r2, [r3, #0]
		break;
 8001366:	e003      	b.n	8001370 <Get_Key+0x34c>
	while(done)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f47f ae60 	bne.w	8001030 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001370:	2120      	movs	r1, #32
 8001372:	4804      	ldr	r0, [pc, #16]	@ (8001384 <Get_Key+0x360>)
 8001374:	f001 faf3 	bl	800295e <HAL_GPIO_TogglePin>
	return(key);
 8001378:	4b03      	ldr	r3, [pc, #12]	@ (8001388 <Get_Key+0x364>)
 800137a:	781b      	ldrb	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40020000 	.word	0x40020000
 8001388:	20000204 	.word	0x20000204

0800138c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001390:	f000 ffd8 	bl	8002344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001394:	f000 f854 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001398:	f000 f918 	bl	80015cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800139c:	f000 f8ec 	bl	8001578 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013a0:	f000 f8bc 	bl	800151c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    SSD1306_Init();
 80013a4:	f000 fab0 	bl	8001908 <SSD1306_Init>
//    HAL_Delay (500);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013a8:	f003 fc84 	bl	8004cb4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 80013ac:	4a15      	ldr	r2, [pc, #84]	@ (8001404 <main+0x78>)
 80013ae:	2100      	movs	r1, #0
 80013b0:	4815      	ldr	r0, [pc, #84]	@ (8001408 <main+0x7c>)
 80013b2:	f003 fcc9 	bl	8004d48 <osThreadNew>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a14      	ldr	r2, [pc, #80]	@ (800140c <main+0x80>)
 80013ba:	6013      	str	r3, [r2, #0]

  /* creation of KeypadTask */
  KeypadTaskHandle = osThreadNew(StartKeypadTask, NULL, &KeypadTask_attributes);
 80013bc:	4a14      	ldr	r2, [pc, #80]	@ (8001410 <main+0x84>)
 80013be:	2100      	movs	r1, #0
 80013c0:	4814      	ldr	r0, [pc, #80]	@ (8001414 <main+0x88>)
 80013c2:	f003 fcc1 	bl	8004d48 <osThreadNew>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a13      	ldr	r2, [pc, #76]	@ (8001418 <main+0x8c>)
 80013ca:	6013      	str	r3, [r2, #0]

  /* creation of LEDTask */
  LEDTaskHandle = osThreadNew(StartLEDTask, NULL, &LEDTask_attributes);
 80013cc:	4a13      	ldr	r2, [pc, #76]	@ (800141c <main+0x90>)
 80013ce:	2100      	movs	r1, #0
 80013d0:	4813      	ldr	r0, [pc, #76]	@ (8001420 <main+0x94>)
 80013d2:	f003 fcb9 	bl	8004d48 <osThreadNew>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a12      	ldr	r2, [pc, #72]	@ (8001424 <main+0x98>)
 80013da:	6013      	str	r3, [r2, #0]

  /* creation of BuzzerTask */
  BuzzerTaskHandle = osThreadNew(StartBuzzerTask, NULL, &BuzzerTask_attributes);
 80013dc:	4a12      	ldr	r2, [pc, #72]	@ (8001428 <main+0x9c>)
 80013de:	2100      	movs	r1, #0
 80013e0:	4812      	ldr	r0, [pc, #72]	@ (800142c <main+0xa0>)
 80013e2:	f003 fcb1 	bl	8004d48 <osThreadNew>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a11      	ldr	r2, [pc, #68]	@ (8001430 <main+0xa4>)
 80013ea:	6013      	str	r3, [r2, #0]

  /* creation of SensorTask */
  SensorTaskHandle = osThreadNew(StartSensorTask, NULL, &SensorTask_attributes);
 80013ec:	4a11      	ldr	r2, [pc, #68]	@ (8001434 <main+0xa8>)
 80013ee:	2100      	movs	r1, #0
 80013f0:	4811      	ldr	r0, [pc, #68]	@ (8001438 <main+0xac>)
 80013f2:	f003 fca9 	bl	8004d48 <osThreadNew>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a10      	ldr	r2, [pc, #64]	@ (800143c <main+0xb0>)
 80013fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013fc:	f003 fc7e 	bl	8004cfc <osKernelStart>
  /* USER CODE BEGIN WHILE */
//  SSD1306_GotoXY (0, 30);
//  SSD1306_UpdateScreen();
//  SSD1306_Puts ("DISARMED", &Font_11x18, 1);
//  SSD1306_UpdateScreen();
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <main+0x74>
 8001404:	0800cbc8 	.word	0x0800cbc8
 8001408:	08001731 	.word	0x08001731
 800140c:	200002a4 	.word	0x200002a4
 8001410:	0800cbec 	.word	0x0800cbec
 8001414:	08001789 	.word	0x08001789
 8001418:	200002a8 	.word	0x200002a8
 800141c:	0800cc10 	.word	0x0800cc10
 8001420:	08001811 	.word	0x08001811
 8001424:	200002ac 	.word	0x200002ac
 8001428:	0800cc34 	.word	0x0800cc34
 800142c:	0800185d 	.word	0x0800185d
 8001430:	200002b0 	.word	0x200002b0
 8001434:	0800cc58 	.word	0x0800cc58
 8001438:	080018a9 	.word	0x080018a9
 800143c:	200002b4 	.word	0x200002b4

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b094      	sub	sp, #80	@ 0x50
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	2234      	movs	r2, #52	@ 0x34
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f007 f8f3 	bl	800863a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	f107 0308 	add.w	r3, r7, #8
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <SystemClock_Config+0xd4>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	4a29      	ldr	r2, [pc, #164]	@ (8001514 <SystemClock_Config+0xd4>)
 800146e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001472:	6413      	str	r3, [r2, #64]	@ 0x40
 8001474:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <SystemClock_Config+0xd4>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001480:	2300      	movs	r3, #0
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	4b24      	ldr	r3, [pc, #144]	@ (8001518 <SystemClock_Config+0xd8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800148c:	4a22      	ldr	r2, [pc, #136]	@ (8001518 <SystemClock_Config+0xd8>)
 800148e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b20      	ldr	r3, [pc, #128]	@ (8001518 <SystemClock_Config+0xd8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a4:	2301      	movs	r3, #1
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a8:	2310      	movs	r3, #16
 80014aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ac:	2302      	movs	r3, #2
 80014ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b0:	2300      	movs	r3, #0
 80014b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014b4:	2310      	movs	r3, #16
 80014b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014b8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014be:	2304      	movs	r3, #4
 80014c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 fba8 	bl	8003c24 <HAL_RCC_OscConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014da:	f000 fa0f 	bl	80018fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014de:	230f      	movs	r3, #15
 80014e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e2:	2302      	movs	r3, #2
 80014e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	2102      	movs	r1, #2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 f816 	bl	800352c <HAL_RCC_ClockConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001506:	f000 f9f9 	bl	80018fc <Error_Handler>
  }
}
 800150a:	bf00      	nop
 800150c:	3750      	adds	r7, #80	@ 0x50
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40007000 	.word	0x40007000

0800151c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <MX_I2C1_Init+0x50>)
 8001522:	4a13      	ldr	r2, [pc, #76]	@ (8001570 <MX_I2C1_Init+0x54>)
 8001524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_I2C1_Init+0x50>)
 8001528:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <MX_I2C1_Init+0x58>)
 800152a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_I2C1_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_I2C1_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_I2C1_Init+0x50>)
 800153a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800153e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	@ (800156c <MX_I2C1_Init+0x50>)
 800155a:	f001 fa1b 	bl	8002994 <HAL_I2C_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001564:	f000 f9ca 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000208 	.word	0x20000208
 8001570:	40005400 	.word	0x40005400
 8001574:	00061a80 	.word	0x00061a80

08001578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800157c:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 800157e:	4a12      	ldr	r2, [pc, #72]	@ (80015c8 <MX_USART2_UART_Init+0x50>)
 8001580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001582:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001584:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015b0:	f003 f878 	bl	80046a4 <HAL_UART_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ba:	f000 f99f 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000025c 	.word	0x2000025c
 80015c8:	40004400 	.word	0x40004400

080015cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	@ 0x28
 80015d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001720 <MX_GPIO_Init+0x154>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a4d      	ldr	r2, [pc, #308]	@ (8001720 <MX_GPIO_Init+0x154>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001720 <MX_GPIO_Init+0x154>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b47      	ldr	r3, [pc, #284]	@ (8001720 <MX_GPIO_Init+0x154>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a46      	ldr	r2, [pc, #280]	@ (8001720 <MX_GPIO_Init+0x154>)
 8001608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b44      	ldr	r3, [pc, #272]	@ (8001720 <MX_GPIO_Init+0x154>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	4b40      	ldr	r3, [pc, #256]	@ (8001720 <MX_GPIO_Init+0x154>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a3f      	ldr	r2, [pc, #252]	@ (8001720 <MX_GPIO_Init+0x154>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b3d      	ldr	r3, [pc, #244]	@ (8001720 <MX_GPIO_Init+0x154>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b39      	ldr	r3, [pc, #228]	@ (8001720 <MX_GPIO_Init+0x154>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a38      	ldr	r2, [pc, #224]	@ (8001720 <MX_GPIO_Init+0x154>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b36      	ldr	r3, [pc, #216]	@ (8001720 <MX_GPIO_Init+0x154>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Sensor_GPIO_Port, Sensor_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	2120      	movs	r1, #32
 8001656:	4833      	ldr	r0, [pc, #204]	@ (8001724 <MX_GPIO_Init+0x158>)
 8001658:	f001 f968 	bl	800292c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8001662:	4831      	ldr	r0, [pc, #196]	@ (8001728 <MX_GPIO_Init+0x15c>)
 8001664:	f001 f962 	bl	800292c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RedLED_Pin|Buzzer_Pin|GrenLED_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800166e:	482f      	ldr	r0, [pc, #188]	@ (800172c <MX_GPIO_Init+0x160>)
 8001670:	f001 f95c 	bl	800292c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Sensor_Pin */
  GPIO_InitStruct.Pin = Sensor_Pin;
 8001674:	2320      	movs	r3, #32
 8001676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001678:	2301      	movs	r3, #1
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Sensor_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4826      	ldr	r0, [pc, #152]	@ (8001724 <MX_GPIO_Init+0x158>)
 800168c:	f000 ffa2 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8001690:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	481f      	ldr	r0, [pc, #124]	@ (8001728 <MX_GPIO_Init+0x15c>)
 80016aa:	f000 ff93 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	481a      	ldr	r0, [pc, #104]	@ (800172c <MX_GPIO_Init+0x160>)
 80016c2:	f000 ff87 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 80016c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016d0:	2302      	movs	r3, #2
 80016d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	4812      	ldr	r0, [pc, #72]	@ (8001724 <MX_GPIO_Init+0x158>)
 80016dc:	f000 ff7a 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RedLED_Pin Buzzer_Pin GrenLED_Pin */
  GPIO_InitStruct.Pin = RedLED_Pin|Buzzer_Pin|GrenLED_Pin;
 80016e0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	480c      	ldr	r0, [pc, #48]	@ (800172c <MX_GPIO_Init+0x160>)
 80016fa:	f000 ff6b 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 80016fe:	2340      	movs	r3, #64	@ 0x40
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001706:	2302      	movs	r3, #2
 8001708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	@ (8001728 <MX_GPIO_Init+0x15c>)
 8001712:	f000 ff5f 	bl	80025d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	@ 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400
 800172c:	40020800 	.word	0x40020800

08001730 <StartOLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
//
//	  SSD1306_Puts ("ARMED", &Font_11x18, 1);
//	  SSD1306_UpdateScreen();
//	  HAL_Delay (500);

	  SSD1306_GotoXY (0, 30);
 8001738:	211e      	movs	r1, #30
 800173a:	2000      	movs	r0, #0
 800173c:	f000 fa4e 	bl	8001bdc <SSD1306_GotoXY>
	  if (isArmed) {
 8001740:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <StartOLEDTask+0x48>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00b      	beq.n	8001760 <StartOLEDTask+0x30>
//		  SSD1306_GotoXY (0, 30);
//		  SSD1306_UpdateScreen();
//		  SSD1306_Fill(SSD1306_COLOR_BLACK);
		  SSD1306_Puts ("ARMED", &Font_11x18, 1);
 8001748:	2201      	movs	r2, #1
 800174a:	490c      	ldr	r1, [pc, #48]	@ (800177c <StartOLEDTask+0x4c>)
 800174c:	480c      	ldr	r0, [pc, #48]	@ (8001780 <StartOLEDTask+0x50>)
 800174e:	f000 fad9 	bl	8001d04 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8001752:	f000 f99d 	bl	8001a90 <SSD1306_UpdateScreen>
		  HAL_Delay (500);
 8001756:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800175a:	f000 fe35 	bl	80023c8 <HAL_Delay>
 800175e:	e7eb      	b.n	8001738 <StartOLEDTask+0x8>
	  } else {
//		  SSD1306_GotoXY (0, 30);
//		  SSD1306_UpdateScreen();
//		  SSD1306_Fill(SSD1306_COLOR_BLACK);
		  SSD1306_Puts ("DISARMED", &Font_11x18, 1);
 8001760:	2201      	movs	r2, #1
 8001762:	4906      	ldr	r1, [pc, #24]	@ (800177c <StartOLEDTask+0x4c>)
 8001764:	4807      	ldr	r0, [pc, #28]	@ (8001784 <StartOLEDTask+0x54>)
 8001766:	f000 facd 	bl	8001d04 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 800176a:	f000 f991 	bl	8001a90 <SSD1306_UpdateScreen>
		  HAL_Delay (500);
 800176e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001772:	f000 fe29 	bl	80023c8 <HAL_Delay>
	  SSD1306_GotoXY (0, 30);
 8001776:	e7df      	b.n	8001738 <StartOLEDTask+0x8>
 8001778:	2000000c 	.word	0x2000000c
 800177c:	20000000 	.word	0x20000000
 8001780:	0800be40 	.word	0x0800be40
 8001784:	0800be48 	.word	0x0800be48

08001788 <StartKeypadTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKeypadTask */
void StartKeypadTask(void *argument)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKeypadTask */
  /* Infinite loop */
  for(;;)
  {
	  for (int i = 0; i<4; i++) {
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	e00b      	b.n	80017ae <StartKeypadTask+0x26>
		  hold[i] = Get_Key();
 8001796:	f7ff fc45 	bl	8001024 <Get_Key>
 800179a:	4603      	mov	r3, r0
 800179c:	4619      	mov	r1, r3
 800179e:	4a19      	ldr	r2, [pc, #100]	@ (8001804 <StartKeypadTask+0x7c>)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	460a      	mov	r2, r1
 80017a6:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i<4; i++) {
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	ddf0      	ble.n	8001796 <StartKeypadTask+0xe>

//		  SSD1306_GotoXY (0, 30);
//		  SSD1306_Puts (hold, &Font_11x18, 1);
//		  SSD1306_UpdateScreen();

	  if (((hold[0] == password[0]) && (hold[1] == password[1]) && (hold[2] == password[2]) && (hold[3] == password[3]))) {
 80017b4:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <StartKeypadTask+0x7c>)
 80017b6:	781a      	ldrb	r2, [r3, #0]
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <StartKeypadTask+0x80>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d1e7      	bne.n	8001790 <StartKeypadTask+0x8>
 80017c0:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <StartKeypadTask+0x7c>)
 80017c2:	785a      	ldrb	r2, [r3, #1]
 80017c4:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <StartKeypadTask+0x80>)
 80017c6:	785b      	ldrb	r3, [r3, #1]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d1e1      	bne.n	8001790 <StartKeypadTask+0x8>
 80017cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <StartKeypadTask+0x7c>)
 80017ce:	789a      	ldrb	r2, [r3, #2]
 80017d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <StartKeypadTask+0x80>)
 80017d2:	789b      	ldrb	r3, [r3, #2]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d1db      	bne.n	8001790 <StartKeypadTask+0x8>
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <StartKeypadTask+0x7c>)
 80017da:	78da      	ldrb	r2, [r3, #3]
 80017dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001808 <StartKeypadTask+0x80>)
 80017de:	78db      	ldrb	r3, [r3, #3]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d1d5      	bne.n	8001790 <StartKeypadTask+0x8>
		  isArmed = !isArmed;
 80017e4:	4b09      	ldr	r3, [pc, #36]	@ (800180c <StartKeypadTask+0x84>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf14      	ite	ne
 80017ec:	2301      	movne	r3, #1
 80017ee:	2300      	moveq	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f083 0301 	eor.w	r3, r3, #1
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4b03      	ldr	r3, [pc, #12]	@ (800180c <StartKeypadTask+0x84>)
 8001800:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i<4; i++) {
 8001802:	e7c5      	b.n	8001790 <StartKeypadTask+0x8>
 8001804:	200002b8 	.word	0x200002b8
 8001808:	20000008 	.word	0x20000008
 800180c:	2000000c 	.word	0x2000000c

08001810 <StartLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDTask */
void StartLEDTask(void *argument)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  HAL_GPIO_WritePin(GPIOC, RedLED_Pin, GPIO_PIN_SET);
//	  HAL_GPIO_WritePin(GPIOC, GrenLED_Pin, GPIO_PIN_SET);
	if (isArmed) {
 8001818:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <StartLEDTask+0x44>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00c      	beq.n	800183a <StartLEDTask+0x2a>
		HAL_GPIO_WritePin(GPIOC, RedLED_Pin, GPIO_PIN_SET);
 8001820:	2201      	movs	r2, #1
 8001822:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001826:	480c      	ldr	r0, [pc, #48]	@ (8001858 <StartLEDTask+0x48>)
 8001828:	f001 f880 	bl	800292c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GrenLED_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001832:	4809      	ldr	r0, [pc, #36]	@ (8001858 <StartLEDTask+0x48>)
 8001834:	f001 f87a 	bl	800292c <HAL_GPIO_WritePin>
 8001838:	e7ee      	b.n	8001818 <StartLEDTask+0x8>
	} else {
		HAL_GPIO_WritePin(GPIOC, RedLED_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001840:	4805      	ldr	r0, [pc, #20]	@ (8001858 <StartLEDTask+0x48>)
 8001842:	f001 f873 	bl	800292c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GrenLED_Pin, GPIO_PIN_SET);
 8001846:	2201      	movs	r2, #1
 8001848:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800184c:	4802      	ldr	r0, [pc, #8]	@ (8001858 <StartLEDTask+0x48>)
 800184e:	f001 f86d 	bl	800292c <HAL_GPIO_WritePin>
	if (isArmed) {
 8001852:	e7e1      	b.n	8001818 <StartLEDTask+0x8>
 8001854:	2000000c 	.word	0x2000000c
 8001858:	40020800 	.word	0x40020800

0800185c <StartBuzzerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBuzzerTask */
void StartBuzzerTask(void *argument)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
//	  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin, GPIO_PIN_SET);
//	  if (isArmed) {
//		  buzzerFlag = true;
//	  }

	  if (isArmed && sensorStatus) {
 8001864:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <StartBuzzerTask+0x40>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d009      	beq.n	8001880 <StartBuzzerTask+0x24>
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <StartBuzzerTask+0x44>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <StartBuzzerTask+0x24>
		  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin, GPIO_PIN_SET);
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800187a:	480a      	ldr	r0, [pc, #40]	@ (80018a4 <StartBuzzerTask+0x48>)
 800187c:	f001 f856 	bl	800292c <HAL_GPIO_WritePin>

	  }

	  if (!isArmed) {
 8001880:	4b06      	ldr	r3, [pc, #24]	@ (800189c <StartBuzzerTask+0x40>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	f083 0301 	eor.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0ea      	beq.n	8001864 <StartBuzzerTask+0x8>
		  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001894:	4803      	ldr	r0, [pc, #12]	@ (80018a4 <StartBuzzerTask+0x48>)
 8001896:	f001 f849 	bl	800292c <HAL_GPIO_WritePin>
	  if (isArmed && sensorStatus) {
 800189a:	e7e3      	b.n	8001864 <StartBuzzerTask+0x8>
 800189c:	2000000c 	.word	0x2000000c
 80018a0:	200002bc 	.word	0x200002bc
 80018a4:	40020800 	.word	0x40020800

080018a8 <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void *argument)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorTask */
  /* Infinite loop */
  for(;;)
  {

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET){
 80018b0:	2120      	movs	r1, #32
 80018b2:	4807      	ldr	r0, [pc, #28]	@ (80018d0 <StartSensorTask+0x28>)
 80018b4:	f001 f822 	bl	80028fc <HAL_GPIO_ReadPin>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d103      	bne.n	80018c6 <StartSensorTask+0x1e>
		  sensorStatus = true;
 80018be:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <StartSensorTask+0x2c>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	e7f4      	b.n	80018b0 <StartSensorTask+0x8>
	  } else {
		  sensorStatus = false;
 80018c6:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <StartSensorTask+0x2c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET){
 80018cc:	e7f0      	b.n	80018b0 <StartSensorTask+0x8>
 80018ce:	bf00      	nop
 80018d0:	40020000 	.word	0x40020000
 80018d4:	200002bc 	.word	0x200002bc

080018d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a04      	ldr	r2, [pc, #16]	@ (80018f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018ea:	f000 fd4d 	bl	8002388 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40001000 	.word	0x40001000

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <Error_Handler+0x8>

08001908 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800190e:	f000 fa1f 	bl	8001d50 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001912:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001916:	2201      	movs	r2, #1
 8001918:	2178      	movs	r1, #120	@ 0x78
 800191a:	485b      	ldr	r0, [pc, #364]	@ (8001a88 <SSD1306_Init+0x180>)
 800191c:	f001 fa7c 	bl	8002e18 <HAL_I2C_IsDeviceReady>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001926:	2300      	movs	r3, #0
 8001928:	e0a9      	b.n	8001a7e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800192a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800192e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001930:	e002      	b.n	8001938 <SSD1306_Init+0x30>
		p--;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3b01      	subs	r3, #1
 8001936:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f9      	bne.n	8001932 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800193e:	22ae      	movs	r2, #174	@ 0xae
 8001940:	2100      	movs	r1, #0
 8001942:	2078      	movs	r0, #120	@ 0x78
 8001944:	f000 fa80 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001948:	2220      	movs	r2, #32
 800194a:	2100      	movs	r1, #0
 800194c:	2078      	movs	r0, #120	@ 0x78
 800194e:	f000 fa7b 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001952:	2210      	movs	r2, #16
 8001954:	2100      	movs	r1, #0
 8001956:	2078      	movs	r0, #120	@ 0x78
 8001958:	f000 fa76 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800195c:	22b0      	movs	r2, #176	@ 0xb0
 800195e:	2100      	movs	r1, #0
 8001960:	2078      	movs	r0, #120	@ 0x78
 8001962:	f000 fa71 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001966:	22c8      	movs	r2, #200	@ 0xc8
 8001968:	2100      	movs	r1, #0
 800196a:	2078      	movs	r0, #120	@ 0x78
 800196c:	f000 fa6c 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001970:	2200      	movs	r2, #0
 8001972:	2100      	movs	r1, #0
 8001974:	2078      	movs	r0, #120	@ 0x78
 8001976:	f000 fa67 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800197a:	2210      	movs	r2, #16
 800197c:	2100      	movs	r1, #0
 800197e:	2078      	movs	r0, #120	@ 0x78
 8001980:	f000 fa62 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001984:	2240      	movs	r2, #64	@ 0x40
 8001986:	2100      	movs	r1, #0
 8001988:	2078      	movs	r0, #120	@ 0x78
 800198a:	f000 fa5d 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800198e:	2281      	movs	r2, #129	@ 0x81
 8001990:	2100      	movs	r1, #0
 8001992:	2078      	movs	r0, #120	@ 0x78
 8001994:	f000 fa58 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001998:	22ff      	movs	r2, #255	@ 0xff
 800199a:	2100      	movs	r1, #0
 800199c:	2078      	movs	r0, #120	@ 0x78
 800199e:	f000 fa53 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80019a2:	22a1      	movs	r2, #161	@ 0xa1
 80019a4:	2100      	movs	r1, #0
 80019a6:	2078      	movs	r0, #120	@ 0x78
 80019a8:	f000 fa4e 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80019ac:	22a6      	movs	r2, #166	@ 0xa6
 80019ae:	2100      	movs	r1, #0
 80019b0:	2078      	movs	r0, #120	@ 0x78
 80019b2:	f000 fa49 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80019b6:	22a8      	movs	r2, #168	@ 0xa8
 80019b8:	2100      	movs	r1, #0
 80019ba:	2078      	movs	r0, #120	@ 0x78
 80019bc:	f000 fa44 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80019c0:	223f      	movs	r2, #63	@ 0x3f
 80019c2:	2100      	movs	r1, #0
 80019c4:	2078      	movs	r0, #120	@ 0x78
 80019c6:	f000 fa3f 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019ca:	22a4      	movs	r2, #164	@ 0xa4
 80019cc:	2100      	movs	r1, #0
 80019ce:	2078      	movs	r0, #120	@ 0x78
 80019d0:	f000 fa3a 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80019d4:	22d3      	movs	r2, #211	@ 0xd3
 80019d6:	2100      	movs	r1, #0
 80019d8:	2078      	movs	r0, #120	@ 0x78
 80019da:	f000 fa35 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2078      	movs	r0, #120	@ 0x78
 80019e4:	f000 fa30 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80019e8:	22d5      	movs	r2, #213	@ 0xd5
 80019ea:	2100      	movs	r1, #0
 80019ec:	2078      	movs	r0, #120	@ 0x78
 80019ee:	f000 fa2b 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80019f2:	22f0      	movs	r2, #240	@ 0xf0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2078      	movs	r0, #120	@ 0x78
 80019f8:	f000 fa26 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80019fc:	22d9      	movs	r2, #217	@ 0xd9
 80019fe:	2100      	movs	r1, #0
 8001a00:	2078      	movs	r0, #120	@ 0x78
 8001a02:	f000 fa21 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001a06:	2222      	movs	r2, #34	@ 0x22
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2078      	movs	r0, #120	@ 0x78
 8001a0c:	f000 fa1c 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001a10:	22da      	movs	r2, #218	@ 0xda
 8001a12:	2100      	movs	r1, #0
 8001a14:	2078      	movs	r0, #120	@ 0x78
 8001a16:	f000 fa17 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001a1a:	2212      	movs	r2, #18
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2078      	movs	r0, #120	@ 0x78
 8001a20:	f000 fa12 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001a24:	22db      	movs	r2, #219	@ 0xdb
 8001a26:	2100      	movs	r1, #0
 8001a28:	2078      	movs	r0, #120	@ 0x78
 8001a2a:	f000 fa0d 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001a2e:	2220      	movs	r2, #32
 8001a30:	2100      	movs	r1, #0
 8001a32:	2078      	movs	r0, #120	@ 0x78
 8001a34:	f000 fa08 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001a38:	228d      	movs	r2, #141	@ 0x8d
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2078      	movs	r0, #120	@ 0x78
 8001a3e:	f000 fa03 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001a42:	2214      	movs	r2, #20
 8001a44:	2100      	movs	r1, #0
 8001a46:	2078      	movs	r0, #120	@ 0x78
 8001a48:	f000 f9fe 	bl	8001e48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001a4c:	22af      	movs	r2, #175	@ 0xaf
 8001a4e:	2100      	movs	r1, #0
 8001a50:	2078      	movs	r0, #120	@ 0x78
 8001a52:	f000 f9f9 	bl	8001e48 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001a56:	222e      	movs	r2, #46	@ 0x2e
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2078      	movs	r0, #120	@ 0x78
 8001a5c:	f000 f9f4 	bl	8001e48 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f000 f843 	bl	8001aec <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001a66:	f000 f813 	bl	8001a90 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <SSD1306_Init+0x184>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <SSD1306_Init+0x184>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001a76:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <SSD1306_Init+0x184>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000208 	.word	0x20000208
 8001a8c:	200006c0 	.word	0x200006c0

08001a90 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001a96:	2300      	movs	r3, #0
 8001a98:	71fb      	strb	r3, [r7, #7]
 8001a9a:	e01d      	b.n	8001ad8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	3b50      	subs	r3, #80	@ 0x50
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2078      	movs	r0, #120	@ 0x78
 8001aa8:	f000 f9ce 	bl	8001e48 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2078      	movs	r0, #120	@ 0x78
 8001ab2:	f000 f9c9 	bl	8001e48 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001ab6:	2210      	movs	r2, #16
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2078      	movs	r0, #120	@ 0x78
 8001abc:	f000 f9c4 	bl	8001e48 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	01db      	lsls	r3, r3, #7
 8001ac4:	4a08      	ldr	r2, [pc, #32]	@ (8001ae8 <SSD1306_UpdateScreen+0x58>)
 8001ac6:	441a      	add	r2, r3
 8001ac8:	2380      	movs	r3, #128	@ 0x80
 8001aca:	2140      	movs	r1, #64	@ 0x40
 8001acc:	2078      	movs	r0, #120	@ 0x78
 8001ace:	f000 f955 	bl	8001d7c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	71fb      	strb	r3, [r7, #7]
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	2b07      	cmp	r3, #7
 8001adc:	d9de      	bls.n	8001a9c <SSD1306_UpdateScreen+0xc>
	}
}
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200002c0 	.word	0x200002c0

08001aec <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <SSD1306_Fill+0x14>
 8001afc:	2300      	movs	r3, #0
 8001afe:	e000      	b.n	8001b02 <SSD1306_Fill+0x16>
 8001b00:	23ff      	movs	r3, #255	@ 0xff
 8001b02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b06:	4619      	mov	r1, r3
 8001b08:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <SSD1306_Fill+0x2c>)
 8001b0a:	f006 fd96 	bl	800863a <memset>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200002c0 	.word	0x200002c0

08001b1c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	80fb      	strh	r3, [r7, #6]
 8001b26:	460b      	mov	r3, r1
 8001b28:	80bb      	strh	r3, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	70fb      	strb	r3, [r7, #3]
	if (
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b32:	d848      	bhi.n	8001bc6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001b34:	88bb      	ldrh	r3, [r7, #4]
 8001b36:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b38:	d845      	bhi.n	8001bc6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001b3a:	4b26      	ldr	r3, [pc, #152]	@ (8001bd4 <SSD1306_DrawPixel+0xb8>)
 8001b3c:	791b      	ldrb	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d006      	beq.n	8001b50 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d11a      	bne.n	8001b8c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b56:	88fa      	ldrh	r2, [r7, #6]
 8001b58:	88bb      	ldrh	r3, [r7, #4]
 8001b5a:	08db      	lsrs	r3, r3, #3
 8001b5c:	b298      	uxth	r0, r3
 8001b5e:	4603      	mov	r3, r0
 8001b60:	01db      	lsls	r3, r3, #7
 8001b62:	4413      	add	r3, r2
 8001b64:	4a1c      	ldr	r2, [pc, #112]	@ (8001bd8 <SSD1306_DrawPixel+0xbc>)
 8001b66:	5cd3      	ldrb	r3, [r2, r3]
 8001b68:	b25a      	sxtb	r2, r3
 8001b6a:	88bb      	ldrh	r3, [r7, #4]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	2101      	movs	r1, #1
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	b259      	sxtb	r1, r3
 8001b7c:	88fa      	ldrh	r2, [r7, #6]
 8001b7e:	4603      	mov	r3, r0
 8001b80:	01db      	lsls	r3, r3, #7
 8001b82:	4413      	add	r3, r2
 8001b84:	b2c9      	uxtb	r1, r1
 8001b86:	4a14      	ldr	r2, [pc, #80]	@ (8001bd8 <SSD1306_DrawPixel+0xbc>)
 8001b88:	54d1      	strb	r1, [r2, r3]
 8001b8a:	e01d      	b.n	8001bc8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b8c:	88fa      	ldrh	r2, [r7, #6]
 8001b8e:	88bb      	ldrh	r3, [r7, #4]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	b298      	uxth	r0, r3
 8001b94:	4603      	mov	r3, r0
 8001b96:	01db      	lsls	r3, r3, #7
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd8 <SSD1306_DrawPixel+0xbc>)
 8001b9c:	5cd3      	ldrb	r3, [r2, r3]
 8001b9e:	b25a      	sxtb	r2, r3
 8001ba0:	88bb      	ldrh	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	b25b      	sxtb	r3, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	b25b      	sxtb	r3, r3
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	b259      	sxtb	r1, r3
 8001bb6:	88fa      	ldrh	r2, [r7, #6]
 8001bb8:	4603      	mov	r3, r0
 8001bba:	01db      	lsls	r3, r3, #7
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2c9      	uxtb	r1, r1
 8001bc0:	4a05      	ldr	r2, [pc, #20]	@ (8001bd8 <SSD1306_DrawPixel+0xbc>)
 8001bc2:	54d1      	strb	r1, [r2, r3]
 8001bc4:	e000      	b.n	8001bc8 <SSD1306_DrawPixel+0xac>
		return;
 8001bc6:	bf00      	nop
	}
}
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	200006c0 	.word	0x200006c0
 8001bd8:	200002c0 	.word	0x200002c0

08001bdc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	460a      	mov	r2, r1
 8001be6:	80fb      	strh	r3, [r7, #6]
 8001be8:	4613      	mov	r3, r2
 8001bea:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001bec:	4a05      	ldr	r2, [pc, #20]	@ (8001c04 <SSD1306_GotoXY+0x28>)
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	@ (8001c04 <SSD1306_GotoXY+0x28>)
 8001bf4:	88bb      	ldrh	r3, [r7, #4]
 8001bf6:	8053      	strh	r3, [r2, #2]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	200006c0 	.word	0x200006c0

08001c08 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	71fb      	strb	r3, [r7, #7]
 8001c14:	4613      	mov	r3, r2
 8001c16:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c18:	4b39      	ldr	r3, [pc, #228]	@ (8001d00 <SSD1306_Putc+0xf8>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	4413      	add	r3, r2
	if (
 8001c24:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c26:	dc07      	bgt.n	8001c38 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001c28:	4b35      	ldr	r3, [pc, #212]	@ (8001d00 <SSD1306_Putc+0xf8>)
 8001c2a:	885b      	ldrh	r3, [r3, #2]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	785b      	ldrb	r3, [r3, #1]
 8001c32:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c34:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c36:	dd01      	ble.n	8001c3c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e05d      	b.n	8001cf8 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	e04b      	b.n	8001cda <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	3b20      	subs	r3, #32
 8001c4a:	6839      	ldr	r1, [r7, #0]
 8001c4c:	7849      	ldrb	r1, [r1, #1]
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	440b      	add	r3, r1
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	e030      	b.n	8001cc8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d010      	beq.n	8001c98 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001c76:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <SSD1306_Putc+0xf8>)
 8001c78:	881a      	ldrh	r2, [r3, #0]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	b298      	uxth	r0, r3
 8001c82:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <SSD1306_Putc+0xf8>)
 8001c84:	885a      	ldrh	r2, [r3, #2]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	79ba      	ldrb	r2, [r7, #6]
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7ff ff43 	bl	8001b1c <SSD1306_DrawPixel>
 8001c96:	e014      	b.n	8001cc2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001c98:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <SSD1306_Putc+0xf8>)
 8001c9a:	881a      	ldrh	r2, [r3, #0]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b298      	uxth	r0, r3
 8001ca4:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <SSD1306_Putc+0xf8>)
 8001ca6:	885a      	ldrh	r2, [r3, #2]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	b299      	uxth	r1, r3
 8001cb0:	79bb      	ldrb	r3, [r7, #6]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bf0c      	ite	eq
 8001cb6:	2301      	moveq	r3, #1
 8001cb8:	2300      	movne	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f7ff ff2d 	bl	8001b1c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d3c8      	bcc.n	8001c66 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	785b      	ldrb	r3, [r3, #1]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d3ad      	bcc.n	8001c42 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <SSD1306_Putc+0xf8>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <SSD1306_Putc+0xf8>)
 8001cf4:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	200006c0 	.word	0x200006c0

08001d04 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001d12:	e012      	b.n	8001d3a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	79fa      	ldrb	r2, [r7, #7]
 8001d1a:	68b9      	ldr	r1, [r7, #8]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff73 	bl	8001c08 <SSD1306_Putc>
 8001d22:	4603      	mov	r3, r0
 8001d24:	461a      	mov	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d002      	beq.n	8001d34 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	e008      	b.n	8001d46 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3301      	adds	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1e8      	bne.n	8001d14 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	781b      	ldrb	r3, [r3, #0]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001d56:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <ssd1306_I2C_Init+0x28>)
 8001d58:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d5a:	e002      	b.n	8001d62 <ssd1306_I2C_Init+0x12>
		p--;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f9      	bne.n	8001d5c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	0003d090 	.word	0x0003d090

08001d7c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b0c7      	sub	sp, #284	@ 0x11c
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	4604      	mov	r4, r0
 8001d84:	4608      	mov	r0, r1
 8001d86:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001d8a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001d8e:	600a      	str	r2, [r1, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d96:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001d9a:	4622      	mov	r2, r4
 8001d9c:	701a      	strb	r2, [r3, #0]
 8001d9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001da2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001da6:	4602      	mov	r2, r0
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001db2:	460a      	mov	r2, r1
 8001db4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001db6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001dbe:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001dc2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001dc6:	7812      	ldrb	r2, [r2, #0]
 8001dc8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001dd0:	e015      	b.n	8001dfe <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001dd2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001dd6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001dda:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	441a      	add	r2, r3
 8001de2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001de6:	3301      	adds	r3, #1
 8001de8:	7811      	ldrb	r1, [r2, #0]
 8001dea:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001dee:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001df2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001df4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001dfe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001e08:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001e0c:	8812      	ldrh	r2, [r2, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d8df      	bhi.n	8001dd2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001e12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e16:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	b299      	uxth	r1, r3
 8001e1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	f107 020c 	add.w	r2, r7, #12
 8001e30:	200a      	movs	r0, #10
 8001e32:	9000      	str	r0, [sp, #0]
 8001e34:	4803      	ldr	r0, [pc, #12]	@ (8001e44 <ssd1306_I2C_WriteMulti+0xc8>)
 8001e36:	f000 fef1 	bl	8002c1c <HAL_I2C_Master_Transmit>
}
 8001e3a:	bf00      	nop
 8001e3c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	20000208 	.word	0x20000208

08001e48 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
 8001e52:	460b      	mov	r3, r1
 8001e54:	71bb      	strb	r3, [r7, #6]
 8001e56:	4613      	mov	r3, r2
 8001e58:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001e5a:	79bb      	ldrb	r3, [r7, #6]
 8001e5c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001e5e:	797b      	ldrb	r3, [r7, #5]
 8001e60:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	b299      	uxth	r1, r3
 8001e66:	f107 020c 	add.w	r2, r7, #12
 8001e6a:	230a      	movs	r3, #10
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2302      	movs	r3, #2
 8001e70:	4803      	ldr	r0, [pc, #12]	@ (8001e80 <ssd1306_I2C_Write+0x38>)
 8001e72:	f000 fed3 	bl	8002c1c <HAL_I2C_Master_Transmit>
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000208 	.word	0x20000208

08001e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ed8 <HAL_MspInit+0x54>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	4a11      	ldr	r2, [pc, #68]	@ (8001ed8 <HAL_MspInit+0x54>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <HAL_MspInit+0x54>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <HAL_MspInit+0x54>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed8 <HAL_MspInit+0x54>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb6:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <HAL_MspInit+0x54>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	210f      	movs	r1, #15
 8001ec6:	f06f 0001 	mvn.w	r0, #1
 8001eca:	f000 fb59 	bl	8002580 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800

08001edc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	@ 0x28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a19      	ldr	r2, [pc, #100]	@ (8001f60 <HAL_I2C_MspInit+0x84>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d12c      	bne.n	8001f58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <HAL_I2C_MspInit+0x88>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	4a17      	ldr	r2, [pc, #92]	@ (8001f64 <HAL_I2C_MspInit+0x88>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0e:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <HAL_I2C_MspInit+0x88>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001f1a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f20:	2312      	movs	r3, #18
 8001f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	4619      	mov	r1, r3
 8001f36:	480c      	ldr	r0, [pc, #48]	@ (8001f68 <HAL_I2C_MspInit+0x8c>)
 8001f38:	f000 fb4c 	bl	80025d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <HAL_I2C_MspInit+0x88>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	4a07      	ldr	r2, [pc, #28]	@ (8001f64 <HAL_I2C_MspInit+0x88>)
 8001f46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <HAL_I2C_MspInit+0x88>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f58:	bf00      	nop
 8001f5a:	3728      	adds	r7, #40	@ 0x28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40005400 	.word	0x40005400
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020400 	.word	0x40020400

08001f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	@ 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a19      	ldr	r2, [pc, #100]	@ (8001ff0 <HAL_UART_MspInit+0x84>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d12b      	bne.n	8001fe6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <HAL_UART_MspInit+0x88>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	4a17      	ldr	r2, [pc, #92]	@ (8001ff4 <HAL_UART_MspInit+0x88>)
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ff4 <HAL_UART_MspInit+0x88>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <HAL_UART_MspInit+0x88>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a10      	ldr	r2, [pc, #64]	@ (8001ff4 <HAL_UART_MspInit+0x88>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <HAL_UART_MspInit+0x88>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fc6:	230c      	movs	r3, #12
 8001fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fd6:	2307      	movs	r3, #7
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	@ (8001ff8 <HAL_UART_MspInit+0x8c>)
 8001fe2:	f000 faf7 	bl	80025d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fe6:	bf00      	nop
 8001fe8:	3728      	adds	r7, #40	@ 0x28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40004400 	.word	0x40004400
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020000 	.word	0x40020000

08001ffc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08e      	sub	sp, #56	@ 0x38
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	4b33      	ldr	r3, [pc, #204]	@ (80020e0 <HAL_InitTick+0xe4>)
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	4a32      	ldr	r2, [pc, #200]	@ (80020e0 <HAL_InitTick+0xe4>)
 8002016:	f043 0310 	orr.w	r3, r3, #16
 800201a:	6413      	str	r3, [r2, #64]	@ 0x40
 800201c:	4b30      	ldr	r3, [pc, #192]	@ (80020e0 <HAL_InitTick+0xe4>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002028:	f107 0210 	add.w	r2, r7, #16
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f001 fb94 	bl	8003760 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800203c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800203e:	2b00      	cmp	r3, #0
 8002040:	d103      	bne.n	800204a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002042:	f001 fb65 	bl	8003710 <HAL_RCC_GetPCLK1Freq>
 8002046:	6378      	str	r0, [r7, #52]	@ 0x34
 8002048:	e004      	b.n	8002054 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800204a:	f001 fb61 	bl	8003710 <HAL_RCC_GetPCLK1Freq>
 800204e:	4603      	mov	r3, r0
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002056:	4a23      	ldr	r2, [pc, #140]	@ (80020e4 <HAL_InitTick+0xe8>)
 8002058:	fba2 2303 	umull	r2, r3, r2, r3
 800205c:	0c9b      	lsrs	r3, r3, #18
 800205e:	3b01      	subs	r3, #1
 8002060:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002062:	4b21      	ldr	r3, [pc, #132]	@ (80020e8 <HAL_InitTick+0xec>)
 8002064:	4a21      	ldr	r2, [pc, #132]	@ (80020ec <HAL_InitTick+0xf0>)
 8002066:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002068:	4b1f      	ldr	r3, [pc, #124]	@ (80020e8 <HAL_InitTick+0xec>)
 800206a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800206e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002070:	4a1d      	ldr	r2, [pc, #116]	@ (80020e8 <HAL_InitTick+0xec>)
 8002072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002074:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002076:	4b1c      	ldr	r3, [pc, #112]	@ (80020e8 <HAL_InitTick+0xec>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207c:	4b1a      	ldr	r3, [pc, #104]	@ (80020e8 <HAL_InitTick+0xec>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002082:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_InitTick+0xec>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002088:	4817      	ldr	r0, [pc, #92]	@ (80020e8 <HAL_InitTick+0xec>)
 800208a:	f002 f869 	bl	8004160 <HAL_TIM_Base_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002094:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002098:	2b00      	cmp	r3, #0
 800209a:	d11b      	bne.n	80020d4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800209c:	4812      	ldr	r0, [pc, #72]	@ (80020e8 <HAL_InitTick+0xec>)
 800209e:	f002 f8b9 	bl	8004214 <HAL_TIM_Base_Start_IT>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80020a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d111      	bne.n	80020d4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020b0:	2036      	movs	r0, #54	@ 0x36
 80020b2:	f000 fa81 	bl	80025b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	d808      	bhi.n	80020ce <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80020bc:	2200      	movs	r2, #0
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	2036      	movs	r0, #54	@ 0x36
 80020c2:	f000 fa5d 	bl	8002580 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020c6:	4a0a      	ldr	r2, [pc, #40]	@ (80020f0 <HAL_InitTick+0xf4>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	e002      	b.n	80020d4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80020d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3738      	adds	r7, #56	@ 0x38
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	431bde83 	.word	0x431bde83
 80020e8:	200006c8 	.word	0x200006c8
 80020ec:	40001000 	.word	0x40001000
 80020f0:	20000014 	.word	0x20000014

080020f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020f8:	bf00      	nop
 80020fa:	e7fd      	b.n	80020f8 <NMI_Handler+0x4>

080020fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <HardFault_Handler+0x4>

08002104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <MemManage_Handler+0x4>

0800210c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <BusFault_Handler+0x4>

08002114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <UsageFault_Handler+0x4>

0800211c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002130:	4802      	ldr	r0, [pc, #8]	@ (800213c <TIM6_DAC_IRQHandler+0x10>)
 8002132:	f002 f8df 	bl	80042f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200006c8 	.word	0x200006c8

08002140 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return 1;
 8002144:	2301      	movs	r3, #1
}
 8002146:	4618      	mov	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <_kill>:

int _kill(int pid, int sig)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800215a:	f006 fac1 	bl	80086e0 <__errno>
 800215e:	4603      	mov	r3, r0
 8002160:	2216      	movs	r2, #22
 8002162:	601a      	str	r2, [r3, #0]
  return -1;
 8002164:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <_exit>:

void _exit (int status)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002178:	f04f 31ff 	mov.w	r1, #4294967295
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff ffe7 	bl	8002150 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002182:	bf00      	nop
 8002184:	e7fd      	b.n	8002182 <_exit+0x12>

08002186 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e00a      	b.n	80021ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002198:	f3af 8000 	nop.w
 800219c:	4601      	mov	r1, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	60ba      	str	r2, [r7, #8]
 80021a4:	b2ca      	uxtb	r2, r1
 80021a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3301      	adds	r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	dbf0      	blt.n	8002198 <_read+0x12>
  }

  return len;
 80021b6:	687b      	ldr	r3, [r7, #4]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	e009      	b.n	80021e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	60ba      	str	r2, [r7, #8]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3301      	adds	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	dbf1      	blt.n	80021d2 <_write+0x12>
  }
  return len;
 80021ee:	687b      	ldr	r3, [r7, #4]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_close>:

int _close(int file)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002220:	605a      	str	r2, [r3, #4]
  return 0;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <_isatty>:

int _isatty(int file)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002238:	2301      	movs	r3, #1
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002246:	b480      	push	{r7}
 8002248:	b085      	sub	sp, #20
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002268:	4a14      	ldr	r2, [pc, #80]	@ (80022bc <_sbrk+0x5c>)
 800226a:	4b15      	ldr	r3, [pc, #84]	@ (80022c0 <_sbrk+0x60>)
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002274:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <_sbrk+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800227c:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <_sbrk+0x64>)
 800227e:	4a12      	ldr	r2, [pc, #72]	@ (80022c8 <_sbrk+0x68>)
 8002280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002282:	4b10      	ldr	r3, [pc, #64]	@ (80022c4 <_sbrk+0x64>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	429a      	cmp	r2, r3
 800228e:	d207      	bcs.n	80022a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002290:	f006 fa26 	bl	80086e0 <__errno>
 8002294:	4603      	mov	r3, r0
 8002296:	220c      	movs	r2, #12
 8002298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
 800229e:	e009      	b.n	80022b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a0:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <_sbrk+0x64>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022a6:	4b07      	ldr	r3, [pc, #28]	@ (80022c4 <_sbrk+0x64>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	4a05      	ldr	r2, [pc, #20]	@ (80022c4 <_sbrk+0x64>)
 80022b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022b2:	68fb      	ldr	r3, [r7, #12]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20020000 	.word	0x20020000
 80022c0:	00000400 	.word	0x00000400
 80022c4:	20000710 	.word	0x20000710
 80022c8:	200051b8 	.word	0x200051b8

080022cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022d0:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <SystemInit+0x20>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d6:	4a05      	ldr	r2, [pc, #20]	@ (80022ec <SystemInit+0x20>)
 80022d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002328 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022f4:	f7ff ffea 	bl	80022cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022f8:	480c      	ldr	r0, [pc, #48]	@ (800232c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022fa:	490d      	ldr	r1, [pc, #52]	@ (8002330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002300:	e002      	b.n	8002308 <LoopCopyDataInit>

08002302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002306:	3304      	adds	r3, #4

08002308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800230a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800230c:	d3f9      	bcc.n	8002302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230e:	4a0a      	ldr	r2, [pc, #40]	@ (8002338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002310:	4c0a      	ldr	r4, [pc, #40]	@ (800233c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002314:	e001      	b.n	800231a <LoopFillZerobss>

08002316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002318:	3204      	adds	r2, #4

0800231a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800231a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800231c:	d3fb      	bcc.n	8002316 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800231e:	f006 f9e5 	bl	80086ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002322:	f7ff f833 	bl	800138c <main>
  bx  lr    
 8002326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002328:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800232c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002330:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002334:	0800d0d0 	.word	0x0800d0d0
  ldr r2, =_sbss
 8002338:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800233c:	200051b4 	.word	0x200051b4

08002340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002340:	e7fe      	b.n	8002340 <ADC_IRQHandler>
	...

08002344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002348:	4b0e      	ldr	r3, [pc, #56]	@ (8002384 <HAL_Init+0x40>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0d      	ldr	r2, [pc, #52]	@ (8002384 <HAL_Init+0x40>)
 800234e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002352:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002354:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <HAL_Init+0x40>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0a      	ldr	r2, [pc, #40]	@ (8002384 <HAL_Init+0x40>)
 800235a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800235e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002360:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <HAL_Init+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a07      	ldr	r2, [pc, #28]	@ (8002384 <HAL_Init+0x40>)
 8002366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800236a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236c:	2003      	movs	r0, #3
 800236e:	f000 f8fc 	bl	800256a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002372:	200f      	movs	r0, #15
 8002374:	f7ff fe42 	bl	8001ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002378:	f7ff fd84 	bl	8001e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023c00 	.word	0x40023c00

08002388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800238c:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <HAL_IncTick+0x20>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_IncTick+0x24>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4413      	add	r3, r2
 8002398:	4a04      	ldr	r2, [pc, #16]	@ (80023ac <HAL_IncTick+0x24>)
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000018 	.word	0x20000018
 80023ac:	20000714 	.word	0x20000714

080023b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return uwTick;
 80023b4:	4b03      	ldr	r3, [pc, #12]	@ (80023c4 <HAL_GetTick+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000714 	.word	0x20000714

080023c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff ffee 	bl	80023b0 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d005      	beq.n	80023ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023e2:	4b0a      	ldr	r3, [pc, #40]	@ (800240c <HAL_Delay+0x44>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ee:	bf00      	nop
 80023f0:	f7ff ffde 	bl	80023b0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d8f7      	bhi.n	80023f0 <HAL_Delay+0x28>
  {
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000018 	.word	0x20000018

08002410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002420:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002438:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800243c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002442:	4a04      	ldr	r2, [pc, #16]	@ (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	60d3      	str	r3, [r2, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800245c:	4b04      	ldr	r3, [pc, #16]	@ (8002470 <__NVIC_GetPriorityGrouping+0x18>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 0307 	and.w	r3, r3, #7
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	2b00      	cmp	r3, #0
 8002484:	db0b      	blt.n	800249e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	4907      	ldr	r1, [pc, #28]	@ (80024ac <__NVIC_EnableIRQ+0x38>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	2001      	movs	r0, #1
 8002496:	fa00 f202 	lsl.w	r2, r0, r2
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000e100 	.word	0xe000e100

080024b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	db0a      	blt.n	80024da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	490c      	ldr	r1, [pc, #48]	@ (80024fc <__NVIC_SetPriority+0x4c>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	440b      	add	r3, r1
 80024d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d8:	e00a      	b.n	80024f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4908      	ldr	r1, [pc, #32]	@ (8002500 <__NVIC_SetPriority+0x50>)
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3b04      	subs	r3, #4
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	440b      	add	r3, r1
 80024ee:	761a      	strb	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	@ 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f1c3 0307 	rsb	r3, r3, #7
 800251e:	2b04      	cmp	r3, #4
 8002520:	bf28      	it	cs
 8002522:	2304      	movcs	r3, #4
 8002524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3304      	adds	r3, #4
 800252a:	2b06      	cmp	r3, #6
 800252c:	d902      	bls.n	8002534 <NVIC_EncodePriority+0x30>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3b03      	subs	r3, #3
 8002532:	e000      	b.n	8002536 <NVIC_EncodePriority+0x32>
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	f04f 32ff 	mov.w	r2, #4294967295
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	401a      	ands	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800254c:	f04f 31ff 	mov.w	r1, #4294967295
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43d9      	mvns	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	4313      	orrs	r3, r2
         );
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	@ 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ff4c 	bl	8002410 <__NVIC_SetPriorityGrouping>
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002592:	f7ff ff61 	bl	8002458 <__NVIC_GetPriorityGrouping>
 8002596:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	6978      	ldr	r0, [r7, #20]
 800259e:	f7ff ffb1 	bl	8002504 <NVIC_EncodePriority>
 80025a2:	4602      	mov	r2, r0
 80025a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ff80 	bl	80024b0 <__NVIC_SetPriority>
}
 80025b0:	bf00      	nop
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff54 	bl	8002474 <__NVIC_EnableIRQ>
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	@ 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	e165      	b.n	80028bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025f0:	2201      	movs	r2, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	429a      	cmp	r2, r3
 800260a:	f040 8154 	bne.w	80028b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d005      	beq.n	8002626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002622:	2b02      	cmp	r3, #2
 8002624:	d130      	bne.n	8002688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	2203      	movs	r2, #3
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800265c:	2201      	movs	r2, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 0201 	and.w	r2, r3, #1
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b03      	cmp	r3, #3
 8002692:	d017      	beq.n	80026c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d123      	bne.n	8002718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	08da      	lsrs	r2, r3, #3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3208      	adds	r2, #8
 80026d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	220f      	movs	r2, #15
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	08da      	lsrs	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3208      	adds	r2, #8
 8002712:	69b9      	ldr	r1, [r7, #24]
 8002714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0203 	and.w	r2, r3, #3
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80ae 	beq.w	80028b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b5d      	ldr	r3, [pc, #372]	@ (80028d4 <HAL_GPIO_Init+0x300>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002762:	4a5c      	ldr	r2, [pc, #368]	@ (80028d4 <HAL_GPIO_Init+0x300>)
 8002764:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002768:	6453      	str	r3, [r2, #68]	@ 0x44
 800276a:	4b5a      	ldr	r3, [pc, #360]	@ (80028d4 <HAL_GPIO_Init+0x300>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002776:	4a58      	ldr	r2, [pc, #352]	@ (80028d8 <HAL_GPIO_Init+0x304>)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	089b      	lsrs	r3, r3, #2
 800277c:	3302      	adds	r3, #2
 800277e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	220f      	movs	r2, #15
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4f      	ldr	r2, [pc, #316]	@ (80028dc <HAL_GPIO_Init+0x308>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d025      	beq.n	80027ee <HAL_GPIO_Init+0x21a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4e      	ldr	r2, [pc, #312]	@ (80028e0 <HAL_GPIO_Init+0x30c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01f      	beq.n	80027ea <HAL_GPIO_Init+0x216>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4d      	ldr	r2, [pc, #308]	@ (80028e4 <HAL_GPIO_Init+0x310>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d019      	beq.n	80027e6 <HAL_GPIO_Init+0x212>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4c      	ldr	r2, [pc, #304]	@ (80028e8 <HAL_GPIO_Init+0x314>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_GPIO_Init+0x20e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a4b      	ldr	r2, [pc, #300]	@ (80028ec <HAL_GPIO_Init+0x318>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00d      	beq.n	80027de <HAL_GPIO_Init+0x20a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4a      	ldr	r2, [pc, #296]	@ (80028f0 <HAL_GPIO_Init+0x31c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <HAL_GPIO_Init+0x206>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a49      	ldr	r2, [pc, #292]	@ (80028f4 <HAL_GPIO_Init+0x320>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_GPIO_Init+0x202>
 80027d2:	2306      	movs	r3, #6
 80027d4:	e00c      	b.n	80027f0 <HAL_GPIO_Init+0x21c>
 80027d6:	2307      	movs	r3, #7
 80027d8:	e00a      	b.n	80027f0 <HAL_GPIO_Init+0x21c>
 80027da:	2305      	movs	r3, #5
 80027dc:	e008      	b.n	80027f0 <HAL_GPIO_Init+0x21c>
 80027de:	2304      	movs	r3, #4
 80027e0:	e006      	b.n	80027f0 <HAL_GPIO_Init+0x21c>
 80027e2:	2303      	movs	r3, #3
 80027e4:	e004      	b.n	80027f0 <HAL_GPIO_Init+0x21c>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e002      	b.n	80027f0 <HAL_GPIO_Init+0x21c>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_GPIO_Init+0x21c>
 80027ee:	2300      	movs	r3, #0
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	f002 0203 	and.w	r2, r2, #3
 80027f6:	0092      	lsls	r2, r2, #2
 80027f8:	4093      	lsls	r3, r2
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002800:	4935      	ldr	r1, [pc, #212]	@ (80028d8 <HAL_GPIO_Init+0x304>)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	3302      	adds	r3, #2
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800280e:	4b3a      	ldr	r3, [pc, #232]	@ (80028f8 <HAL_GPIO_Init+0x324>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002832:	4a31      	ldr	r2, [pc, #196]	@ (80028f8 <HAL_GPIO_Init+0x324>)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002838:	4b2f      	ldr	r3, [pc, #188]	@ (80028f8 <HAL_GPIO_Init+0x324>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800285c:	4a26      	ldr	r2, [pc, #152]	@ (80028f8 <HAL_GPIO_Init+0x324>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002862:	4b25      	ldr	r3, [pc, #148]	@ (80028f8 <HAL_GPIO_Init+0x324>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002886:	4a1c      	ldr	r2, [pc, #112]	@ (80028f8 <HAL_GPIO_Init+0x324>)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800288c:	4b1a      	ldr	r3, [pc, #104]	@ (80028f8 <HAL_GPIO_Init+0x324>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028b0:	4a11      	ldr	r2, [pc, #68]	@ (80028f8 <HAL_GPIO_Init+0x324>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3301      	adds	r3, #1
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	2b0f      	cmp	r3, #15
 80028c0:	f67f ae96 	bls.w	80025f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	3724      	adds	r7, #36	@ 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40013800 	.word	0x40013800
 80028dc:	40020000 	.word	0x40020000
 80028e0:	40020400 	.word	0x40020400
 80028e4:	40020800 	.word	0x40020800
 80028e8:	40020c00 	.word	0x40020c00
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40021400 	.word	0x40021400
 80028f4:	40021800 	.word	0x40021800
 80028f8:	40013c00 	.word	0x40013c00

080028fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	887b      	ldrh	r3, [r7, #2]
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
 8002918:	e001      	b.n	800291e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800291e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	807b      	strh	r3, [r7, #2]
 8002938:	4613      	mov	r3, r2
 800293a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800293c:	787b      	ldrb	r3, [r7, #1]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002942:	887a      	ldrh	r2, [r7, #2]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002948:	e003      	b.n	8002952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800294a:	887b      	ldrh	r3, [r7, #2]
 800294c:	041a      	lsls	r2, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	619a      	str	r2, [r3, #24]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	460b      	mov	r3, r1
 8002968:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002970:	887a      	ldrh	r2, [r7, #2]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4013      	ands	r3, r2
 8002976:	041a      	lsls	r2, r3, #16
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	43d9      	mvns	r1, r3
 800297c:	887b      	ldrh	r3, [r7, #2]
 800297e:	400b      	ands	r3, r1
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	619a      	str	r2, [r3, #24]
}
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e12b      	b.n	8002bfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff fa8e 	bl	8001edc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2224      	movs	r2, #36	@ 0x24
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029f8:	f000 fe8a 	bl	8003710 <HAL_RCC_GetPCLK1Freq>
 80029fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4a81      	ldr	r2, [pc, #516]	@ (8002c08 <HAL_I2C_Init+0x274>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d807      	bhi.n	8002a18 <HAL_I2C_Init+0x84>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4a80      	ldr	r2, [pc, #512]	@ (8002c0c <HAL_I2C_Init+0x278>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	bf94      	ite	ls
 8002a10:	2301      	movls	r3, #1
 8002a12:	2300      	movhi	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	e006      	b.n	8002a26 <HAL_I2C_Init+0x92>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c10 <HAL_I2C_Init+0x27c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	bf94      	ite	ls
 8002a20:	2301      	movls	r3, #1
 8002a22:	2300      	movhi	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e0e7      	b.n	8002bfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4a78      	ldr	r2, [pc, #480]	@ (8002c14 <HAL_I2C_Init+0x280>)
 8002a32:	fba2 2303 	umull	r2, r3, r2, r3
 8002a36:	0c9b      	lsrs	r3, r3, #18
 8002a38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a6a      	ldr	r2, [pc, #424]	@ (8002c08 <HAL_I2C_Init+0x274>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d802      	bhi.n	8002a68 <HAL_I2C_Init+0xd4>
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3301      	adds	r3, #1
 8002a66:	e009      	b.n	8002a7c <HAL_I2C_Init+0xe8>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	4a69      	ldr	r2, [pc, #420]	@ (8002c18 <HAL_I2C_Init+0x284>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	099b      	lsrs	r3, r3, #6
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	430b      	orrs	r3, r1
 8002a82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	495c      	ldr	r1, [pc, #368]	@ (8002c08 <HAL_I2C_Init+0x274>)
 8002a98:	428b      	cmp	r3, r1
 8002a9a:	d819      	bhi.n	8002ad0 <HAL_I2C_Init+0x13c>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1e59      	subs	r1, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aaa:	1c59      	adds	r1, r3, #1
 8002aac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ab0:	400b      	ands	r3, r1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_I2C_Init+0x138>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1e59      	subs	r1, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aca:	e051      	b.n	8002b70 <HAL_I2C_Init+0x1dc>
 8002acc:	2304      	movs	r3, #4
 8002ace:	e04f      	b.n	8002b70 <HAL_I2C_Init+0x1dc>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d111      	bne.n	8002afc <HAL_I2C_Init+0x168>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	1e58      	subs	r0, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6859      	ldr	r1, [r3, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	440b      	add	r3, r1
 8002ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aea:	3301      	adds	r3, #1
 8002aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	e012      	b.n	8002b22 <HAL_I2C_Init+0x18e>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	1e58      	subs	r0, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6859      	ldr	r1, [r3, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	0099      	lsls	r1, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b12:	3301      	adds	r3, #1
 8002b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf0c      	ite	eq
 8002b1c:	2301      	moveq	r3, #1
 8002b1e:	2300      	movne	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_I2C_Init+0x196>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e022      	b.n	8002b70 <HAL_I2C_Init+0x1dc>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10e      	bne.n	8002b50 <HAL_I2C_Init+0x1bc>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1e58      	subs	r0, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6859      	ldr	r1, [r3, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	440b      	add	r3, r1
 8002b40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b44:	3301      	adds	r3, #1
 8002b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b4e:	e00f      	b.n	8002b70 <HAL_I2C_Init+0x1dc>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1e58      	subs	r0, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6859      	ldr	r1, [r3, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	0099      	lsls	r1, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b66:	3301      	adds	r3, #1
 8002b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	6809      	ldr	r1, [r1, #0]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6911      	ldr	r1, [r2, #16]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68d2      	ldr	r2, [r2, #12]
 8002baa:	4311      	orrs	r1, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	000186a0 	.word	0x000186a0
 8002c0c:	001e847f 	.word	0x001e847f
 8002c10:	003d08ff 	.word	0x003d08ff
 8002c14:	431bde83 	.word	0x431bde83
 8002c18:	10624dd3 	.word	0x10624dd3

08002c1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	461a      	mov	r2, r3
 8002c28:	460b      	mov	r3, r1
 8002c2a:	817b      	strh	r3, [r7, #10]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c30:	f7ff fbbe 	bl	80023b0 <HAL_GetTick>
 8002c34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	f040 80e0 	bne.w	8002e04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	2319      	movs	r3, #25
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4970      	ldr	r1, [pc, #448]	@ (8002e10 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 fa92 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e0d3      	b.n	8002e06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_I2C_Master_Transmit+0x50>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e0cc      	b.n	8002e06 <HAL_I2C_Master_Transmit+0x1ea>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d007      	beq.n	8002c92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0201 	orr.w	r2, r2, #1
 8002c90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2221      	movs	r2, #33	@ 0x21
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2210      	movs	r2, #16
 8002cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	893a      	ldrh	r2, [r7, #8]
 8002cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4a50      	ldr	r2, [pc, #320]	@ (8002e14 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cd4:	8979      	ldrh	r1, [r7, #10]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	6a3a      	ldr	r2, [r7, #32]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f9ca 	bl	8003074 <I2C_MasterRequestWrite>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e08d      	b.n	8002e06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d00:	e066      	b.n	8002dd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	6a39      	ldr	r1, [r7, #32]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fb50 	bl	80033ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00d      	beq.n	8002d2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d107      	bne.n	8002d2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e06b      	b.n	8002e06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	781a      	ldrb	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d11b      	bne.n	8002da4 <HAL_I2C_Master_Transmit+0x188>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d017      	beq.n	8002da4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	781a      	ldrb	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	6a39      	ldr	r1, [r7, #32]
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fb47 	bl	800343c <I2C_WaitOnBTFFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00d      	beq.n	8002dd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d107      	bne.n	8002dcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e01a      	b.n	8002e06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d194      	bne.n	8002d02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	e000      	b.n	8002e06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
  }
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	00100002 	.word	0x00100002
 8002e14:	ffff0000 	.word	0xffff0000

08002e18 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	@ 0x28
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	460b      	mov	r3, r1
 8002e26:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e28:	f7ff fac2 	bl	80023b0 <HAL_GetTick>
 8002e2c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	f040 8111 	bne.w	8003062 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2319      	movs	r3, #25
 8002e46:	2201      	movs	r2, #1
 8002e48:	4988      	ldr	r1, [pc, #544]	@ (800306c <HAL_I2C_IsDeviceReady+0x254>)
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f994 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
 8002e58:	e104      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_I2C_IsDeviceReady+0x50>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e0fd      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d007      	beq.n	8002e8e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0201 	orr.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2224      	movs	r2, #36	@ 0x24
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4a70      	ldr	r2, [pc, #448]	@ (8003070 <HAL_I2C_IsDeviceReady+0x258>)
 8002eb0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f952 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00d      	beq.n	8002ef6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ee8:	d103      	bne.n	8002ef2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ef0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e0b6      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ef6:	897b      	ldrh	r3, [r7, #10]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f04:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f06:	f7ff fa53 	bl	80023b0 <HAL_GetTick>
 8002f0a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	bf0c      	ite	eq
 8002f1a:	2301      	moveq	r3, #1
 8002f1c:	2300      	movne	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f30:	bf0c      	ite	eq
 8002f32:	2301      	moveq	r3, #1
 8002f34:	2300      	movne	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f3a:	e025      	b.n	8002f88 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f3c:	f7ff fa38 	bl	80023b0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d302      	bcc.n	8002f52 <HAL_I2C_IsDeviceReady+0x13a>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d103      	bne.n	8002f5a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	22a0      	movs	r2, #160	@ 0xa0
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f92:	d005      	beq.n	8002fa0 <HAL_I2C_IsDeviceReady+0x188>
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <HAL_I2C_IsDeviceReady+0x188>
 8002f9a:	7dbb      	ldrb	r3, [r7, #22]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0cd      	beq.n	8002f3c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d129      	bne.n	800300a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	2319      	movs	r3, #25
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4921      	ldr	r1, [pc, #132]	@ (800306c <HAL_I2C_IsDeviceReady+0x254>)
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f8c6 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e036      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	e02c      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003018:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003022:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2319      	movs	r3, #25
 800302a:	2201      	movs	r2, #1
 800302c:	490f      	ldr	r1, [pc, #60]	@ (800306c <HAL_I2C_IsDeviceReady+0x254>)
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f8a2 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e012      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	3301      	adds	r3, #1
 8003042:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	429a      	cmp	r2, r3
 800304a:	f4ff af32 	bcc.w	8002eb2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
  }
}
 8003064:	4618      	mov	r0, r3
 8003066:	3720      	adds	r7, #32
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	00100002 	.word	0x00100002
 8003070:	ffff0000 	.word	0xffff0000

08003074 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	460b      	mov	r3, r1
 8003082:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003088:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d006      	beq.n	800309e <I2C_MasterRequestWrite+0x2a>
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d003      	beq.n	800309e <I2C_MasterRequestWrite+0x2a>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800309c:	d108      	bne.n	80030b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e00b      	b.n	80030c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b4:	2b12      	cmp	r3, #18
 80030b6:	d107      	bne.n	80030c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f84f 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00d      	beq.n	80030fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ee:	d103      	bne.n	80030f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e035      	b.n	8003168 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003104:	d108      	bne.n	8003118 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003106:	897b      	ldrh	r3, [r7, #10]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	461a      	mov	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003114:	611a      	str	r2, [r3, #16]
 8003116:	e01b      	b.n	8003150 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003118:	897b      	ldrh	r3, [r7, #10]
 800311a:	11db      	asrs	r3, r3, #7
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f003 0306 	and.w	r3, r3, #6
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f063 030f 	orn	r3, r3, #15
 8003128:	b2da      	uxtb	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	490e      	ldr	r1, [pc, #56]	@ (8003170 <I2C_MasterRequestWrite+0xfc>)
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f898 	bl	800326c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e010      	b.n	8003168 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003146:	897b      	ldrh	r3, [r7, #10]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4907      	ldr	r1, [pc, #28]	@ (8003174 <I2C_MasterRequestWrite+0x100>)
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f888 	bl	800326c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	00010008 	.word	0x00010008
 8003174:	00010002 	.word	0x00010002

08003178 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003188:	e048      	b.n	800321c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d044      	beq.n	800321c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003192:	f7ff f90d 	bl	80023b0 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d139      	bne.n	800321c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	0c1b      	lsrs	r3, r3, #16
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d10d      	bne.n	80031ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	43da      	mvns	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4013      	ands	r3, r2
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	e00c      	b.n	80031e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	43da      	mvns	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4013      	ands	r3, r2
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d116      	bne.n	800321c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	f043 0220 	orr.w	r2, r3, #32
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e023      	b.n	8003264 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	0c1b      	lsrs	r3, r3, #16
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d10d      	bne.n	8003242 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	43da      	mvns	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	4013      	ands	r3, r2
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	e00c      	b.n	800325c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	43da      	mvns	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4013      	ands	r3, r2
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	461a      	mov	r2, r3
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	429a      	cmp	r2, r3
 8003260:	d093      	beq.n	800318a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800327a:	e071      	b.n	8003360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328a:	d123      	bne.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800329a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	f043 0204 	orr.w	r2, r3, #4
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e067      	b.n	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d041      	beq.n	8003360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032dc:	f7ff f868 	bl	80023b0 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d302      	bcc.n	80032f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d136      	bne.n	8003360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d10c      	bne.n	8003316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	43da      	mvns	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4013      	ands	r3, r2
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	bf14      	ite	ne
 800330e:	2301      	movne	r3, #1
 8003310:	2300      	moveq	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	e00b      	b.n	800332e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	43da      	mvns	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4013      	ands	r3, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d016      	beq.n	8003360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	f043 0220 	orr.w	r2, r3, #32
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e021      	b.n	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	0c1b      	lsrs	r3, r3, #16
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d10c      	bne.n	8003384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	43da      	mvns	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	4013      	ands	r3, r2
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf14      	ite	ne
 800337c:	2301      	movne	r3, #1
 800337e:	2300      	moveq	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	e00b      	b.n	800339c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	43da      	mvns	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4013      	ands	r3, r2
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	bf14      	ite	ne
 8003396:	2301      	movne	r3, #1
 8003398:	2300      	moveq	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	f47f af6d 	bne.w	800327c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b8:	e034      	b.n	8003424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f886 	bl	80034cc <I2C_IsAcknowledgeFailed>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e034      	b.n	8003434 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d028      	beq.n	8003424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d2:	f7fe ffed 	bl	80023b0 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d302      	bcc.n	80033e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d11d      	bne.n	8003424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f2:	2b80      	cmp	r3, #128	@ 0x80
 80033f4:	d016      	beq.n	8003424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e007      	b.n	8003434 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342e:	2b80      	cmp	r3, #128	@ 0x80
 8003430:	d1c3      	bne.n	80033ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003448:	e034      	b.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f83e 	bl	80034cc <I2C_IsAcknowledgeFailed>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e034      	b.n	80034c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d028      	beq.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7fe ffa5 	bl	80023b0 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d11d      	bne.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b04      	cmp	r3, #4
 8003484:	d016      	beq.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e007      	b.n	80034c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d1c3      	bne.n	800344a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e2:	d11b      	bne.n	800351c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	f043 0204 	orr.w	r2, r3, #4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0cc      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003540:	4b68      	ldr	r3, [pc, #416]	@ (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d90c      	bls.n	8003568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b65      	ldr	r3, [pc, #404]	@ (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b63      	ldr	r3, [pc, #396]	@ (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0b8      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d020      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003580:	4b59      	ldr	r3, [pc, #356]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4a58      	ldr	r2, [pc, #352]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800358a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003598:	4b53      	ldr	r3, [pc, #332]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4a52      	ldr	r2, [pc, #328]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a4:	4b50      	ldr	r3, [pc, #320]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	494d      	ldr	r1, [pc, #308]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d044      	beq.n	800364c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d107      	bne.n	80035da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	4b47      	ldr	r3, [pc, #284]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d119      	bne.n	800360a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e07f      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d003      	beq.n	80035ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ea:	4b3f      	ldr	r3, [pc, #252]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e06f      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fa:	4b3b      	ldr	r3, [pc, #236]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e067      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360a:	4b37      	ldr	r3, [pc, #220]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f023 0203 	bic.w	r2, r3, #3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4934      	ldr	r1, [pc, #208]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	4313      	orrs	r3, r2
 800361a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800361c:	f7fe fec8 	bl	80023b0 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	e00a      	b.n	800363a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003624:	f7fe fec4 	bl	80023b0 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e04f      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363a:	4b2b      	ldr	r3, [pc, #172]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 020c 	and.w	r2, r3, #12
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	429a      	cmp	r2, r3
 800364a:	d1eb      	bne.n	8003624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800364c:	4b25      	ldr	r3, [pc, #148]	@ (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d20c      	bcs.n	8003674 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b22      	ldr	r3, [pc, #136]	@ (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b20      	ldr	r3, [pc, #128]	@ (80036e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e032      	b.n	80036da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003680:	4b19      	ldr	r3, [pc, #100]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4916      	ldr	r1, [pc, #88]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800369e:	4b12      	ldr	r3, [pc, #72]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	490e      	ldr	r1, [pc, #56]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036b2:	f000 f887 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 80036b6:	4602      	mov	r2, r0
 80036b8:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	490a      	ldr	r1, [pc, #40]	@ (80036ec <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	5ccb      	ldrb	r3, [r1, r3]
 80036c6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ca:	4a09      	ldr	r2, [pc, #36]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ce:	4b09      	ldr	r3, [pc, #36]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe fc92 	bl	8001ffc <HAL_InitTick>

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40023c00 	.word	0x40023c00
 80036e8:	40023800 	.word	0x40023800
 80036ec:	0800cc7c 	.word	0x0800cc7c
 80036f0:	20000010 	.word	0x20000010
 80036f4:	20000014 	.word	0x20000014

080036f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036fc:	4b03      	ldr	r3, [pc, #12]	@ (800370c <HAL_RCC_GetHCLKFreq+0x14>)
 80036fe:	681b      	ldr	r3, [r3, #0]
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	20000010 	.word	0x20000010

08003710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003714:	f7ff fff0 	bl	80036f8 <HAL_RCC_GetHCLKFreq>
 8003718:	4602      	mov	r2, r0
 800371a:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	0a9b      	lsrs	r3, r3, #10
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	4903      	ldr	r1, [pc, #12]	@ (8003734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003726:	5ccb      	ldrb	r3, [r1, r3]
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800372c:	4618      	mov	r0, r3
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40023800 	.word	0x40023800
 8003734:	0800cc8c 	.word	0x0800cc8c

08003738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800373c:	f7ff ffdc 	bl	80036f8 <HAL_RCC_GetHCLKFreq>
 8003740:	4602      	mov	r2, r0
 8003742:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	0b5b      	lsrs	r3, r3, #13
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	4903      	ldr	r1, [pc, #12]	@ (800375c <HAL_RCC_GetPCLK2Freq+0x24>)
 800374e:	5ccb      	ldrb	r3, [r1, r3]
 8003750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003754:	4618      	mov	r0, r3
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40023800 	.word	0x40023800
 800375c:	0800cc8c 	.word	0x0800cc8c

08003760 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	220f      	movs	r2, #15
 800376e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003770:	4b12      	ldr	r3, [pc, #72]	@ (80037bc <HAL_RCC_GetClockConfig+0x5c>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 0203 	and.w	r2, r3, #3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800377c:	4b0f      	ldr	r3, [pc, #60]	@ (80037bc <HAL_RCC_GetClockConfig+0x5c>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003788:	4b0c      	ldr	r3, [pc, #48]	@ (80037bc <HAL_RCC_GetClockConfig+0x5c>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003794:	4b09      	ldr	r3, [pc, #36]	@ (80037bc <HAL_RCC_GetClockConfig+0x5c>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	08db      	lsrs	r3, r3, #3
 800379a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037a2:	4b07      	ldr	r3, [pc, #28]	@ (80037c0 <HAL_RCC_GetClockConfig+0x60>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 020f 	and.w	r2, r3, #15
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	601a      	str	r2, [r3, #0]
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40023c00 	.word	0x40023c00

080037c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c8:	b0ae      	sub	sp, #184	@ 0xb8
 80037ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ea:	4bcb      	ldr	r3, [pc, #812]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x354>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	2b0c      	cmp	r3, #12
 80037f4:	f200 8206 	bhi.w	8003c04 <HAL_RCC_GetSysClockFreq+0x440>
 80037f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003800 <HAL_RCC_GetSysClockFreq+0x3c>)
 80037fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fe:	bf00      	nop
 8003800:	08003835 	.word	0x08003835
 8003804:	08003c05 	.word	0x08003c05
 8003808:	08003c05 	.word	0x08003c05
 800380c:	08003c05 	.word	0x08003c05
 8003810:	0800383d 	.word	0x0800383d
 8003814:	08003c05 	.word	0x08003c05
 8003818:	08003c05 	.word	0x08003c05
 800381c:	08003c05 	.word	0x08003c05
 8003820:	08003845 	.word	0x08003845
 8003824:	08003c05 	.word	0x08003c05
 8003828:	08003c05 	.word	0x08003c05
 800382c:	08003c05 	.word	0x08003c05
 8003830:	08003a35 	.word	0x08003a35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4bb9      	ldr	r3, [pc, #740]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0x358>)
 8003836:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800383a:	e1e7      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800383c:	4bb8      	ldr	r3, [pc, #736]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x35c>)
 800383e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003842:	e1e3      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003844:	4bb4      	ldr	r3, [pc, #720]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800384c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003850:	4bb1      	ldr	r3, [pc, #708]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d071      	beq.n	8003940 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800385c:	4bae      	ldr	r3, [pc, #696]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x354>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	099b      	lsrs	r3, r3, #6
 8003862:	2200      	movs	r2, #0
 8003864:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003868:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800386c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003874:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003878:	2300      	movs	r3, #0
 800387a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800387e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003882:	4622      	mov	r2, r4
 8003884:	462b      	mov	r3, r5
 8003886:	f04f 0000 	mov.w	r0, #0
 800388a:	f04f 0100 	mov.w	r1, #0
 800388e:	0159      	lsls	r1, r3, #5
 8003890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003894:	0150      	lsls	r0, r2, #5
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4621      	mov	r1, r4
 800389c:	1a51      	subs	r1, r2, r1
 800389e:	6439      	str	r1, [r7, #64]	@ 0x40
 80038a0:	4629      	mov	r1, r5
 80038a2:	eb63 0301 	sbc.w	r3, r3, r1
 80038a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80038b4:	4649      	mov	r1, r9
 80038b6:	018b      	lsls	r3, r1, #6
 80038b8:	4641      	mov	r1, r8
 80038ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038be:	4641      	mov	r1, r8
 80038c0:	018a      	lsls	r2, r1, #6
 80038c2:	4641      	mov	r1, r8
 80038c4:	1a51      	subs	r1, r2, r1
 80038c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80038c8:	4649      	mov	r1, r9
 80038ca:	eb63 0301 	sbc.w	r3, r3, r1
 80038ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80038dc:	4649      	mov	r1, r9
 80038de:	00cb      	lsls	r3, r1, #3
 80038e0:	4641      	mov	r1, r8
 80038e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038e6:	4641      	mov	r1, r8
 80038e8:	00ca      	lsls	r2, r1, #3
 80038ea:	4610      	mov	r0, r2
 80038ec:	4619      	mov	r1, r3
 80038ee:	4603      	mov	r3, r0
 80038f0:	4622      	mov	r2, r4
 80038f2:	189b      	adds	r3, r3, r2
 80038f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80038f6:	462b      	mov	r3, r5
 80038f8:	460a      	mov	r2, r1
 80038fa:	eb42 0303 	adc.w	r3, r2, r3
 80038fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800390c:	4629      	mov	r1, r5
 800390e:	024b      	lsls	r3, r1, #9
 8003910:	4621      	mov	r1, r4
 8003912:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003916:	4621      	mov	r1, r4
 8003918:	024a      	lsls	r2, r1, #9
 800391a:	4610      	mov	r0, r2
 800391c:	4619      	mov	r1, r3
 800391e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003922:	2200      	movs	r2, #0
 8003924:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003928:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800392c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003930:	f7fd f9ca 	bl	8000cc8 <__aeabi_uldivmod>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4613      	mov	r3, r2
 800393a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800393e:	e067      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003940:	4b75      	ldr	r3, [pc, #468]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	099b      	lsrs	r3, r3, #6
 8003946:	2200      	movs	r2, #0
 8003948:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800394c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003950:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003958:	67bb      	str	r3, [r7, #120]	@ 0x78
 800395a:	2300      	movs	r3, #0
 800395c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800395e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003962:	4622      	mov	r2, r4
 8003964:	462b      	mov	r3, r5
 8003966:	f04f 0000 	mov.w	r0, #0
 800396a:	f04f 0100 	mov.w	r1, #0
 800396e:	0159      	lsls	r1, r3, #5
 8003970:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003974:	0150      	lsls	r0, r2, #5
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4621      	mov	r1, r4
 800397c:	1a51      	subs	r1, r2, r1
 800397e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003980:	4629      	mov	r1, r5
 8003982:	eb63 0301 	sbc.w	r3, r3, r1
 8003986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003994:	4649      	mov	r1, r9
 8003996:	018b      	lsls	r3, r1, #6
 8003998:	4641      	mov	r1, r8
 800399a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800399e:	4641      	mov	r1, r8
 80039a0:	018a      	lsls	r2, r1, #6
 80039a2:	4641      	mov	r1, r8
 80039a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80039a8:	4649      	mov	r1, r9
 80039aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039c2:	4692      	mov	sl, r2
 80039c4:	469b      	mov	fp, r3
 80039c6:	4623      	mov	r3, r4
 80039c8:	eb1a 0303 	adds.w	r3, sl, r3
 80039cc:	623b      	str	r3, [r7, #32]
 80039ce:	462b      	mov	r3, r5
 80039d0:	eb4b 0303 	adc.w	r3, fp, r3
 80039d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80039e2:	4629      	mov	r1, r5
 80039e4:	028b      	lsls	r3, r1, #10
 80039e6:	4621      	mov	r1, r4
 80039e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039ec:	4621      	mov	r1, r4
 80039ee:	028a      	lsls	r2, r1, #10
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039f8:	2200      	movs	r2, #0
 80039fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80039fc:	677a      	str	r2, [r7, #116]	@ 0x74
 80039fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003a02:	f7fd f961 	bl	8000cc8 <__aeabi_uldivmod>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a10:	4b41      	ldr	r3, [pc, #260]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	0c1b      	lsrs	r3, r3, #16
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003a22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a32:	e0eb      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a34:	4b38      	ldr	r3, [pc, #224]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a40:	4b35      	ldr	r3, [pc, #212]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d06b      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a4c:	4b32      	ldr	r3, [pc, #200]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	099b      	lsrs	r3, r3, #6
 8003a52:	2200      	movs	r2, #0
 8003a54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a60:	2300      	movs	r3, #0
 8003a62:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003a68:	4622      	mov	r2, r4
 8003a6a:	462b      	mov	r3, r5
 8003a6c:	f04f 0000 	mov.w	r0, #0
 8003a70:	f04f 0100 	mov.w	r1, #0
 8003a74:	0159      	lsls	r1, r3, #5
 8003a76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a7a:	0150      	lsls	r0, r2, #5
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4621      	mov	r1, r4
 8003a82:	1a51      	subs	r1, r2, r1
 8003a84:	61b9      	str	r1, [r7, #24]
 8003a86:	4629      	mov	r1, r5
 8003a88:	eb63 0301 	sbc.w	r3, r3, r1
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003a9a:	4659      	mov	r1, fp
 8003a9c:	018b      	lsls	r3, r1, #6
 8003a9e:	4651      	mov	r1, sl
 8003aa0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aa4:	4651      	mov	r1, sl
 8003aa6:	018a      	lsls	r2, r1, #6
 8003aa8:	4651      	mov	r1, sl
 8003aaa:	ebb2 0801 	subs.w	r8, r2, r1
 8003aae:	4659      	mov	r1, fp
 8003ab0:	eb63 0901 	sbc.w	r9, r3, r1
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ac0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ac4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ac8:	4690      	mov	r8, r2
 8003aca:	4699      	mov	r9, r3
 8003acc:	4623      	mov	r3, r4
 8003ace:	eb18 0303 	adds.w	r3, r8, r3
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	462b      	mov	r3, r5
 8003ad6:	eb49 0303 	adc.w	r3, r9, r3
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ae8:	4629      	mov	r1, r5
 8003aea:	024b      	lsls	r3, r1, #9
 8003aec:	4621      	mov	r1, r4
 8003aee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003af2:	4621      	mov	r1, r4
 8003af4:	024a      	lsls	r2, r1, #9
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003afe:	2200      	movs	r2, #0
 8003b00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b02:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003b04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b08:	f7fd f8de 	bl	8000cc8 <__aeabi_uldivmod>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4613      	mov	r3, r2
 8003b12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b16:	e065      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x420>
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	00f42400 	.word	0x00f42400
 8003b20:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b24:	4b3d      	ldr	r3, [pc, #244]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x458>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	099b      	lsrs	r3, r3, #6
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	4611      	mov	r1, r2
 8003b30:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b34:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b36:	2300      	movs	r3, #0
 8003b38:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b3a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003b3e:	4642      	mov	r2, r8
 8003b40:	464b      	mov	r3, r9
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	0159      	lsls	r1, r3, #5
 8003b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b50:	0150      	lsls	r0, r2, #5
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4641      	mov	r1, r8
 8003b58:	1a51      	subs	r1, r2, r1
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	4649      	mov	r1, r9
 8003b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003b70:	4659      	mov	r1, fp
 8003b72:	018b      	lsls	r3, r1, #6
 8003b74:	4651      	mov	r1, sl
 8003b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b7a:	4651      	mov	r1, sl
 8003b7c:	018a      	lsls	r2, r1, #6
 8003b7e:	4651      	mov	r1, sl
 8003b80:	1a54      	subs	r4, r2, r1
 8003b82:	4659      	mov	r1, fp
 8003b84:	eb63 0501 	sbc.w	r5, r3, r1
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	00eb      	lsls	r3, r5, #3
 8003b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b96:	00e2      	lsls	r2, r4, #3
 8003b98:	4614      	mov	r4, r2
 8003b9a:	461d      	mov	r5, r3
 8003b9c:	4643      	mov	r3, r8
 8003b9e:	18e3      	adds	r3, r4, r3
 8003ba0:	603b      	str	r3, [r7, #0]
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	eb45 0303 	adc.w	r3, r5, r3
 8003ba8:	607b      	str	r3, [r7, #4]
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	028b      	lsls	r3, r1, #10
 8003bba:	4621      	mov	r1, r4
 8003bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	028a      	lsls	r2, r1, #10
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bcc:	2200      	movs	r2, #0
 8003bce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bd0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003bd2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003bd6:	f7fd f877 	bl	8000cc8 <__aeabi_uldivmod>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4613      	mov	r3, r2
 8003be0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003be4:	4b0d      	ldr	r3, [pc, #52]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x458>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	0f1b      	lsrs	r3, r3, #28
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003bf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003bf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c02:	e003      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c04:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003c06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	37b8      	adds	r7, #184	@ 0xb8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	00f42400 	.word	0x00f42400

08003c24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e28d      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 8083 	beq.w	8003d4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c44:	4b94      	ldr	r3, [pc, #592]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d019      	beq.n	8003c84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c50:	4b91      	ldr	r3, [pc, #580]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d106      	bne.n	8003c6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c5c:	4b8e      	ldr	r3, [pc, #568]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c68:	d00c      	beq.n	8003c84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6a:	4b8b      	ldr	r3, [pc, #556]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c72:	2b0c      	cmp	r3, #12
 8003c74:	d112      	bne.n	8003c9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c76:	4b88      	ldr	r3, [pc, #544]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c82:	d10b      	bne.n	8003c9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	4b84      	ldr	r3, [pc, #528]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d05b      	beq.n	8003d48 <HAL_RCC_OscConfig+0x124>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d157      	bne.n	8003d48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e25a      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca4:	d106      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x90>
 8003ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7b      	ldr	r2, [pc, #492]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e01d      	b.n	8003cf0 <HAL_RCC_OscConfig+0xcc>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0xb4>
 8003cbe:	4b76      	ldr	r3, [pc, #472]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a75      	ldr	r2, [pc, #468]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b73      	ldr	r3, [pc, #460]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a72      	ldr	r2, [pc, #456]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0xcc>
 8003cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a6e      	ldr	r2, [pc, #440]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b6c      	ldr	r3, [pc, #432]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a6b      	ldr	r2, [pc, #428]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d013      	beq.n	8003d20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fe fb5a 	bl	80023b0 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d00:	f7fe fb56 	bl	80023b0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	@ 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e21f      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	4b61      	ldr	r3, [pc, #388]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0xdc>
 8003d1e:	e014      	b.n	8003d4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fe fb46 	bl	80023b0 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fe fb42 	bl	80023b0 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	@ 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e20b      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	4b57      	ldr	r3, [pc, #348]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x104>
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d06f      	beq.n	8003e36 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d56:	4b50      	ldr	r3, [pc, #320]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d017      	beq.n	8003d92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d62:	4b4d      	ldr	r3, [pc, #308]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d105      	bne.n	8003d7a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d6e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d7a:	4b47      	ldr	r3, [pc, #284]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d82:	2b0c      	cmp	r3, #12
 8003d84:	d11c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d86:	4b44      	ldr	r3, [pc, #272]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d116      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d92:	4b41      	ldr	r3, [pc, #260]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <HAL_RCC_OscConfig+0x186>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d001      	beq.n	8003daa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e1d3      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003daa:	4b3b      	ldr	r3, [pc, #236]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4937      	ldr	r1, [pc, #220]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dbe:	e03a      	b.n	8003e36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d020      	beq.n	8003e0a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc8:	4b34      	ldr	r3, [pc, #208]	@ (8003e9c <HAL_RCC_OscConfig+0x278>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dce:	f7fe faef 	bl	80023b0 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd6:	f7fe faeb 	bl	80023b0 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e1b4      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de8:	4b2b      	ldr	r3, [pc, #172]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df4:	4b28      	ldr	r3, [pc, #160]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4925      	ldr	r1, [pc, #148]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	600b      	str	r3, [r1, #0]
 8003e08:	e015      	b.n	8003e36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e0a:	4b24      	ldr	r3, [pc, #144]	@ (8003e9c <HAL_RCC_OscConfig+0x278>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e10:	f7fe face 	bl	80023b0 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e18:	f7fe faca 	bl	80023b0 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e193      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d036      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d016      	beq.n	8003e78 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fe faae 	bl	80023b0 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e58:	f7fe faaa 	bl	80023b0 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e173      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0x234>
 8003e76:	e01b      	b.n	8003eb0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e78:	4b09      	ldr	r3, [pc, #36]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7e:	f7fe fa97 	bl	80023b0 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e84:	e00e      	b.n	8003ea4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e86:	f7fe fa93 	bl	80023b0 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d907      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e15c      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	42470000 	.word	0x42470000
 8003ea0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea4:	4b8a      	ldr	r3, [pc, #552]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003ea6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1ea      	bne.n	8003e86 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8097 	beq.w	8003fec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec2:	4b83      	ldr	r3, [pc, #524]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10f      	bne.n	8003eee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	4a7e      	ldr	r2, [pc, #504]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ede:	4b7c      	ldr	r3, [pc, #496]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eee:	4b79      	ldr	r3, [pc, #484]	@ (80040d4 <HAL_RCC_OscConfig+0x4b0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d118      	bne.n	8003f2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003efa:	4b76      	ldr	r3, [pc, #472]	@ (80040d4 <HAL_RCC_OscConfig+0x4b0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a75      	ldr	r2, [pc, #468]	@ (80040d4 <HAL_RCC_OscConfig+0x4b0>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f06:	f7fe fa53 	bl	80023b0 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0e:	f7fe fa4f 	bl	80023b0 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e118      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f20:	4b6c      	ldr	r3, [pc, #432]	@ (80040d4 <HAL_RCC_OscConfig+0x4b0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d106      	bne.n	8003f42 <HAL_RCC_OscConfig+0x31e>
 8003f34:	4b66      	ldr	r3, [pc, #408]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f38:	4a65      	ldr	r2, [pc, #404]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f40:	e01c      	b.n	8003f7c <HAL_RCC_OscConfig+0x358>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x340>
 8003f4a:	4b61      	ldr	r3, [pc, #388]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4e:	4a60      	ldr	r2, [pc, #384]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f50:	f043 0304 	orr.w	r3, r3, #4
 8003f54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f56:	4b5e      	ldr	r3, [pc, #376]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5a:	4a5d      	ldr	r2, [pc, #372]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f62:	e00b      	b.n	8003f7c <HAL_RCC_OscConfig+0x358>
 8003f64:	4b5a      	ldr	r3, [pc, #360]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f68:	4a59      	ldr	r2, [pc, #356]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f70:	4b57      	ldr	r3, [pc, #348]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f74:	4a56      	ldr	r2, [pc, #344]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003f76:	f023 0304 	bic.w	r3, r3, #4
 8003f7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d015      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f84:	f7fe fa14 	bl	80023b0 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f8c:	f7fe fa10 	bl	80023b0 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e0d7      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0ee      	beq.n	8003f8c <HAL_RCC_OscConfig+0x368>
 8003fae:	e014      	b.n	8003fda <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fe f9fe 	bl	80023b0 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f7fe f9fa 	bl	80023b0 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e0c1      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fce:	4b40      	ldr	r3, [pc, #256]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1ee      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d105      	bne.n	8003fec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe4:	4a3a      	ldr	r2, [pc, #232]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80ad 	beq.w	8004150 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ff6:	4b36      	ldr	r3, [pc, #216]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d060      	beq.n	80040c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d145      	bne.n	8004096 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400a:	4b33      	ldr	r3, [pc, #204]	@ (80040d8 <HAL_RCC_OscConfig+0x4b4>)
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fe f9ce 	bl	80023b0 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004018:	f7fe f9ca 	bl	80023b0 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e093      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402a:	4b29      	ldr	r3, [pc, #164]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69da      	ldr	r2, [r3, #28]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	019b      	lsls	r3, r3, #6
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404c:	085b      	lsrs	r3, r3, #1
 800404e:	3b01      	subs	r3, #1
 8004050:	041b      	lsls	r3, r3, #16
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004058:	061b      	lsls	r3, r3, #24
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004060:	071b      	lsls	r3, r3, #28
 8004062:	491b      	ldr	r1, [pc, #108]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 8004064:	4313      	orrs	r3, r2
 8004066:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004068:	4b1b      	ldr	r3, [pc, #108]	@ (80040d8 <HAL_RCC_OscConfig+0x4b4>)
 800406a:	2201      	movs	r2, #1
 800406c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406e:	f7fe f99f 	bl	80023b0 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004076:	f7fe f99b 	bl	80023b0 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e064      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004088:	4b11      	ldr	r3, [pc, #68]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCC_OscConfig+0x452>
 8004094:	e05c      	b.n	8004150 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004096:	4b10      	ldr	r3, [pc, #64]	@ (80040d8 <HAL_RCC_OscConfig+0x4b4>)
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fe f988 	bl	80023b0 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a4:	f7fe f984 	bl	80023b0 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e04d      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b6:	4b06      	ldr	r3, [pc, #24]	@ (80040d0 <HAL_RCC_OscConfig+0x4ac>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0x480>
 80040c2:	e045      	b.n	8004150 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d107      	bne.n	80040dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e040      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
 80040d0:	40023800 	.word	0x40023800
 80040d4:	40007000 	.word	0x40007000
 80040d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040dc:	4b1f      	ldr	r3, [pc, #124]	@ (800415c <HAL_RCC_OscConfig+0x538>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d030      	beq.n	800414c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d129      	bne.n	800414c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004102:	429a      	cmp	r2, r3
 8004104:	d122      	bne.n	800414c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800410c:	4013      	ands	r3, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004112:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004114:	4293      	cmp	r3, r2
 8004116:	d119      	bne.n	800414c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004122:	085b      	lsrs	r3, r3, #1
 8004124:	3b01      	subs	r3, #1
 8004126:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004128:	429a      	cmp	r2, r3
 800412a:	d10f      	bne.n	800414c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004136:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004138:	429a      	cmp	r2, r3
 800413a:	d107      	bne.n	800414c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d001      	beq.n	8004150 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e000      	b.n	8004152 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800

08004160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e041      	b.n	80041f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f839 	bl	80041fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f000 f9c0 	bl	8004524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	d001      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e04e      	b.n	80042ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a23      	ldr	r2, [pc, #140]	@ (80042d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d022      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004256:	d01d      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1f      	ldr	r2, [pc, #124]	@ (80042dc <HAL_TIM_Base_Start_IT+0xc8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d018      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a1e      	ldr	r2, [pc, #120]	@ (80042e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d013      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1c      	ldr	r2, [pc, #112]	@ (80042e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00e      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1b      	ldr	r2, [pc, #108]	@ (80042e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d009      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a19      	ldr	r2, [pc, #100]	@ (80042ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x80>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a18      	ldr	r2, [pc, #96]	@ (80042f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d111      	bne.n	80042b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d010      	beq.n	80042c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	e007      	b.n	80042c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40010000 	.word	0x40010000
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40000c00 	.word	0x40000c00
 80042e8:	40010400 	.word	0x40010400
 80042ec:	40014000 	.word	0x40014000
 80042f0:	40001800 	.word	0x40001800

080042f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d020      	beq.n	8004358 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01b      	beq.n	8004358 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0202 	mvn.w	r2, #2
 8004328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f8d2 	bl	80044e8 <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f8c4 	bl	80044d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f8d5 	bl	80044fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b00      	cmp	r3, #0
 8004360:	d020      	beq.n	80043a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01b      	beq.n	80043a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0204 	mvn.w	r2, #4
 8004374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2202      	movs	r2, #2
 800437a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f8ac 	bl	80044e8 <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f89e 	bl	80044d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f8af 	bl	80044fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d020      	beq.n	80043f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01b      	beq.n	80043f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0208 	mvn.w	r2, #8
 80043c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2204      	movs	r2, #4
 80043c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f886 	bl	80044e8 <HAL_TIM_IC_CaptureCallback>
 80043dc:	e005      	b.n	80043ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f878 	bl	80044d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f889 	bl	80044fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d020      	beq.n	800443c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01b      	beq.n	800443c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0210 	mvn.w	r2, #16
 800440c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2208      	movs	r2, #8
 8004412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f860 	bl	80044e8 <HAL_TIM_IC_CaptureCallback>
 8004428:	e005      	b.n	8004436 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f852 	bl	80044d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f863 	bl	80044fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00c      	beq.n	8004460 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0201 	mvn.w	r2, #1
 8004458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fd fa3c 	bl	80018d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800447c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f906 	bl	8004690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f834 	bl	8004510 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00c      	beq.n	80044cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0220 	mvn.w	r2, #32
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f8d8 	bl	800467c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a46      	ldr	r2, [pc, #280]	@ (8004650 <TIM_Base_SetConfig+0x12c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d013      	beq.n	8004564 <TIM_Base_SetConfig+0x40>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004542:	d00f      	beq.n	8004564 <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a43      	ldr	r2, [pc, #268]	@ (8004654 <TIM_Base_SetConfig+0x130>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00b      	beq.n	8004564 <TIM_Base_SetConfig+0x40>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a42      	ldr	r2, [pc, #264]	@ (8004658 <TIM_Base_SetConfig+0x134>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d007      	beq.n	8004564 <TIM_Base_SetConfig+0x40>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a41      	ldr	r2, [pc, #260]	@ (800465c <TIM_Base_SetConfig+0x138>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d003      	beq.n	8004564 <TIM_Base_SetConfig+0x40>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a40      	ldr	r2, [pc, #256]	@ (8004660 <TIM_Base_SetConfig+0x13c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d108      	bne.n	8004576 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800456a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a35      	ldr	r2, [pc, #212]	@ (8004650 <TIM_Base_SetConfig+0x12c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d02b      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004584:	d027      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a32      	ldr	r2, [pc, #200]	@ (8004654 <TIM_Base_SetConfig+0x130>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d023      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a31      	ldr	r2, [pc, #196]	@ (8004658 <TIM_Base_SetConfig+0x134>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01f      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a30      	ldr	r2, [pc, #192]	@ (800465c <TIM_Base_SetConfig+0x138>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d01b      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a2f      	ldr	r2, [pc, #188]	@ (8004660 <TIM_Base_SetConfig+0x13c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d017      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004664 <TIM_Base_SetConfig+0x140>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004668 <TIM_Base_SetConfig+0x144>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00f      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a2c      	ldr	r2, [pc, #176]	@ (800466c <TIM_Base_SetConfig+0x148>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00b      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004670 <TIM_Base_SetConfig+0x14c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004674 <TIM_Base_SetConfig+0x150>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a29      	ldr	r2, [pc, #164]	@ (8004678 <TIM_Base_SetConfig+0x154>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d108      	bne.n	80045e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a10      	ldr	r2, [pc, #64]	@ (8004650 <TIM_Base_SetConfig+0x12c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d003      	beq.n	800461c <TIM_Base_SetConfig+0xf8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a12      	ldr	r2, [pc, #72]	@ (8004660 <TIM_Base_SetConfig+0x13c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d103      	bne.n	8004624 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b01      	cmp	r3, #1
 8004634:	d105      	bne.n	8004642 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f023 0201 	bic.w	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	611a      	str	r2, [r3, #16]
  }
}
 8004642:	bf00      	nop
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40010000 	.word	0x40010000
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800
 800465c:	40000c00 	.word	0x40000c00
 8004660:	40010400 	.word	0x40010400
 8004664:	40014000 	.word	0x40014000
 8004668:	40014400 	.word	0x40014400
 800466c:	40014800 	.word	0x40014800
 8004670:	40001800 	.word	0x40001800
 8004674:	40001c00 	.word	0x40001c00
 8004678:	40002000 	.word	0x40002000

0800467c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e042      	b.n	800473c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fd fc4e 	bl	8001f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2224      	movs	r2, #36	@ 0x24
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f82b 	bl	8004744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695a      	ldr	r2, [r3, #20]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800470c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800471c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004748:	b0c0      	sub	sp, #256	@ 0x100
 800474a:	af00      	add	r7, sp, #0
 800474c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004760:	68d9      	ldr	r1, [r3, #12]
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	ea40 0301 	orr.w	r3, r0, r1
 800476c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	431a      	orrs	r2, r3
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	431a      	orrs	r2, r3
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800479c:	f021 010c 	bic.w	r1, r1, #12
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047aa:	430b      	orrs	r3, r1
 80047ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047be:	6999      	ldr	r1, [r3, #24]
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	ea40 0301 	orr.w	r3, r0, r1
 80047ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	4b8f      	ldr	r3, [pc, #572]	@ (8004a10 <UART_SetConfig+0x2cc>)
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d005      	beq.n	80047e4 <UART_SetConfig+0xa0>
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b8d      	ldr	r3, [pc, #564]	@ (8004a14 <UART_SetConfig+0x2d0>)
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d104      	bne.n	80047ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047e4:	f7fe ffa8 	bl	8003738 <HAL_RCC_GetPCLK2Freq>
 80047e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80047ec:	e003      	b.n	80047f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047ee:	f7fe ff8f 	bl	8003710 <HAL_RCC_GetPCLK1Freq>
 80047f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004800:	f040 810c 	bne.w	8004a1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004808:	2200      	movs	r2, #0
 800480a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800480e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004812:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004816:	4622      	mov	r2, r4
 8004818:	462b      	mov	r3, r5
 800481a:	1891      	adds	r1, r2, r2
 800481c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800481e:	415b      	adcs	r3, r3
 8004820:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004822:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004826:	4621      	mov	r1, r4
 8004828:	eb12 0801 	adds.w	r8, r2, r1
 800482c:	4629      	mov	r1, r5
 800482e:	eb43 0901 	adc.w	r9, r3, r1
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800483e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004846:	4690      	mov	r8, r2
 8004848:	4699      	mov	r9, r3
 800484a:	4623      	mov	r3, r4
 800484c:	eb18 0303 	adds.w	r3, r8, r3
 8004850:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004854:	462b      	mov	r3, r5
 8004856:	eb49 0303 	adc.w	r3, r9, r3
 800485a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800486a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800486e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004872:	460b      	mov	r3, r1
 8004874:	18db      	adds	r3, r3, r3
 8004876:	653b      	str	r3, [r7, #80]	@ 0x50
 8004878:	4613      	mov	r3, r2
 800487a:	eb42 0303 	adc.w	r3, r2, r3
 800487e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004880:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004884:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004888:	f7fc fa1e 	bl	8000cc8 <__aeabi_uldivmod>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4b61      	ldr	r3, [pc, #388]	@ (8004a18 <UART_SetConfig+0x2d4>)
 8004892:	fba3 2302 	umull	r2, r3, r3, r2
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	011c      	lsls	r4, r3, #4
 800489a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800489e:	2200      	movs	r2, #0
 80048a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048ac:	4642      	mov	r2, r8
 80048ae:	464b      	mov	r3, r9
 80048b0:	1891      	adds	r1, r2, r2
 80048b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048b4:	415b      	adcs	r3, r3
 80048b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048bc:	4641      	mov	r1, r8
 80048be:	eb12 0a01 	adds.w	sl, r2, r1
 80048c2:	4649      	mov	r1, r9
 80048c4:	eb43 0b01 	adc.w	fp, r3, r1
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048dc:	4692      	mov	sl, r2
 80048de:	469b      	mov	fp, r3
 80048e0:	4643      	mov	r3, r8
 80048e2:	eb1a 0303 	adds.w	r3, sl, r3
 80048e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048ea:	464b      	mov	r3, r9
 80048ec:	eb4b 0303 	adc.w	r3, fp, r3
 80048f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004900:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004904:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004908:	460b      	mov	r3, r1
 800490a:	18db      	adds	r3, r3, r3
 800490c:	643b      	str	r3, [r7, #64]	@ 0x40
 800490e:	4613      	mov	r3, r2
 8004910:	eb42 0303 	adc.w	r3, r2, r3
 8004914:	647b      	str	r3, [r7, #68]	@ 0x44
 8004916:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800491a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800491e:	f7fc f9d3 	bl	8000cc8 <__aeabi_uldivmod>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4611      	mov	r1, r2
 8004928:	4b3b      	ldr	r3, [pc, #236]	@ (8004a18 <UART_SetConfig+0x2d4>)
 800492a:	fba3 2301 	umull	r2, r3, r3, r1
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2264      	movs	r2, #100	@ 0x64
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	1acb      	subs	r3, r1, r3
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800493e:	4b36      	ldr	r3, [pc, #216]	@ (8004a18 <UART_SetConfig+0x2d4>)
 8004940:	fba3 2302 	umull	r2, r3, r3, r2
 8004944:	095b      	lsrs	r3, r3, #5
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800494c:	441c      	add	r4, r3
 800494e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004952:	2200      	movs	r2, #0
 8004954:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004958:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800495c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004960:	4642      	mov	r2, r8
 8004962:	464b      	mov	r3, r9
 8004964:	1891      	adds	r1, r2, r2
 8004966:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004968:	415b      	adcs	r3, r3
 800496a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800496c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004970:	4641      	mov	r1, r8
 8004972:	1851      	adds	r1, r2, r1
 8004974:	6339      	str	r1, [r7, #48]	@ 0x30
 8004976:	4649      	mov	r1, r9
 8004978:	414b      	adcs	r3, r1
 800497a:	637b      	str	r3, [r7, #52]	@ 0x34
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004988:	4659      	mov	r1, fp
 800498a:	00cb      	lsls	r3, r1, #3
 800498c:	4651      	mov	r1, sl
 800498e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004992:	4651      	mov	r1, sl
 8004994:	00ca      	lsls	r2, r1, #3
 8004996:	4610      	mov	r0, r2
 8004998:	4619      	mov	r1, r3
 800499a:	4603      	mov	r3, r0
 800499c:	4642      	mov	r2, r8
 800499e:	189b      	adds	r3, r3, r2
 80049a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049a4:	464b      	mov	r3, r9
 80049a6:	460a      	mov	r2, r1
 80049a8:	eb42 0303 	adc.w	r3, r2, r3
 80049ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80049c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049c4:	460b      	mov	r3, r1
 80049c6:	18db      	adds	r3, r3, r3
 80049c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ca:	4613      	mov	r3, r2
 80049cc:	eb42 0303 	adc.w	r3, r2, r3
 80049d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80049da:	f7fc f975 	bl	8000cc8 <__aeabi_uldivmod>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a18 <UART_SetConfig+0x2d4>)
 80049e4:	fba3 1302 	umull	r1, r3, r3, r2
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	2164      	movs	r1, #100	@ 0x64
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	3332      	adds	r3, #50	@ 0x32
 80049f6:	4a08      	ldr	r2, [pc, #32]	@ (8004a18 <UART_SetConfig+0x2d4>)
 80049f8:	fba2 2303 	umull	r2, r3, r2, r3
 80049fc:	095b      	lsrs	r3, r3, #5
 80049fe:	f003 0207 	and.w	r2, r3, #7
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4422      	add	r2, r4
 8004a0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a0c:	e106      	b.n	8004c1c <UART_SetConfig+0x4d8>
 8004a0e:	bf00      	nop
 8004a10:	40011000 	.word	0x40011000
 8004a14:	40011400 	.word	0x40011400
 8004a18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a20:	2200      	movs	r2, #0
 8004a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a2e:	4642      	mov	r2, r8
 8004a30:	464b      	mov	r3, r9
 8004a32:	1891      	adds	r1, r2, r2
 8004a34:	6239      	str	r1, [r7, #32]
 8004a36:	415b      	adcs	r3, r3
 8004a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a3e:	4641      	mov	r1, r8
 8004a40:	1854      	adds	r4, r2, r1
 8004a42:	4649      	mov	r1, r9
 8004a44:	eb43 0501 	adc.w	r5, r3, r1
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	00eb      	lsls	r3, r5, #3
 8004a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a56:	00e2      	lsls	r2, r4, #3
 8004a58:	4614      	mov	r4, r2
 8004a5a:	461d      	mov	r5, r3
 8004a5c:	4643      	mov	r3, r8
 8004a5e:	18e3      	adds	r3, r4, r3
 8004a60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a64:	464b      	mov	r3, r9
 8004a66:	eb45 0303 	adc.w	r3, r5, r3
 8004a6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	008b      	lsls	r3, r1, #2
 8004a8e:	4621      	mov	r1, r4
 8004a90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a94:	4621      	mov	r1, r4
 8004a96:	008a      	lsls	r2, r1, #2
 8004a98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004a9c:	f7fc f914 	bl	8000cc8 <__aeabi_uldivmod>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4b60      	ldr	r3, [pc, #384]	@ (8004c28 <UART_SetConfig+0x4e4>)
 8004aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	011c      	lsls	r4, r3, #4
 8004aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ab8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004abc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ac0:	4642      	mov	r2, r8
 8004ac2:	464b      	mov	r3, r9
 8004ac4:	1891      	adds	r1, r2, r2
 8004ac6:	61b9      	str	r1, [r7, #24]
 8004ac8:	415b      	adcs	r3, r3
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad0:	4641      	mov	r1, r8
 8004ad2:	1851      	adds	r1, r2, r1
 8004ad4:	6139      	str	r1, [r7, #16]
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	414b      	adcs	r3, r1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ae8:	4659      	mov	r1, fp
 8004aea:	00cb      	lsls	r3, r1, #3
 8004aec:	4651      	mov	r1, sl
 8004aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004af2:	4651      	mov	r1, sl
 8004af4:	00ca      	lsls	r2, r1, #3
 8004af6:	4610      	mov	r0, r2
 8004af8:	4619      	mov	r1, r3
 8004afa:	4603      	mov	r3, r0
 8004afc:	4642      	mov	r2, r8
 8004afe:	189b      	adds	r3, r3, r2
 8004b00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b04:	464b      	mov	r3, r9
 8004b06:	460a      	mov	r2, r1
 8004b08:	eb42 0303 	adc.w	r3, r2, r3
 8004b0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b28:	4649      	mov	r1, r9
 8004b2a:	008b      	lsls	r3, r1, #2
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b32:	4641      	mov	r1, r8
 8004b34:	008a      	lsls	r2, r1, #2
 8004b36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b3a:	f7fc f8c5 	bl	8000cc8 <__aeabi_uldivmod>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4611      	mov	r1, r2
 8004b44:	4b38      	ldr	r3, [pc, #224]	@ (8004c28 <UART_SetConfig+0x4e4>)
 8004b46:	fba3 2301 	umull	r2, r3, r3, r1
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	2264      	movs	r2, #100	@ 0x64
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	1acb      	subs	r3, r1, r3
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	3332      	adds	r3, #50	@ 0x32
 8004b58:	4a33      	ldr	r2, [pc, #204]	@ (8004c28 <UART_SetConfig+0x4e4>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b64:	441c      	add	r4, r3
 8004b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b74:	4642      	mov	r2, r8
 8004b76:	464b      	mov	r3, r9
 8004b78:	1891      	adds	r1, r2, r2
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	415b      	adcs	r3, r3
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b84:	4641      	mov	r1, r8
 8004b86:	1851      	adds	r1, r2, r1
 8004b88:	6039      	str	r1, [r7, #0]
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	414b      	adcs	r3, r1
 8004b8e:	607b      	str	r3, [r7, #4]
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b9c:	4659      	mov	r1, fp
 8004b9e:	00cb      	lsls	r3, r1, #3
 8004ba0:	4651      	mov	r1, sl
 8004ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ba6:	4651      	mov	r1, sl
 8004ba8:	00ca      	lsls	r2, r1, #3
 8004baa:	4610      	mov	r0, r2
 8004bac:	4619      	mov	r1, r3
 8004bae:	4603      	mov	r3, r0
 8004bb0:	4642      	mov	r2, r8
 8004bb2:	189b      	adds	r3, r3, r2
 8004bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	460a      	mov	r2, r1
 8004bba:	eb42 0303 	adc.w	r3, r2, r3
 8004bbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bca:	667a      	str	r2, [r7, #100]	@ 0x64
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004bd8:	4649      	mov	r1, r9
 8004bda:	008b      	lsls	r3, r1, #2
 8004bdc:	4641      	mov	r1, r8
 8004bde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004be2:	4641      	mov	r1, r8
 8004be4:	008a      	lsls	r2, r1, #2
 8004be6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004bea:	f7fc f86d 	bl	8000cc8 <__aeabi_uldivmod>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8004c28 <UART_SetConfig+0x4e4>)
 8004bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	2164      	movs	r1, #100	@ 0x64
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	3332      	adds	r3, #50	@ 0x32
 8004c06:	4a08      	ldr	r2, [pc, #32]	@ (8004c28 <UART_SetConfig+0x4e4>)
 8004c08:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0c:	095b      	lsrs	r3, r3, #5
 8004c0e:	f003 020f 	and.w	r2, r3, #15
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4422      	add	r2, r4
 8004c1a:	609a      	str	r2, [r3, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c22:	46bd      	mov	sp, r7
 8004c24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c28:	51eb851f 	.word	0x51eb851f

08004c2c <__NVIC_SetPriority>:
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	6039      	str	r1, [r7, #0]
 8004c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	db0a      	blt.n	8004c56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	490c      	ldr	r1, [pc, #48]	@ (8004c78 <__NVIC_SetPriority+0x4c>)
 8004c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4a:	0112      	lsls	r2, r2, #4
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	440b      	add	r3, r1
 8004c50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004c54:	e00a      	b.n	8004c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	4908      	ldr	r1, [pc, #32]	@ (8004c7c <__NVIC_SetPriority+0x50>)
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	3b04      	subs	r3, #4
 8004c64:	0112      	lsls	r2, r2, #4
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	440b      	add	r3, r1
 8004c6a:	761a      	strb	r2, [r3, #24]
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	e000e100 	.word	0xe000e100
 8004c7c:	e000ed00 	.word	0xe000ed00

08004c80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c84:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <SysTick_Handler+0x1c>)
 8004c86:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c88:	f001 fcc6 	bl	8006618 <xTaskGetSchedulerState>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d001      	beq.n	8004c96 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c92:	f002 fac1 	bl	8007218 <xPortSysTickHandler>
  }
}
 8004c96:	bf00      	nop
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	e000e010 	.word	0xe000e010

08004ca0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	f06f 0004 	mvn.w	r0, #4
 8004caa:	f7ff ffbf 	bl	8004c2c <__NVIC_SetPriority>
#endif
}
 8004cae:	bf00      	nop
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cba:	f3ef 8305 	mrs	r3, IPSR
 8004cbe:	603b      	str	r3, [r7, #0]
  return(result);
 8004cc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004cc6:	f06f 0305 	mvn.w	r3, #5
 8004cca:	607b      	str	r3, [r7, #4]
 8004ccc:	e00c      	b.n	8004ce8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cce:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf8 <osKernelInitialize+0x44>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d105      	bne.n	8004ce2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004cd6:	4b08      	ldr	r3, [pc, #32]	@ (8004cf8 <osKernelInitialize+0x44>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	607b      	str	r3, [r7, #4]
 8004ce0:	e002      	b.n	8004ce8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ce8:	687b      	ldr	r3, [r7, #4]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20000718 	.word	0x20000718

08004cfc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d02:	f3ef 8305 	mrs	r3, IPSR
 8004d06:	603b      	str	r3, [r7, #0]
  return(result);
 8004d08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d0e:	f06f 0305 	mvn.w	r3, #5
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	e010      	b.n	8004d38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d16:	4b0b      	ldr	r3, [pc, #44]	@ (8004d44 <osKernelStart+0x48>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d109      	bne.n	8004d32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d1e:	f7ff ffbf 	bl	8004ca0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d22:	4b08      	ldr	r3, [pc, #32]	@ (8004d44 <osKernelStart+0x48>)
 8004d24:	2202      	movs	r2, #2
 8004d26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d28:	f001 f828 	bl	8005d7c <vTaskStartScheduler>
      stat = osOK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	607b      	str	r3, [r7, #4]
 8004d30:	e002      	b.n	8004d38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d32:	f04f 33ff 	mov.w	r3, #4294967295
 8004d36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d38:	687b      	ldr	r3, [r7, #4]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000718 	.word	0x20000718

08004d48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08e      	sub	sp, #56	@ 0x38
 8004d4c:	af04      	add	r7, sp, #16
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d58:	f3ef 8305 	mrs	r3, IPSR
 8004d5c:	617b      	str	r3, [r7, #20]
  return(result);
 8004d5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d17e      	bne.n	8004e62 <osThreadNew+0x11a>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d07b      	beq.n	8004e62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d6a:	2380      	movs	r3, #128	@ 0x80
 8004d6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d6e:	2318      	movs	r3, #24
 8004d70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004d76:	f04f 33ff 	mov.w	r3, #4294967295
 8004d7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d045      	beq.n	8004e0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <osThreadNew+0x48>
        name = attr->name;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <osThreadNew+0x6e>
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b38      	cmp	r3, #56	@ 0x38
 8004da8:	d805      	bhi.n	8004db6 <osThreadNew+0x6e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <osThreadNew+0x72>
        return (NULL);
 8004db6:	2300      	movs	r3, #0
 8004db8:	e054      	b.n	8004e64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	089b      	lsrs	r3, r3, #2
 8004dc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00e      	beq.n	8004df0 <osThreadNew+0xa8>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b5b      	cmp	r3, #91	@ 0x5b
 8004dd8:	d90a      	bls.n	8004df0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d006      	beq.n	8004df0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <osThreadNew+0xa8>
        mem = 1;
 8004dea:	2301      	movs	r3, #1
 8004dec:	61bb      	str	r3, [r7, #24]
 8004dee:	e010      	b.n	8004e12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10c      	bne.n	8004e12 <osThreadNew+0xca>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d108      	bne.n	8004e12 <osThreadNew+0xca>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <osThreadNew+0xca>
          mem = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	e001      	b.n	8004e12 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d110      	bne.n	8004e3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e20:	9202      	str	r2, [sp, #8]
 8004e22:	9301      	str	r3, [sp, #4]
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	6a3a      	ldr	r2, [r7, #32]
 8004e2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 fdfe 	bl	8005a30 <xTaskCreateStatic>
 8004e34:	4603      	mov	r3, r0
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	e013      	b.n	8004e62 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d110      	bne.n	8004e62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	f107 0310 	add.w	r3, r7, #16
 8004e48:	9301      	str	r3, [sp, #4]
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 fe4c 	bl	8005af0 <xTaskCreate>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d001      	beq.n	8004e62 <osThreadNew+0x11a>
            hTask = NULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e62:	693b      	ldr	r3, [r7, #16]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3728      	adds	r7, #40	@ 0x28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4a07      	ldr	r2, [pc, #28]	@ (8004e98 <vApplicationGetIdleTaskMemory+0x2c>)
 8004e7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4a06      	ldr	r2, [pc, #24]	@ (8004e9c <vApplicationGetIdleTaskMemory+0x30>)
 8004e82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2280      	movs	r2, #128	@ 0x80
 8004e88:	601a      	str	r2, [r3, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	2000071c 	.word	0x2000071c
 8004e9c:	20000778 	.word	0x20000778

08004ea0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4a07      	ldr	r2, [pc, #28]	@ (8004ecc <vApplicationGetTimerTaskMemory+0x2c>)
 8004eb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4a06      	ldr	r2, [pc, #24]	@ (8004ed0 <vApplicationGetTimerTaskMemory+0x30>)
 8004eb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ebe:	601a      	str	r2, [r3, #0]
}
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	20000978 	.word	0x20000978
 8004ed0:	200009d4 	.word	0x200009d4

08004ed4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f103 0208 	add.w	r2, r3, #8
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f103 0208 	add.w	r2, r3, #8
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f103 0208 	add.w	r2, r3, #8
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b085      	sub	sp, #20
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	601a      	str	r2, [r3, #0]
}
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f76:	b480      	push	{r7}
 8004f78:	b085      	sub	sp, #20
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8c:	d103      	bne.n	8004f96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	e00c      	b.n	8004fb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3308      	adds	r3, #8
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e002      	b.n	8004fa4 <vListInsert+0x2e>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d2f6      	bcs.n	8004f9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	601a      	str	r2, [r3, #0]
}
 8004fdc:	bf00      	nop
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6892      	ldr	r2, [r2, #8]
 8004ffe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6852      	ldr	r2, [r2, #4]
 8005008:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d103      	bne.n	800501c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	1e5a      	subs	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005068:	f002 f846 	bl	80070f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005074:	68f9      	ldr	r1, [r7, #12]
 8005076:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	441a      	add	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005098:	3b01      	subs	r3, #1
 800509a:	68f9      	ldr	r1, [r7, #12]
 800509c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800509e:	fb01 f303 	mul.w	r3, r1, r3
 80050a2:	441a      	add	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	22ff      	movs	r2, #255	@ 0xff
 80050ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	22ff      	movs	r2, #255	@ 0xff
 80050b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d114      	bne.n	80050e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d01a      	beq.n	80050fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3310      	adds	r3, #16
 80050ca:	4618      	mov	r0, r3
 80050cc:	f001 f8e4 	bl	8006298 <xTaskRemoveFromEventList>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d012      	beq.n	80050fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050d6:	4b0d      	ldr	r3, [pc, #52]	@ (800510c <xQueueGenericReset+0xd0>)
 80050d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	e009      	b.n	80050fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3310      	adds	r3, #16
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff fef1 	bl	8004ed4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3324      	adds	r3, #36	@ 0x24
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7ff feec 	bl	8004ed4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050fc:	f002 f82e 	bl	800715c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005100:	2301      	movs	r3, #1
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	e000ed04 	.word	0xe000ed04

08005110 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08e      	sub	sp, #56	@ 0x38
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10b      	bne.n	800513c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005136:	bf00      	nop
 8005138:	bf00      	nop
 800513a:	e7fd      	b.n	8005138 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10b      	bne.n	800515a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop
 8005158:	e7fd      	b.n	8005156 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <xQueueGenericCreateStatic+0x56>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <xQueueGenericCreateStatic+0x5a>
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <xQueueGenericCreateStatic+0x5c>
 800516a:	2300      	movs	r3, #0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10b      	bne.n	8005188 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	623b      	str	r3, [r7, #32]
}
 8005182:	bf00      	nop
 8005184:	bf00      	nop
 8005186:	e7fd      	b.n	8005184 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d102      	bne.n	8005194 <xQueueGenericCreateStatic+0x84>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <xQueueGenericCreateStatic+0x88>
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <xQueueGenericCreateStatic+0x8a>
 8005198:	2300      	movs	r3, #0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10b      	bne.n	80051b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	61fb      	str	r3, [r7, #28]
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop
 80051b4:	e7fd      	b.n	80051b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051b6:	2350      	movs	r3, #80	@ 0x50
 80051b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b50      	cmp	r3, #80	@ 0x50
 80051be:	d00b      	beq.n	80051d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	61bb      	str	r3, [r7, #24]
}
 80051d2:	bf00      	nop
 80051d4:	bf00      	nop
 80051d6:	e7fd      	b.n	80051d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80051de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00d      	beq.n	8005200 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80051f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	4613      	mov	r3, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	68b9      	ldr	r1, [r7, #8]
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 f805 	bl	800520a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005202:	4618      	mov	r0, r3
 8005204:	3730      	adds	r7, #48	@ 0x30
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b084      	sub	sp, #16
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
 8005216:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d103      	bne.n	8005226 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e002      	b.n	800522c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005238:	2101      	movs	r1, #1
 800523a:	69b8      	ldr	r0, [r7, #24]
 800523c:	f7ff fefe 	bl	800503c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	78fa      	ldrb	r2, [r7, #3]
 8005244:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005248:	bf00      	nop
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08e      	sub	sp, #56	@ 0x38
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800525e:	2300      	movs	r3, #0
 8005260:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10b      	bne.n	8005284 <xQueueGenericSend+0x34>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800527e:	bf00      	nop
 8005280:	bf00      	nop
 8005282:	e7fd      	b.n	8005280 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d103      	bne.n	8005292 <xQueueGenericSend+0x42>
 800528a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <xQueueGenericSend+0x46>
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <xQueueGenericSend+0x48>
 8005296:	2300      	movs	r3, #0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10b      	bne.n	80052b4 <xQueueGenericSend+0x64>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052ae:	bf00      	nop
 80052b0:	bf00      	nop
 80052b2:	e7fd      	b.n	80052b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d103      	bne.n	80052c2 <xQueueGenericSend+0x72>
 80052ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <xQueueGenericSend+0x76>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <xQueueGenericSend+0x78>
 80052c6:	2300      	movs	r3, #0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10b      	bne.n	80052e4 <xQueueGenericSend+0x94>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	623b      	str	r3, [r7, #32]
}
 80052de:	bf00      	nop
 80052e0:	bf00      	nop
 80052e2:	e7fd      	b.n	80052e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052e4:	f001 f998 	bl	8006618 <xTaskGetSchedulerState>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d102      	bne.n	80052f4 <xQueueGenericSend+0xa4>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <xQueueGenericSend+0xa8>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <xQueueGenericSend+0xaa>
 80052f8:	2300      	movs	r3, #0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10b      	bne.n	8005316 <xQueueGenericSend+0xc6>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	61fb      	str	r3, [r7, #28]
}
 8005310:	bf00      	nop
 8005312:	bf00      	nop
 8005314:	e7fd      	b.n	8005312 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005316:	f001 feef 	bl	80070f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800531a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005322:	429a      	cmp	r2, r3
 8005324:	d302      	bcc.n	800532c <xQueueGenericSend+0xdc>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d129      	bne.n	8005380 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	68b9      	ldr	r1, [r7, #8]
 8005330:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005332:	f000 fa0f 	bl	8005754 <prvCopyDataToQueue>
 8005336:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	d010      	beq.n	8005362 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005342:	3324      	adds	r3, #36	@ 0x24
 8005344:	4618      	mov	r0, r3
 8005346:	f000 ffa7 	bl	8006298 <xTaskRemoveFromEventList>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d013      	beq.n	8005378 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005350:	4b3f      	ldr	r3, [pc, #252]	@ (8005450 <xQueueGenericSend+0x200>)
 8005352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	e00a      	b.n	8005378 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005368:	4b39      	ldr	r3, [pc, #228]	@ (8005450 <xQueueGenericSend+0x200>)
 800536a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005378:	f001 fef0 	bl	800715c <vPortExitCritical>
				return pdPASS;
 800537c:	2301      	movs	r3, #1
 800537e:	e063      	b.n	8005448 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d103      	bne.n	800538e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005386:	f001 fee9 	bl	800715c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800538a:	2300      	movs	r3, #0
 800538c:	e05c      	b.n	8005448 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800538e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005394:	f107 0314 	add.w	r3, r7, #20
 8005398:	4618      	mov	r0, r3
 800539a:	f000 ffe1 	bl	8006360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800539e:	2301      	movs	r3, #1
 80053a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053a2:	f001 fedb 	bl	800715c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053a6:	f000 fd51 	bl	8005e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053aa:	f001 fea5 	bl	80070f8 <vPortEnterCritical>
 80053ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053b4:	b25b      	sxtb	r3, r3
 80053b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ba:	d103      	bne.n	80053c4 <xQueueGenericSend+0x174>
 80053bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053ca:	b25b      	sxtb	r3, r3
 80053cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d0:	d103      	bne.n	80053da <xQueueGenericSend+0x18a>
 80053d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053da:	f001 febf 	bl	800715c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053de:	1d3a      	adds	r2, r7, #4
 80053e0:	f107 0314 	add.w	r3, r7, #20
 80053e4:	4611      	mov	r1, r2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 ffd0 	bl	800638c <xTaskCheckForTimeOut>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d124      	bne.n	800543c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053f4:	f000 faa6 	bl	8005944 <prvIsQueueFull>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d018      	beq.n	8005430 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005400:	3310      	adds	r3, #16
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	4611      	mov	r1, r2
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fef4 	bl	80061f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800540c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800540e:	f000 fa31 	bl	8005874 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005412:	f000 fd29 	bl	8005e68 <xTaskResumeAll>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	f47f af7c 	bne.w	8005316 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800541e:	4b0c      	ldr	r3, [pc, #48]	@ (8005450 <xQueueGenericSend+0x200>)
 8005420:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	e772      	b.n	8005316 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005432:	f000 fa1f 	bl	8005874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005436:	f000 fd17 	bl	8005e68 <xTaskResumeAll>
 800543a:	e76c      	b.n	8005316 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800543c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800543e:	f000 fa19 	bl	8005874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005442:	f000 fd11 	bl	8005e68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005446:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005448:	4618      	mov	r0, r3
 800544a:	3738      	adds	r7, #56	@ 0x38
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	e000ed04 	.word	0xe000ed04

08005454 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b090      	sub	sp, #64	@ 0x40
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10b      	bne.n	8005484 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800547e:	bf00      	nop
 8005480:	bf00      	nop
 8005482:	e7fd      	b.n	8005480 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d103      	bne.n	8005492 <xQueueGenericSendFromISR+0x3e>
 800548a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <xQueueGenericSendFromISR+0x42>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <xQueueGenericSendFromISR+0x44>
 8005496:	2300      	movs	r3, #0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10b      	bne.n	80054b4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054ae:	bf00      	nop
 80054b0:	bf00      	nop
 80054b2:	e7fd      	b.n	80054b0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d103      	bne.n	80054c2 <xQueueGenericSendFromISR+0x6e>
 80054ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <xQueueGenericSendFromISR+0x72>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <xQueueGenericSendFromISR+0x74>
 80054c6:	2300      	movs	r3, #0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10b      	bne.n	80054e4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	623b      	str	r3, [r7, #32]
}
 80054de:	bf00      	nop
 80054e0:	bf00      	nop
 80054e2:	e7fd      	b.n	80054e0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054e4:	f001 fee8 	bl	80072b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054e8:	f3ef 8211 	mrs	r2, BASEPRI
 80054ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	61fa      	str	r2, [r7, #28]
 80054fe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005500:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005502:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005506:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550c:	429a      	cmp	r2, r3
 800550e:	d302      	bcc.n	8005516 <xQueueGenericSendFromISR+0xc2>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b02      	cmp	r3, #2
 8005514:	d12f      	bne.n	8005576 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005518:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800551c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005524:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	68b9      	ldr	r1, [r7, #8]
 800552a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800552c:	f000 f912 	bl	8005754 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005530:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005538:	d112      	bne.n	8005560 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800553a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553e:	2b00      	cmp	r3, #0
 8005540:	d016      	beq.n	8005570 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005544:	3324      	adds	r3, #36	@ 0x24
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fea6 	bl	8006298 <xTaskRemoveFromEventList>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00e      	beq.n	8005570 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00b      	beq.n	8005570 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e007      	b.n	8005570 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005560:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005564:	3301      	adds	r3, #1
 8005566:	b2db      	uxtb	r3, r3
 8005568:	b25a      	sxtb	r2, r3
 800556a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005570:	2301      	movs	r3, #1
 8005572:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005574:	e001      	b.n	800557a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005576:	2300      	movs	r3, #0
 8005578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800557a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800557c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005584:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005588:	4618      	mov	r0, r3
 800558a:	3740      	adds	r7, #64	@ 0x40
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08c      	sub	sp, #48	@ 0x30
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800559c:	2300      	movs	r3, #0
 800559e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10b      	bne.n	80055c2 <xQueueReceive+0x32>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	623b      	str	r3, [r7, #32]
}
 80055bc:	bf00      	nop
 80055be:	bf00      	nop
 80055c0:	e7fd      	b.n	80055be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d103      	bne.n	80055d0 <xQueueReceive+0x40>
 80055c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <xQueueReceive+0x44>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <xQueueReceive+0x46>
 80055d4:	2300      	movs	r3, #0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10b      	bne.n	80055f2 <xQueueReceive+0x62>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	61fb      	str	r3, [r7, #28]
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	e7fd      	b.n	80055ee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055f2:	f001 f811 	bl	8006618 <xTaskGetSchedulerState>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d102      	bne.n	8005602 <xQueueReceive+0x72>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <xQueueReceive+0x76>
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <xQueueReceive+0x78>
 8005606:	2300      	movs	r3, #0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10b      	bne.n	8005624 <xQueueReceive+0x94>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	61bb      	str	r3, [r7, #24]
}
 800561e:	bf00      	nop
 8005620:	bf00      	nop
 8005622:	e7fd      	b.n	8005620 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005624:	f001 fd68 	bl	80070f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800562e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01f      	beq.n	8005674 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005638:	f000 f8f6 	bl	8005828 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800563c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563e:	1e5a      	subs	r2, r3, #1
 8005640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005642:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00f      	beq.n	800566c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800564c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564e:	3310      	adds	r3, #16
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fe21 	bl	8006298 <xTaskRemoveFromEventList>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d007      	beq.n	800566c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800565c:	4b3c      	ldr	r3, [pc, #240]	@ (8005750 <xQueueReceive+0x1c0>)
 800565e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800566c:	f001 fd76 	bl	800715c <vPortExitCritical>
				return pdPASS;
 8005670:	2301      	movs	r3, #1
 8005672:	e069      	b.n	8005748 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d103      	bne.n	8005682 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800567a:	f001 fd6f 	bl	800715c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800567e:	2300      	movs	r3, #0
 8005680:	e062      	b.n	8005748 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d106      	bne.n	8005696 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005688:	f107 0310 	add.w	r3, r7, #16
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fe67 	bl	8006360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005692:	2301      	movs	r3, #1
 8005694:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005696:	f001 fd61 	bl	800715c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800569a:	f000 fbd7 	bl	8005e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800569e:	f001 fd2b 	bl	80070f8 <vPortEnterCritical>
 80056a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056a8:	b25b      	sxtb	r3, r3
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ae:	d103      	bne.n	80056b8 <xQueueReceive+0x128>
 80056b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056be:	b25b      	sxtb	r3, r3
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d103      	bne.n	80056ce <xQueueReceive+0x13e>
 80056c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056ce:	f001 fd45 	bl	800715c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056d2:	1d3a      	adds	r2, r7, #4
 80056d4:	f107 0310 	add.w	r3, r7, #16
 80056d8:	4611      	mov	r1, r2
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fe56 	bl	800638c <xTaskCheckForTimeOut>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d123      	bne.n	800572e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056e8:	f000 f916 	bl	8005918 <prvIsQueueEmpty>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d017      	beq.n	8005722 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f4:	3324      	adds	r3, #36	@ 0x24
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	4611      	mov	r1, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fd7a 	bl	80061f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005700:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005702:	f000 f8b7 	bl	8005874 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005706:	f000 fbaf 	bl	8005e68 <xTaskResumeAll>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d189      	bne.n	8005624 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005710:	4b0f      	ldr	r3, [pc, #60]	@ (8005750 <xQueueReceive+0x1c0>)
 8005712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	e780      	b.n	8005624 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005722:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005724:	f000 f8a6 	bl	8005874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005728:	f000 fb9e 	bl	8005e68 <xTaskResumeAll>
 800572c:	e77a      	b.n	8005624 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800572e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005730:	f000 f8a0 	bl	8005874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005734:	f000 fb98 	bl	8005e68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005738:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800573a:	f000 f8ed 	bl	8005918 <prvIsQueueEmpty>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	f43f af6f 	beq.w	8005624 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005746:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005748:	4618      	mov	r0, r3
 800574a:	3730      	adds	r7, #48	@ 0x30
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	e000ed04 	.word	0xe000ed04

08005754 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005768:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10d      	bne.n	800578e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d14d      	bne.n	8005816 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	4618      	mov	r0, r3
 8005780:	f000 ff68 	bl	8006654 <xTaskPriorityDisinherit>
 8005784:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	609a      	str	r2, [r3, #8]
 800578c:	e043      	b.n	8005816 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d119      	bne.n	80057c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6858      	ldr	r0, [r3, #4]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579c:	461a      	mov	r2, r3
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	f002 ffcb 	bl	800873a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ac:	441a      	add	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d32b      	bcc.n	8005816 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	605a      	str	r2, [r3, #4]
 80057c6:	e026      	b.n	8005816 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	68d8      	ldr	r0, [r3, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	461a      	mov	r2, r3
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	f002 ffb1 	bl	800873a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e0:	425b      	negs	r3, r3
 80057e2:	441a      	add	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d207      	bcs.n	8005804 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fc:	425b      	negs	r3, r3
 80057fe:	441a      	add	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d105      	bne.n	8005816 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	3b01      	subs	r3, #1
 8005814:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800581e:	697b      	ldr	r3, [r7, #20]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005836:	2b00      	cmp	r3, #0
 8005838:	d018      	beq.n	800586c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005842:	441a      	add	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	429a      	cmp	r2, r3
 8005852:	d303      	bcc.n	800585c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68d9      	ldr	r1, [r3, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005864:	461a      	mov	r2, r3
 8005866:	6838      	ldr	r0, [r7, #0]
 8005868:	f002 ff67 	bl	800873a <memcpy>
	}
}
 800586c:	bf00      	nop
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800587c:	f001 fc3c 	bl	80070f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005886:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005888:	e011      	b.n	80058ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	2b00      	cmp	r3, #0
 8005890:	d012      	beq.n	80058b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3324      	adds	r3, #36	@ 0x24
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fcfe 	bl	8006298 <xTaskRemoveFromEventList>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058a2:	f000 fdd7 	bl	8006454 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	dce9      	bgt.n	800588a <prvUnlockQueue+0x16>
 80058b6:	e000      	b.n	80058ba <prvUnlockQueue+0x46>
					break;
 80058b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	22ff      	movs	r2, #255	@ 0xff
 80058be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80058c2:	f001 fc4b 	bl	800715c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058c6:	f001 fc17 	bl	80070f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058d2:	e011      	b.n	80058f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d012      	beq.n	8005902 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3310      	adds	r3, #16
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fcd9 	bl	8006298 <xTaskRemoveFromEventList>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80058ec:	f000 fdb2 	bl	8006454 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80058f0:	7bbb      	ldrb	r3, [r7, #14]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	dce9      	bgt.n	80058d4 <prvUnlockQueue+0x60>
 8005900:	e000      	b.n	8005904 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005902:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	22ff      	movs	r2, #255	@ 0xff
 8005908:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800590c:	f001 fc26 	bl	800715c <vPortExitCritical>
}
 8005910:	bf00      	nop
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005920:	f001 fbea 	bl	80070f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005928:	2b00      	cmp	r3, #0
 800592a:	d102      	bne.n	8005932 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800592c:	2301      	movs	r3, #1
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	e001      	b.n	8005936 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005932:	2300      	movs	r3, #0
 8005934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005936:	f001 fc11 	bl	800715c <vPortExitCritical>

	return xReturn;
 800593a:	68fb      	ldr	r3, [r7, #12]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800594c:	f001 fbd4 	bl	80070f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005958:	429a      	cmp	r2, r3
 800595a:	d102      	bne.n	8005962 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800595c:	2301      	movs	r3, #1
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e001      	b.n	8005966 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005966:	f001 fbf9 	bl	800715c <vPortExitCritical>

	return xReturn;
 800596a:	68fb      	ldr	r3, [r7, #12]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	e014      	b.n	80059ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005984:	4a0f      	ldr	r2, [pc, #60]	@ (80059c4 <vQueueAddToRegistry+0x50>)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10b      	bne.n	80059a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005990:	490c      	ldr	r1, [pc, #48]	@ (80059c4 <vQueueAddToRegistry+0x50>)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800599a:	4a0a      	ldr	r2, [pc, #40]	@ (80059c4 <vQueueAddToRegistry+0x50>)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	4413      	add	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059a6:	e006      	b.n	80059b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3301      	adds	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b07      	cmp	r3, #7
 80059b2:	d9e7      	bls.n	8005984 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000dd4 	.word	0x20000dd4

080059c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80059d8:	f001 fb8e 	bl	80070f8 <vPortEnterCritical>
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059e2:	b25b      	sxtb	r3, r3
 80059e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e8:	d103      	bne.n	80059f2 <vQueueWaitForMessageRestricted+0x2a>
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059f8:	b25b      	sxtb	r3, r3
 80059fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fe:	d103      	bne.n	8005a08 <vQueueWaitForMessageRestricted+0x40>
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a08:	f001 fba8 	bl	800715c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d106      	bne.n	8005a22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	3324      	adds	r3, #36	@ 0x24
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fc0f 	bl	8006240 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a22:	6978      	ldr	r0, [r7, #20]
 8005a24:	f7ff ff26 	bl	8005874 <prvUnlockQueue>
	}
 8005a28:	bf00      	nop
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08e      	sub	sp, #56	@ 0x38
 8005a34:	af04      	add	r7, sp, #16
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10b      	bne.n	8005a5c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	623b      	str	r3, [r7, #32]
}
 8005a56:	bf00      	nop
 8005a58:	bf00      	nop
 8005a5a:	e7fd      	b.n	8005a58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10b      	bne.n	8005a7a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	61fb      	str	r3, [r7, #28]
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	e7fd      	b.n	8005a76 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a7a:	235c      	movs	r3, #92	@ 0x5c
 8005a7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b5c      	cmp	r3, #92	@ 0x5c
 8005a82:	d00b      	beq.n	8005a9c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	61bb      	str	r3, [r7, #24]
}
 8005a96:	bf00      	nop
 8005a98:	bf00      	nop
 8005a9a:	e7fd      	b.n	8005a98 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d01e      	beq.n	8005ae2 <xTaskCreateStatic+0xb2>
 8005aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d01b      	beq.n	8005ae2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ab2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005abc:	2300      	movs	r3, #0
 8005abe:	9303      	str	r3, [sp, #12]
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	9302      	str	r3, [sp, #8]
 8005ac4:	f107 0314 	add.w	r3, r7, #20
 8005ac8:	9301      	str	r3, [sp, #4]
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f850 	bl	8005b7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ada:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005adc:	f000 f8de 	bl	8005c9c <prvAddNewTaskToReadyList>
 8005ae0:	e001      	b.n	8005ae6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ae6:	697b      	ldr	r3, [r7, #20]
	}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3728      	adds	r7, #40	@ 0x28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08c      	sub	sp, #48	@ 0x30
 8005af4:	af04      	add	r7, sp, #16
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	603b      	str	r3, [r7, #0]
 8005afc:	4613      	mov	r3, r2
 8005afe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b00:	88fb      	ldrh	r3, [r7, #6]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 fc19 	bl	800733c <pvPortMalloc>
 8005b0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00e      	beq.n	8005b30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b12:	205c      	movs	r0, #92	@ 0x5c
 8005b14:	f001 fc12 	bl	800733c <pvPortMalloc>
 8005b18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b26:	e005      	b.n	8005b34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b28:	6978      	ldr	r0, [r7, #20]
 8005b2a:	f001 fcd5 	bl	80074d8 <vPortFree>
 8005b2e:	e001      	b.n	8005b34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d017      	beq.n	8005b6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b42:	88fa      	ldrh	r2, [r7, #6]
 8005b44:	2300      	movs	r3, #0
 8005b46:	9303      	str	r3, [sp, #12]
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	9302      	str	r3, [sp, #8]
 8005b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b4e:	9301      	str	r3, [sp, #4]
 8005b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	68b9      	ldr	r1, [r7, #8]
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f80e 	bl	8005b7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b5e:	69f8      	ldr	r0, [r7, #28]
 8005b60:	f000 f89c 	bl	8005c9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b64:	2301      	movs	r3, #1
 8005b66:	61bb      	str	r3, [r7, #24]
 8005b68:	e002      	b.n	8005b70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b70:	69bb      	ldr	r3, [r7, #24]
	}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3720      	adds	r7, #32
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b088      	sub	sp, #32
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
 8005b86:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	461a      	mov	r2, r3
 8005b92:	21a5      	movs	r1, #165	@ 0xa5
 8005b94:	f002 fd51 	bl	800863a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	f023 0307 	bic.w	r3, r3, #7
 8005bb0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00b      	beq.n	8005bd4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	617b      	str	r3, [r7, #20]
}
 8005bce:	bf00      	nop
 8005bd0:	bf00      	nop
 8005bd2:	e7fd      	b.n	8005bd0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d01f      	beq.n	8005c1a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
 8005bde:	e012      	b.n	8005c06 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	7819      	ldrb	r1, [r3, #0]
 8005be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	4413      	add	r3, r2
 8005bee:	3334      	adds	r3, #52	@ 0x34
 8005bf0:	460a      	mov	r2, r1
 8005bf2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d006      	beq.n	8005c0e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	3301      	adds	r3, #1
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	2b0f      	cmp	r3, #15
 8005c0a:	d9e9      	bls.n	8005be0 <prvInitialiseNewTask+0x66>
 8005c0c:	e000      	b.n	8005c10 <prvInitialiseNewTask+0x96>
			{
				break;
 8005c0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c18:	e003      	b.n	8005c22 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c24:	2b37      	cmp	r3, #55	@ 0x37
 8005c26:	d901      	bls.n	8005c2c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c28:	2337      	movs	r3, #55	@ 0x37
 8005c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c30:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c36:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c40:	3304      	adds	r3, #4
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff f966 	bl	8004f14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4a:	3318      	adds	r3, #24
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff f961 	bl	8004f14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c66:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	68f9      	ldr	r1, [r7, #12]
 8005c7a:	69b8      	ldr	r0, [r7, #24]
 8005c7c:	f001 f908 	bl	8006e90 <pxPortInitialiseStack>
 8005c80:	4602      	mov	r2, r0
 8005c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c92:	bf00      	nop
 8005c94:	3720      	adds	r7, #32
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ca4:	f001 fa28 	bl	80070f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8005d60 <prvAddNewTaskToReadyList+0xc4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3301      	adds	r3, #1
 8005cae:	4a2c      	ldr	r2, [pc, #176]	@ (8005d60 <prvAddNewTaskToReadyList+0xc4>)
 8005cb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8005d64 <prvAddNewTaskToReadyList+0xc8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d109      	bne.n	8005cce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005cba:	4a2a      	ldr	r2, [pc, #168]	@ (8005d64 <prvAddNewTaskToReadyList+0xc8>)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005cc0:	4b27      	ldr	r3, [pc, #156]	@ (8005d60 <prvAddNewTaskToReadyList+0xc4>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d110      	bne.n	8005cea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cc8:	f000 fbe8 	bl	800649c <prvInitialiseTaskLists>
 8005ccc:	e00d      	b.n	8005cea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cce:	4b26      	ldr	r3, [pc, #152]	@ (8005d68 <prvAddNewTaskToReadyList+0xcc>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d109      	bne.n	8005cea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cd6:	4b23      	ldr	r3, [pc, #140]	@ (8005d64 <prvAddNewTaskToReadyList+0xc8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d802      	bhi.n	8005cea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8005d64 <prvAddNewTaskToReadyList+0xc8>)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005cea:	4b20      	ldr	r3, [pc, #128]	@ (8005d6c <prvAddNewTaskToReadyList+0xd0>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8005d6c <prvAddNewTaskToReadyList+0xd0>)
 8005cf2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d6c <prvAddNewTaskToReadyList+0xd0>)
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d00:	4b1b      	ldr	r3, [pc, #108]	@ (8005d70 <prvAddNewTaskToReadyList+0xd4>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d903      	bls.n	8005d10 <prvAddNewTaskToReadyList+0x74>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	4a18      	ldr	r2, [pc, #96]	@ (8005d70 <prvAddNewTaskToReadyList+0xd4>)
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4a15      	ldr	r2, [pc, #84]	@ (8005d74 <prvAddNewTaskToReadyList+0xd8>)
 8005d1e:	441a      	add	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3304      	adds	r3, #4
 8005d24:	4619      	mov	r1, r3
 8005d26:	4610      	mov	r0, r2
 8005d28:	f7ff f901 	bl	8004f2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d2c:	f001 fa16 	bl	800715c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d30:	4b0d      	ldr	r3, [pc, #52]	@ (8005d68 <prvAddNewTaskToReadyList+0xcc>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00e      	beq.n	8005d56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d38:	4b0a      	ldr	r3, [pc, #40]	@ (8005d64 <prvAddNewTaskToReadyList+0xc8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d207      	bcs.n	8005d56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d46:	4b0c      	ldr	r3, [pc, #48]	@ (8005d78 <prvAddNewTaskToReadyList+0xdc>)
 8005d48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d56:	bf00      	nop
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	200012e8 	.word	0x200012e8
 8005d64:	20000e14 	.word	0x20000e14
 8005d68:	200012f4 	.word	0x200012f4
 8005d6c:	20001304 	.word	0x20001304
 8005d70:	200012f0 	.word	0x200012f0
 8005d74:	20000e18 	.word	0x20000e18
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08a      	sub	sp, #40	@ 0x28
 8005d80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d8a:	463a      	mov	r2, r7
 8005d8c:	1d39      	adds	r1, r7, #4
 8005d8e:	f107 0308 	add.w	r3, r7, #8
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff f86a 	bl	8004e6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	9202      	str	r2, [sp, #8]
 8005da0:	9301      	str	r3, [sp, #4]
 8005da2:	2300      	movs	r3, #0
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	2300      	movs	r3, #0
 8005da8:	460a      	mov	r2, r1
 8005daa:	4922      	ldr	r1, [pc, #136]	@ (8005e34 <vTaskStartScheduler+0xb8>)
 8005dac:	4822      	ldr	r0, [pc, #136]	@ (8005e38 <vTaskStartScheduler+0xbc>)
 8005dae:	f7ff fe3f 	bl	8005a30 <xTaskCreateStatic>
 8005db2:	4603      	mov	r3, r0
 8005db4:	4a21      	ldr	r2, [pc, #132]	@ (8005e3c <vTaskStartScheduler+0xc0>)
 8005db6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005db8:	4b20      	ldr	r3, [pc, #128]	@ (8005e3c <vTaskStartScheduler+0xc0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	e001      	b.n	8005dca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d102      	bne.n	8005dd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005dd0:	f000 fd04 	bl	80067dc <xTimerCreateTimerTask>
 8005dd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d116      	bne.n	8005e0a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	613b      	str	r3, [r7, #16]
}
 8005dee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005df0:	4b13      	ldr	r3, [pc, #76]	@ (8005e40 <vTaskStartScheduler+0xc4>)
 8005df2:	f04f 32ff 	mov.w	r2, #4294967295
 8005df6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005df8:	4b12      	ldr	r3, [pc, #72]	@ (8005e44 <vTaskStartScheduler+0xc8>)
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dfe:	4b12      	ldr	r3, [pc, #72]	@ (8005e48 <vTaskStartScheduler+0xcc>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e04:	f001 f8d4 	bl	8006fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e08:	e00f      	b.n	8005e2a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e10:	d10b      	bne.n	8005e2a <vTaskStartScheduler+0xae>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	60fb      	str	r3, [r7, #12]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <vTaskStartScheduler+0xaa>
}
 8005e2a:	bf00      	nop
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	0800be54 	.word	0x0800be54
 8005e38:	0800646d 	.word	0x0800646d
 8005e3c:	2000130c 	.word	0x2000130c
 8005e40:	20001308 	.word	0x20001308
 8005e44:	200012f4 	.word	0x200012f4
 8005e48:	200012ec 	.word	0x200012ec

08005e4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e50:	4b04      	ldr	r3, [pc, #16]	@ (8005e64 <vTaskSuspendAll+0x18>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3301      	adds	r3, #1
 8005e56:	4a03      	ldr	r2, [pc, #12]	@ (8005e64 <vTaskSuspendAll+0x18>)
 8005e58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e5a:	bf00      	nop
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	20001310 	.word	0x20001310

08005e68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e76:	4b42      	ldr	r3, [pc, #264]	@ (8005f80 <xTaskResumeAll+0x118>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10b      	bne.n	8005e96 <xTaskResumeAll+0x2e>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	603b      	str	r3, [r7, #0]
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	e7fd      	b.n	8005e92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e96:	f001 f92f 	bl	80070f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e9a:	4b39      	ldr	r3, [pc, #228]	@ (8005f80 <xTaskResumeAll+0x118>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	4a37      	ldr	r2, [pc, #220]	@ (8005f80 <xTaskResumeAll+0x118>)
 8005ea2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ea4:	4b36      	ldr	r3, [pc, #216]	@ (8005f80 <xTaskResumeAll+0x118>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d162      	bne.n	8005f72 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005eac:	4b35      	ldr	r3, [pc, #212]	@ (8005f84 <xTaskResumeAll+0x11c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d05e      	beq.n	8005f72 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eb4:	e02f      	b.n	8005f16 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eb6:	4b34      	ldr	r3, [pc, #208]	@ (8005f88 <xTaskResumeAll+0x120>)
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3318      	adds	r3, #24
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff f890 	bl	8004fe8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff f88b 	bl	8004fe8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8005f8c <xTaskResumeAll+0x124>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d903      	bls.n	8005ee6 <xTaskResumeAll+0x7e>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f8c <xTaskResumeAll+0x124>)
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4a27      	ldr	r2, [pc, #156]	@ (8005f90 <xTaskResumeAll+0x128>)
 8005ef4:	441a      	add	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	4619      	mov	r1, r3
 8005efc:	4610      	mov	r0, r2
 8005efe:	f7ff f816 	bl	8004f2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f06:	4b23      	ldr	r3, [pc, #140]	@ (8005f94 <xTaskResumeAll+0x12c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d302      	bcc.n	8005f16 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005f10:	4b21      	ldr	r3, [pc, #132]	@ (8005f98 <xTaskResumeAll+0x130>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f16:	4b1c      	ldr	r3, [pc, #112]	@ (8005f88 <xTaskResumeAll+0x120>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1cb      	bne.n	8005eb6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f24:	f000 fb58 	bl	80065d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f28:	4b1c      	ldr	r3, [pc, #112]	@ (8005f9c <xTaskResumeAll+0x134>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d010      	beq.n	8005f56 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f34:	f000 f846 	bl	8005fc4 <xTaskIncrementTick>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005f3e:	4b16      	ldr	r3, [pc, #88]	@ (8005f98 <xTaskResumeAll+0x130>)
 8005f40:	2201      	movs	r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1f1      	bne.n	8005f34 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005f50:	4b12      	ldr	r3, [pc, #72]	@ (8005f9c <xTaskResumeAll+0x134>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f56:	4b10      	ldr	r3, [pc, #64]	@ (8005f98 <xTaskResumeAll+0x130>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f62:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa0 <xTaskResumeAll+0x138>)
 8005f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f72:	f001 f8f3 	bl	800715c <vPortExitCritical>

	return xAlreadyYielded;
 8005f76:	68bb      	ldr	r3, [r7, #8]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20001310 	.word	0x20001310
 8005f84:	200012e8 	.word	0x200012e8
 8005f88:	200012a8 	.word	0x200012a8
 8005f8c:	200012f0 	.word	0x200012f0
 8005f90:	20000e18 	.word	0x20000e18
 8005f94:	20000e14 	.word	0x20000e14
 8005f98:	200012fc 	.word	0x200012fc
 8005f9c:	200012f8 	.word	0x200012f8
 8005fa0:	e000ed04 	.word	0xe000ed04

08005fa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005faa:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <xTaskGetTickCount+0x1c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005fb0:	687b      	ldr	r3, [r7, #4]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	200012ec 	.word	0x200012ec

08005fc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fce:	4b4f      	ldr	r3, [pc, #316]	@ (800610c <xTaskIncrementTick+0x148>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f040 8090 	bne.w	80060f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8006110 <xTaskIncrementTick+0x14c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fe0:	4a4b      	ldr	r2, [pc, #300]	@ (8006110 <xTaskIncrementTick+0x14c>)
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d121      	bne.n	8006030 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fec:	4b49      	ldr	r3, [pc, #292]	@ (8006114 <xTaskIncrementTick+0x150>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00b      	beq.n	800600e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	603b      	str	r3, [r7, #0]
}
 8006008:	bf00      	nop
 800600a:	bf00      	nop
 800600c:	e7fd      	b.n	800600a <xTaskIncrementTick+0x46>
 800600e:	4b41      	ldr	r3, [pc, #260]	@ (8006114 <xTaskIncrementTick+0x150>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	4b40      	ldr	r3, [pc, #256]	@ (8006118 <xTaskIncrementTick+0x154>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a3e      	ldr	r2, [pc, #248]	@ (8006114 <xTaskIncrementTick+0x150>)
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	4a3e      	ldr	r2, [pc, #248]	@ (8006118 <xTaskIncrementTick+0x154>)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	4b3e      	ldr	r3, [pc, #248]	@ (800611c <xTaskIncrementTick+0x158>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3301      	adds	r3, #1
 8006028:	4a3c      	ldr	r2, [pc, #240]	@ (800611c <xTaskIncrementTick+0x158>)
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	f000 fad4 	bl	80065d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006030:	4b3b      	ldr	r3, [pc, #236]	@ (8006120 <xTaskIncrementTick+0x15c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	429a      	cmp	r2, r3
 8006038:	d349      	bcc.n	80060ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800603a:	4b36      	ldr	r3, [pc, #216]	@ (8006114 <xTaskIncrementTick+0x150>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d104      	bne.n	800604e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006044:	4b36      	ldr	r3, [pc, #216]	@ (8006120 <xTaskIncrementTick+0x15c>)
 8006046:	f04f 32ff 	mov.w	r2, #4294967295
 800604a:	601a      	str	r2, [r3, #0]
					break;
 800604c:	e03f      	b.n	80060ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800604e:	4b31      	ldr	r3, [pc, #196]	@ (8006114 <xTaskIncrementTick+0x150>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	429a      	cmp	r2, r3
 8006064:	d203      	bcs.n	800606e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006066:	4a2e      	ldr	r2, [pc, #184]	@ (8006120 <xTaskIncrementTick+0x15c>)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800606c:	e02f      	b.n	80060ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	3304      	adds	r3, #4
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe ffb8 	bl	8004fe8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607c:	2b00      	cmp	r3, #0
 800607e:	d004      	beq.n	800608a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	3318      	adds	r3, #24
 8006084:	4618      	mov	r0, r3
 8006086:	f7fe ffaf 	bl	8004fe8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800608e:	4b25      	ldr	r3, [pc, #148]	@ (8006124 <xTaskIncrementTick+0x160>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d903      	bls.n	800609e <xTaskIncrementTick+0xda>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609a:	4a22      	ldr	r2, [pc, #136]	@ (8006124 <xTaskIncrementTick+0x160>)
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4a1f      	ldr	r2, [pc, #124]	@ (8006128 <xTaskIncrementTick+0x164>)
 80060ac:	441a      	add	r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	3304      	adds	r3, #4
 80060b2:	4619      	mov	r1, r3
 80060b4:	4610      	mov	r0, r2
 80060b6:	f7fe ff3a 	bl	8004f2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060be:	4b1b      	ldr	r3, [pc, #108]	@ (800612c <xTaskIncrementTick+0x168>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d3b8      	bcc.n	800603a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80060c8:	2301      	movs	r3, #1
 80060ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060cc:	e7b5      	b.n	800603a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060ce:	4b17      	ldr	r3, [pc, #92]	@ (800612c <xTaskIncrementTick+0x168>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d4:	4914      	ldr	r1, [pc, #80]	@ (8006128 <xTaskIncrementTick+0x164>)
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d901      	bls.n	80060ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80060e6:	2301      	movs	r3, #1
 80060e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060ea:	4b11      	ldr	r3, [pc, #68]	@ (8006130 <xTaskIncrementTick+0x16c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d007      	beq.n	8006102 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80060f2:	2301      	movs	r3, #1
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	e004      	b.n	8006102 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006134 <xTaskIncrementTick+0x170>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3301      	adds	r3, #1
 80060fe:	4a0d      	ldr	r2, [pc, #52]	@ (8006134 <xTaskIncrementTick+0x170>)
 8006100:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006102:	697b      	ldr	r3, [r7, #20]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20001310 	.word	0x20001310
 8006110:	200012ec 	.word	0x200012ec
 8006114:	200012a0 	.word	0x200012a0
 8006118:	200012a4 	.word	0x200012a4
 800611c:	20001300 	.word	0x20001300
 8006120:	20001308 	.word	0x20001308
 8006124:	200012f0 	.word	0x200012f0
 8006128:	20000e18 	.word	0x20000e18
 800612c:	20000e14 	.word	0x20000e14
 8006130:	200012fc 	.word	0x200012fc
 8006134:	200012f8 	.word	0x200012f8

08006138 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800613e:	4b28      	ldr	r3, [pc, #160]	@ (80061e0 <vTaskSwitchContext+0xa8>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006146:	4b27      	ldr	r3, [pc, #156]	@ (80061e4 <vTaskSwitchContext+0xac>)
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800614c:	e042      	b.n	80061d4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800614e:	4b25      	ldr	r3, [pc, #148]	@ (80061e4 <vTaskSwitchContext+0xac>)
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006154:	4b24      	ldr	r3, [pc, #144]	@ (80061e8 <vTaskSwitchContext+0xb0>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	e011      	b.n	8006180 <vTaskSwitchContext+0x48>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10b      	bne.n	800617a <vTaskSwitchContext+0x42>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	607b      	str	r3, [r7, #4]
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	e7fd      	b.n	8006176 <vTaskSwitchContext+0x3e>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3b01      	subs	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	491a      	ldr	r1, [pc, #104]	@ (80061ec <vTaskSwitchContext+0xb4>)
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0e3      	beq.n	800615c <vTaskSwitchContext+0x24>
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4613      	mov	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4a13      	ldr	r2, [pc, #76]	@ (80061ec <vTaskSwitchContext+0xb4>)
 80061a0:	4413      	add	r3, r2
 80061a2:	60bb      	str	r3, [r7, #8]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	605a      	str	r2, [r3, #4]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	3308      	adds	r3, #8
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d104      	bne.n	80061c4 <vTaskSwitchContext+0x8c>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	605a      	str	r2, [r3, #4]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	4a09      	ldr	r2, [pc, #36]	@ (80061f0 <vTaskSwitchContext+0xb8>)
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	4a06      	ldr	r2, [pc, #24]	@ (80061e8 <vTaskSwitchContext+0xb0>)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6013      	str	r3, [r2, #0]
}
 80061d4:	bf00      	nop
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	20001310 	.word	0x20001310
 80061e4:	200012fc 	.word	0x200012fc
 80061e8:	200012f0 	.word	0x200012f0
 80061ec:	20000e18 	.word	0x20000e18
 80061f0:	20000e14 	.word	0x20000e14

080061f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10b      	bne.n	800621c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	60fb      	str	r3, [r7, #12]
}
 8006216:	bf00      	nop
 8006218:	bf00      	nop
 800621a:	e7fd      	b.n	8006218 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800621c:	4b07      	ldr	r3, [pc, #28]	@ (800623c <vTaskPlaceOnEventList+0x48>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3318      	adds	r3, #24
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7fe fea6 	bl	8004f76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800622a:	2101      	movs	r1, #1
 800622c:	6838      	ldr	r0, [r7, #0]
 800622e:	f000 fa81 	bl	8006734 <prvAddCurrentTaskToDelayedList>
}
 8006232:	bf00      	nop
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20000e14 	.word	0x20000e14

08006240 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10b      	bne.n	800626a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	617b      	str	r3, [r7, #20]
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	e7fd      	b.n	8006266 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800626a:	4b0a      	ldr	r3, [pc, #40]	@ (8006294 <vTaskPlaceOnEventListRestricted+0x54>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3318      	adds	r3, #24
 8006270:	4619      	mov	r1, r3
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f7fe fe5b 	bl	8004f2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800627e:	f04f 33ff 	mov.w	r3, #4294967295
 8006282:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	68b8      	ldr	r0, [r7, #8]
 8006288:	f000 fa54 	bl	8006734 <prvAddCurrentTaskToDelayedList>
	}
 800628c:	bf00      	nop
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	20000e14 	.word	0x20000e14

08006298 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10b      	bne.n	80062c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	60fb      	str	r3, [r7, #12]
}
 80062c0:	bf00      	nop
 80062c2:	bf00      	nop
 80062c4:	e7fd      	b.n	80062c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	3318      	adds	r3, #24
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fe fe8c 	bl	8004fe8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006348 <xTaskRemoveFromEventList+0xb0>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d11d      	bne.n	8006314 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	3304      	adds	r3, #4
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fe fe83 	bl	8004fe8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062e6:	4b19      	ldr	r3, [pc, #100]	@ (800634c <xTaskRemoveFromEventList+0xb4>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d903      	bls.n	80062f6 <xTaskRemoveFromEventList+0x5e>
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f2:	4a16      	ldr	r2, [pc, #88]	@ (800634c <xTaskRemoveFromEventList+0xb4>)
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062fa:	4613      	mov	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4a13      	ldr	r2, [pc, #76]	@ (8006350 <xTaskRemoveFromEventList+0xb8>)
 8006304:	441a      	add	r2, r3
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	3304      	adds	r3, #4
 800630a:	4619      	mov	r1, r3
 800630c:	4610      	mov	r0, r2
 800630e:	f7fe fe0e 	bl	8004f2e <vListInsertEnd>
 8006312:	e005      	b.n	8006320 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	3318      	adds	r3, #24
 8006318:	4619      	mov	r1, r3
 800631a:	480e      	ldr	r0, [pc, #56]	@ (8006354 <xTaskRemoveFromEventList+0xbc>)
 800631c:	f7fe fe07 	bl	8004f2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006324:	4b0c      	ldr	r3, [pc, #48]	@ (8006358 <xTaskRemoveFromEventList+0xc0>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632a:	429a      	cmp	r2, r3
 800632c:	d905      	bls.n	800633a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800632e:	2301      	movs	r3, #1
 8006330:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006332:	4b0a      	ldr	r3, [pc, #40]	@ (800635c <xTaskRemoveFromEventList+0xc4>)
 8006334:	2201      	movs	r2, #1
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	e001      	b.n	800633e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800633e:	697b      	ldr	r3, [r7, #20]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	20001310 	.word	0x20001310
 800634c:	200012f0 	.word	0x200012f0
 8006350:	20000e18 	.word	0x20000e18
 8006354:	200012a8 	.word	0x200012a8
 8006358:	20000e14 	.word	0x20000e14
 800635c:	200012fc 	.word	0x200012fc

08006360 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006368:	4b06      	ldr	r3, [pc, #24]	@ (8006384 <vTaskInternalSetTimeOutState+0x24>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006370:	4b05      	ldr	r3, [pc, #20]	@ (8006388 <vTaskInternalSetTimeOutState+0x28>)
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	605a      	str	r2, [r3, #4]
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	20001300 	.word	0x20001300
 8006388:	200012ec 	.word	0x200012ec

0800638c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10b      	bne.n	80063b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	613b      	str	r3, [r7, #16]
}
 80063ae:	bf00      	nop
 80063b0:	bf00      	nop
 80063b2:	e7fd      	b.n	80063b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10b      	bne.n	80063d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	60fb      	str	r3, [r7, #12]
}
 80063cc:	bf00      	nop
 80063ce:	bf00      	nop
 80063d0:	e7fd      	b.n	80063ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80063d2:	f000 fe91 	bl	80070f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063d6:	4b1d      	ldr	r3, [pc, #116]	@ (800644c <xTaskCheckForTimeOut+0xc0>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ee:	d102      	bne.n	80063f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063f0:	2300      	movs	r3, #0
 80063f2:	61fb      	str	r3, [r7, #28]
 80063f4:	e023      	b.n	800643e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	4b15      	ldr	r3, [pc, #84]	@ (8006450 <xTaskCheckForTimeOut+0xc4>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d007      	beq.n	8006412 <xTaskCheckForTimeOut+0x86>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	429a      	cmp	r2, r3
 800640a:	d302      	bcc.n	8006412 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800640c:	2301      	movs	r3, #1
 800640e:	61fb      	str	r3, [r7, #28]
 8006410:	e015      	b.n	800643e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	429a      	cmp	r2, r3
 800641a:	d20b      	bcs.n	8006434 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	1ad2      	subs	r2, r2, r3
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff ff99 	bl	8006360 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800642e:	2300      	movs	r3, #0
 8006430:	61fb      	str	r3, [r7, #28]
 8006432:	e004      	b.n	800643e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2200      	movs	r2, #0
 8006438:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800643a:	2301      	movs	r3, #1
 800643c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800643e:	f000 fe8d 	bl	800715c <vPortExitCritical>

	return xReturn;
 8006442:	69fb      	ldr	r3, [r7, #28]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3720      	adds	r7, #32
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	200012ec 	.word	0x200012ec
 8006450:	20001300 	.word	0x20001300

08006454 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006454:	b480      	push	{r7}
 8006456:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006458:	4b03      	ldr	r3, [pc, #12]	@ (8006468 <vTaskMissedYield+0x14>)
 800645a:	2201      	movs	r2, #1
 800645c:	601a      	str	r2, [r3, #0]
}
 800645e:	bf00      	nop
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	200012fc 	.word	0x200012fc

0800646c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006474:	f000 f852 	bl	800651c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006478:	4b06      	ldr	r3, [pc, #24]	@ (8006494 <prvIdleTask+0x28>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d9f9      	bls.n	8006474 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006480:	4b05      	ldr	r3, [pc, #20]	@ (8006498 <prvIdleTask+0x2c>)
 8006482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006490:	e7f0      	b.n	8006474 <prvIdleTask+0x8>
 8006492:	bf00      	nop
 8006494:	20000e18 	.word	0x20000e18
 8006498:	e000ed04 	.word	0xe000ed04

0800649c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064a2:	2300      	movs	r3, #0
 80064a4:	607b      	str	r3, [r7, #4]
 80064a6:	e00c      	b.n	80064c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4a12      	ldr	r2, [pc, #72]	@ (80064fc <prvInitialiseTaskLists+0x60>)
 80064b4:	4413      	add	r3, r2
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe fd0c 	bl	8004ed4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3301      	adds	r3, #1
 80064c0:	607b      	str	r3, [r7, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b37      	cmp	r3, #55	@ 0x37
 80064c6:	d9ef      	bls.n	80064a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064c8:	480d      	ldr	r0, [pc, #52]	@ (8006500 <prvInitialiseTaskLists+0x64>)
 80064ca:	f7fe fd03 	bl	8004ed4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064ce:	480d      	ldr	r0, [pc, #52]	@ (8006504 <prvInitialiseTaskLists+0x68>)
 80064d0:	f7fe fd00 	bl	8004ed4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064d4:	480c      	ldr	r0, [pc, #48]	@ (8006508 <prvInitialiseTaskLists+0x6c>)
 80064d6:	f7fe fcfd 	bl	8004ed4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064da:	480c      	ldr	r0, [pc, #48]	@ (800650c <prvInitialiseTaskLists+0x70>)
 80064dc:	f7fe fcfa 	bl	8004ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064e0:	480b      	ldr	r0, [pc, #44]	@ (8006510 <prvInitialiseTaskLists+0x74>)
 80064e2:	f7fe fcf7 	bl	8004ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006514 <prvInitialiseTaskLists+0x78>)
 80064e8:	4a05      	ldr	r2, [pc, #20]	@ (8006500 <prvInitialiseTaskLists+0x64>)
 80064ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006518 <prvInitialiseTaskLists+0x7c>)
 80064ee:	4a05      	ldr	r2, [pc, #20]	@ (8006504 <prvInitialiseTaskLists+0x68>)
 80064f0:	601a      	str	r2, [r3, #0]
}
 80064f2:	bf00      	nop
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000e18 	.word	0x20000e18
 8006500:	20001278 	.word	0x20001278
 8006504:	2000128c 	.word	0x2000128c
 8006508:	200012a8 	.word	0x200012a8
 800650c:	200012bc 	.word	0x200012bc
 8006510:	200012d4 	.word	0x200012d4
 8006514:	200012a0 	.word	0x200012a0
 8006518:	200012a4 	.word	0x200012a4

0800651c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006522:	e019      	b.n	8006558 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006524:	f000 fde8 	bl	80070f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006528:	4b10      	ldr	r3, [pc, #64]	@ (800656c <prvCheckTasksWaitingTermination+0x50>)
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3304      	adds	r3, #4
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe fd57 	bl	8004fe8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800653a:	4b0d      	ldr	r3, [pc, #52]	@ (8006570 <prvCheckTasksWaitingTermination+0x54>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3b01      	subs	r3, #1
 8006540:	4a0b      	ldr	r2, [pc, #44]	@ (8006570 <prvCheckTasksWaitingTermination+0x54>)
 8006542:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006544:	4b0b      	ldr	r3, [pc, #44]	@ (8006574 <prvCheckTasksWaitingTermination+0x58>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3b01      	subs	r3, #1
 800654a:	4a0a      	ldr	r2, [pc, #40]	@ (8006574 <prvCheckTasksWaitingTermination+0x58>)
 800654c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800654e:	f000 fe05 	bl	800715c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f810 	bl	8006578 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006558:	4b06      	ldr	r3, [pc, #24]	@ (8006574 <prvCheckTasksWaitingTermination+0x58>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e1      	bne.n	8006524 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006560:	bf00      	nop
 8006562:	bf00      	nop
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	200012bc 	.word	0x200012bc
 8006570:	200012e8 	.word	0x200012e8
 8006574:	200012d0 	.word	0x200012d0

08006578 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006586:	2b00      	cmp	r3, #0
 8006588:	d108      	bne.n	800659c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658e:	4618      	mov	r0, r3
 8006590:	f000 ffa2 	bl	80074d8 <vPortFree>
				vPortFree( pxTCB );
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 ff9f 	bl	80074d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800659a:	e019      	b.n	80065d0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d103      	bne.n	80065ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 ff96 	bl	80074d8 <vPortFree>
	}
 80065ac:	e010      	b.n	80065d0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d00b      	beq.n	80065d0 <prvDeleteTCB+0x58>
	__asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	60fb      	str	r3, [r7, #12]
}
 80065ca:	bf00      	nop
 80065cc:	bf00      	nop
 80065ce:	e7fd      	b.n	80065cc <prvDeleteTCB+0x54>
	}
 80065d0:	bf00      	nop
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065de:	4b0c      	ldr	r3, [pc, #48]	@ (8006610 <prvResetNextTaskUnblockTime+0x38>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d104      	bne.n	80065f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006614 <prvResetNextTaskUnblockTime+0x3c>)
 80065ea:	f04f 32ff 	mov.w	r2, #4294967295
 80065ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065f0:	e008      	b.n	8006604 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f2:	4b07      	ldr	r3, [pc, #28]	@ (8006610 <prvResetNextTaskUnblockTime+0x38>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	4a04      	ldr	r2, [pc, #16]	@ (8006614 <prvResetNextTaskUnblockTime+0x3c>)
 8006602:	6013      	str	r3, [r2, #0]
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	200012a0 	.word	0x200012a0
 8006614:	20001308 	.word	0x20001308

08006618 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800661e:	4b0b      	ldr	r3, [pc, #44]	@ (800664c <xTaskGetSchedulerState+0x34>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d102      	bne.n	800662c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006626:	2301      	movs	r3, #1
 8006628:	607b      	str	r3, [r7, #4]
 800662a:	e008      	b.n	800663e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800662c:	4b08      	ldr	r3, [pc, #32]	@ (8006650 <xTaskGetSchedulerState+0x38>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d102      	bne.n	800663a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006634:	2302      	movs	r3, #2
 8006636:	607b      	str	r3, [r7, #4]
 8006638:	e001      	b.n	800663e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800663a:	2300      	movs	r3, #0
 800663c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800663e:	687b      	ldr	r3, [r7, #4]
	}
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	200012f4 	.word	0x200012f4
 8006650:	20001310 	.word	0x20001310

08006654 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006660:	2300      	movs	r3, #0
 8006662:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d058      	beq.n	800671c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800666a:	4b2f      	ldr	r3, [pc, #188]	@ (8006728 <xTaskPriorityDisinherit+0xd4>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	429a      	cmp	r2, r3
 8006672:	d00b      	beq.n	800668c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	60fb      	str	r3, [r7, #12]
}
 8006686:	bf00      	nop
 8006688:	bf00      	nop
 800668a:	e7fd      	b.n	8006688 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10b      	bne.n	80066ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	60bb      	str	r3, [r7, #8]
}
 80066a6:	bf00      	nop
 80066a8:	bf00      	nop
 80066aa:	e7fd      	b.n	80066a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b0:	1e5a      	subs	r2, r3, #1
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066be:	429a      	cmp	r2, r3
 80066c0:	d02c      	beq.n	800671c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d128      	bne.n	800671c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	3304      	adds	r3, #4
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fe fc8a 	bl	8004fe8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ec:	4b0f      	ldr	r3, [pc, #60]	@ (800672c <xTaskPriorityDisinherit+0xd8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d903      	bls.n	80066fc <xTaskPriorityDisinherit+0xa8>
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f8:	4a0c      	ldr	r2, [pc, #48]	@ (800672c <xTaskPriorityDisinherit+0xd8>)
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4a09      	ldr	r2, [pc, #36]	@ (8006730 <xTaskPriorityDisinherit+0xdc>)
 800670a:	441a      	add	r2, r3
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	3304      	adds	r3, #4
 8006710:	4619      	mov	r1, r3
 8006712:	4610      	mov	r0, r2
 8006714:	f7fe fc0b 	bl	8004f2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006718:	2301      	movs	r3, #1
 800671a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800671c:	697b      	ldr	r3, [r7, #20]
	}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20000e14 	.word	0x20000e14
 800672c:	200012f0 	.word	0x200012f0
 8006730:	20000e18 	.word	0x20000e18

08006734 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800673e:	4b21      	ldr	r3, [pc, #132]	@ (80067c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006744:	4b20      	ldr	r3, [pc, #128]	@ (80067c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3304      	adds	r3, #4
 800674a:	4618      	mov	r0, r3
 800674c:	f7fe fc4c 	bl	8004fe8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006756:	d10a      	bne.n	800676e <prvAddCurrentTaskToDelayedList+0x3a>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d007      	beq.n	800676e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800675e:	4b1a      	ldr	r3, [pc, #104]	@ (80067c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3304      	adds	r3, #4
 8006764:	4619      	mov	r1, r3
 8006766:	4819      	ldr	r0, [pc, #100]	@ (80067cc <prvAddCurrentTaskToDelayedList+0x98>)
 8006768:	f7fe fbe1 	bl	8004f2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800676c:	e026      	b.n	80067bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4413      	add	r3, r2
 8006774:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006776:	4b14      	ldr	r3, [pc, #80]	@ (80067c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	429a      	cmp	r2, r3
 8006784:	d209      	bcs.n	800679a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006786:	4b12      	ldr	r3, [pc, #72]	@ (80067d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	4b0f      	ldr	r3, [pc, #60]	@ (80067c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3304      	adds	r3, #4
 8006790:	4619      	mov	r1, r3
 8006792:	4610      	mov	r0, r2
 8006794:	f7fe fbef 	bl	8004f76 <vListInsert>
}
 8006798:	e010      	b.n	80067bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800679a:	4b0e      	ldr	r3, [pc, #56]	@ (80067d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	4b0a      	ldr	r3, [pc, #40]	@ (80067c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3304      	adds	r3, #4
 80067a4:	4619      	mov	r1, r3
 80067a6:	4610      	mov	r0, r2
 80067a8:	f7fe fbe5 	bl	8004f76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067ac:	4b0a      	ldr	r3, [pc, #40]	@ (80067d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d202      	bcs.n	80067bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067b6:	4a08      	ldr	r2, [pc, #32]	@ (80067d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	6013      	str	r3, [r2, #0]
}
 80067bc:	bf00      	nop
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	200012ec 	.word	0x200012ec
 80067c8:	20000e14 	.word	0x20000e14
 80067cc:	200012d4 	.word	0x200012d4
 80067d0:	200012a4 	.word	0x200012a4
 80067d4:	200012a0 	.word	0x200012a0
 80067d8:	20001308 	.word	0x20001308

080067dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08a      	sub	sp, #40	@ 0x28
 80067e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80067e6:	f000 fb13 	bl	8006e10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067ea:	4b1d      	ldr	r3, [pc, #116]	@ (8006860 <xTimerCreateTimerTask+0x84>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d021      	beq.n	8006836 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80067fa:	1d3a      	adds	r2, r7, #4
 80067fc:	f107 0108 	add.w	r1, r7, #8
 8006800:	f107 030c 	add.w	r3, r7, #12
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe fb4b 	bl	8004ea0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	9202      	str	r2, [sp, #8]
 8006812:	9301      	str	r3, [sp, #4]
 8006814:	2302      	movs	r3, #2
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	2300      	movs	r3, #0
 800681a:	460a      	mov	r2, r1
 800681c:	4911      	ldr	r1, [pc, #68]	@ (8006864 <xTimerCreateTimerTask+0x88>)
 800681e:	4812      	ldr	r0, [pc, #72]	@ (8006868 <xTimerCreateTimerTask+0x8c>)
 8006820:	f7ff f906 	bl	8005a30 <xTaskCreateStatic>
 8006824:	4603      	mov	r3, r0
 8006826:	4a11      	ldr	r2, [pc, #68]	@ (800686c <xTimerCreateTimerTask+0x90>)
 8006828:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800682a:	4b10      	ldr	r3, [pc, #64]	@ (800686c <xTimerCreateTimerTask+0x90>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006832:	2301      	movs	r3, #1
 8006834:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10b      	bne.n	8006854 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	613b      	str	r3, [r7, #16]
}
 800684e:	bf00      	nop
 8006850:	bf00      	nop
 8006852:	e7fd      	b.n	8006850 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006854:	697b      	ldr	r3, [r7, #20]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20001344 	.word	0x20001344
 8006864:	0800be5c 	.word	0x0800be5c
 8006868:	080069a9 	.word	0x080069a9
 800686c:	20001348 	.word	0x20001348

08006870 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b08a      	sub	sp, #40	@ 0x28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800687e:	2300      	movs	r3, #0
 8006880:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10b      	bne.n	80068a0 <xTimerGenericCommand+0x30>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	623b      	str	r3, [r7, #32]
}
 800689a:	bf00      	nop
 800689c:	bf00      	nop
 800689e:	e7fd      	b.n	800689c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068a0:	4b19      	ldr	r3, [pc, #100]	@ (8006908 <xTimerGenericCommand+0x98>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d02a      	beq.n	80068fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b05      	cmp	r3, #5
 80068b8:	dc18      	bgt.n	80068ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068ba:	f7ff fead 	bl	8006618 <xTaskGetSchedulerState>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d109      	bne.n	80068d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068c4:	4b10      	ldr	r3, [pc, #64]	@ (8006908 <xTimerGenericCommand+0x98>)
 80068c6:	6818      	ldr	r0, [r3, #0]
 80068c8:	f107 0110 	add.w	r1, r7, #16
 80068cc:	2300      	movs	r3, #0
 80068ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068d0:	f7fe fcbe 	bl	8005250 <xQueueGenericSend>
 80068d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80068d6:	e012      	b.n	80068fe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006908 <xTimerGenericCommand+0x98>)
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	f107 0110 	add.w	r1, r7, #16
 80068e0:	2300      	movs	r3, #0
 80068e2:	2200      	movs	r2, #0
 80068e4:	f7fe fcb4 	bl	8005250 <xQueueGenericSend>
 80068e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80068ea:	e008      	b.n	80068fe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068ec:	4b06      	ldr	r3, [pc, #24]	@ (8006908 <xTimerGenericCommand+0x98>)
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	f107 0110 	add.w	r1, r7, #16
 80068f4:	2300      	movs	r3, #0
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	f7fe fdac 	bl	8005454 <xQueueGenericSendFromISR>
 80068fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80068fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006900:	4618      	mov	r0, r3
 8006902:	3728      	adds	r7, #40	@ 0x28
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	20001344 	.word	0x20001344

0800690c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af02      	add	r7, sp, #8
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006916:	4b23      	ldr	r3, [pc, #140]	@ (80069a4 <prvProcessExpiredTimer+0x98>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	3304      	adds	r3, #4
 8006924:	4618      	mov	r0, r3
 8006926:	f7fe fb5f 	bl	8004fe8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	d023      	beq.n	8006980 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	699a      	ldr	r2, [r3, #24]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	18d1      	adds	r1, r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	6978      	ldr	r0, [r7, #20]
 8006946:	f000 f8d5 	bl	8006af4 <prvInsertTimerInActiveList>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d020      	beq.n	8006992 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006950:	2300      	movs	r3, #0
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	2300      	movs	r3, #0
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	2100      	movs	r1, #0
 800695a:	6978      	ldr	r0, [r7, #20]
 800695c:	f7ff ff88 	bl	8006870 <xTimerGenericCommand>
 8006960:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d114      	bne.n	8006992 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	60fb      	str	r3, [r7, #12]
}
 800697a:	bf00      	nop
 800697c:	bf00      	nop
 800697e:	e7fd      	b.n	800697c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006986:	f023 0301 	bic.w	r3, r3, #1
 800698a:	b2da      	uxtb	r2, r3
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	6978      	ldr	r0, [r7, #20]
 8006998:	4798      	blx	r3
}
 800699a:	bf00      	nop
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	2000133c 	.word	0x2000133c

080069a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069b0:	f107 0308 	add.w	r3, r7, #8
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 f859 	bl	8006a6c <prvGetNextExpireTime>
 80069ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	4619      	mov	r1, r3
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f805 	bl	80069d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069c6:	f000 f8d7 	bl	8006b78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069ca:	bf00      	nop
 80069cc:	e7f0      	b.n	80069b0 <prvTimerTask+0x8>
	...

080069d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069da:	f7ff fa37 	bl	8005e4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069de:	f107 0308 	add.w	r3, r7, #8
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 f866 	bl	8006ab4 <prvSampleTimeNow>
 80069e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d130      	bne.n	8006a52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <prvProcessTimerOrBlockTask+0x3c>
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d806      	bhi.n	8006a0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80069fe:	f7ff fa33 	bl	8005e68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a02:	68f9      	ldr	r1, [r7, #12]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7ff ff81 	bl	800690c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a0a:	e024      	b.n	8006a56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d008      	beq.n	8006a24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a12:	4b13      	ldr	r3, [pc, #76]	@ (8006a60 <prvProcessTimerOrBlockTask+0x90>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <prvProcessTimerOrBlockTask+0x50>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <prvProcessTimerOrBlockTask+0x52>
 8006a20:	2300      	movs	r3, #0
 8006a22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a24:	4b0f      	ldr	r3, [pc, #60]	@ (8006a64 <prvProcessTimerOrBlockTask+0x94>)
 8006a26:	6818      	ldr	r0, [r3, #0]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	4619      	mov	r1, r3
 8006a32:	f7fe ffc9 	bl	80059c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a36:	f7ff fa17 	bl	8005e68 <xTaskResumeAll>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a40:	4b09      	ldr	r3, [pc, #36]	@ (8006a68 <prvProcessTimerOrBlockTask+0x98>)
 8006a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	f3bf 8f6f 	isb	sy
}
 8006a50:	e001      	b.n	8006a56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a52:	f7ff fa09 	bl	8005e68 <xTaskResumeAll>
}
 8006a56:	bf00      	nop
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20001340 	.word	0x20001340
 8006a64:	20001344 	.word	0x20001344
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a74:	4b0e      	ldr	r3, [pc, #56]	@ (8006ab0 <prvGetNextExpireTime+0x44>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <prvGetNextExpireTime+0x16>
 8006a7e:	2201      	movs	r2, #1
 8006a80:	e000      	b.n	8006a84 <prvGetNextExpireTime+0x18>
 8006a82:	2200      	movs	r2, #0
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d105      	bne.n	8006a9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a90:	4b07      	ldr	r3, [pc, #28]	@ (8006ab0 <prvGetNextExpireTime+0x44>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e001      	b.n	8006aa0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	2000133c 	.word	0x2000133c

08006ab4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006abc:	f7ff fa72 	bl	8005fa4 <xTaskGetTickCount>
 8006ac0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8006af0 <prvSampleTimeNow+0x3c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d205      	bcs.n	8006ad8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006acc:	f000 f93a 	bl	8006d44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	e002      	b.n	8006ade <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ade:	4a04      	ldr	r2, [pc, #16]	@ (8006af0 <prvSampleTimeNow+0x3c>)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	2000134c 	.word	0x2000134c

08006af4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d812      	bhi.n	8006b40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	1ad2      	subs	r2, r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d302      	bcc.n	8006b2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	e01b      	b.n	8006b66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b2e:	4b10      	ldr	r3, [pc, #64]	@ (8006b70 <prvInsertTimerInActiveList+0x7c>)
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3304      	adds	r3, #4
 8006b36:	4619      	mov	r1, r3
 8006b38:	4610      	mov	r0, r2
 8006b3a:	f7fe fa1c 	bl	8004f76 <vListInsert>
 8006b3e:	e012      	b.n	8006b66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d206      	bcs.n	8006b56 <prvInsertTimerInActiveList+0x62>
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d302      	bcc.n	8006b56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b50:	2301      	movs	r3, #1
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	e007      	b.n	8006b66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b56:	4b07      	ldr	r3, [pc, #28]	@ (8006b74 <prvInsertTimerInActiveList+0x80>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4610      	mov	r0, r2
 8006b62:	f7fe fa08 	bl	8004f76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b66:	697b      	ldr	r3, [r7, #20]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	20001340 	.word	0x20001340
 8006b74:	2000133c 	.word	0x2000133c

08006b78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08e      	sub	sp, #56	@ 0x38
 8006b7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b7e:	e0ce      	b.n	8006d1e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	da19      	bge.n	8006bba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b86:	1d3b      	adds	r3, r7, #4
 8006b88:	3304      	adds	r3, #4
 8006b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10b      	bne.n	8006baa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	61fb      	str	r3, [r7, #28]
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop
 8006ba8:	e7fd      	b.n	8006ba6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bb0:	6850      	ldr	r0, [r2, #4]
 8006bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bb4:	6892      	ldr	r2, [r2, #8]
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f2c0 80ae 	blt.w	8006d1e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d004      	beq.n	8006bd8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe fa08 	bl	8004fe8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bd8:	463b      	mov	r3, r7
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff ff6a 	bl	8006ab4 <prvSampleTimeNow>
 8006be0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b09      	cmp	r3, #9
 8006be6:	f200 8097 	bhi.w	8006d18 <prvProcessReceivedCommands+0x1a0>
 8006bea:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf0 <prvProcessReceivedCommands+0x78>)
 8006bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf0:	08006c19 	.word	0x08006c19
 8006bf4:	08006c19 	.word	0x08006c19
 8006bf8:	08006c19 	.word	0x08006c19
 8006bfc:	08006c8f 	.word	0x08006c8f
 8006c00:	08006ca3 	.word	0x08006ca3
 8006c04:	08006cef 	.word	0x08006cef
 8006c08:	08006c19 	.word	0x08006c19
 8006c0c:	08006c19 	.word	0x08006c19
 8006c10:	08006c8f 	.word	0x08006c8f
 8006c14:	08006ca3 	.word	0x08006ca3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c1e:	f043 0301 	orr.w	r3, r3, #1
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	18d1      	adds	r1, r2, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c38:	f7ff ff5c 	bl	8006af4 <prvInsertTimerInActiveList>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d06c      	beq.n	8006d1c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c50:	f003 0304 	and.w	r3, r3, #4
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d061      	beq.n	8006d1c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	441a      	add	r2, r3
 8006c60:	2300      	movs	r3, #0
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	2300      	movs	r3, #0
 8006c66:	2100      	movs	r1, #0
 8006c68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c6a:	f7ff fe01 	bl	8006870 <xTimerGenericCommand>
 8006c6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d152      	bne.n	8006d1c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	61bb      	str	r3, [r7, #24]
}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
 8006c8c:	e7fd      	b.n	8006c8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c94:	f023 0301 	bic.w	r3, r3, #1
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006ca0:	e03d      	b.n	8006d1e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ca8:	f043 0301 	orr.w	r3, r3, #1
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10b      	bne.n	8006cda <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	617b      	str	r3, [r7, #20]
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop
 8006cd8:	e7fd      	b.n	8006cd6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce0:	18d1      	adds	r1, r2, r3
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ce8:	f7ff ff04 	bl	8006af4 <prvInsertTimerInActiveList>
					break;
 8006cec:	e017      	b.n	8006d1e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d103      	bne.n	8006d04 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006cfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cfe:	f000 fbeb 	bl	80074d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d02:	e00c      	b.n	8006d1e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006d16:	e002      	b.n	8006d1e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006d18:	bf00      	nop
 8006d1a:	e000      	b.n	8006d1e <prvProcessReceivedCommands+0x1a6>
					break;
 8006d1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d1e:	4b08      	ldr	r3, [pc, #32]	@ (8006d40 <prvProcessReceivedCommands+0x1c8>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	1d39      	adds	r1, r7, #4
 8006d24:	2200      	movs	r2, #0
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe fc32 	bl	8005590 <xQueueReceive>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f47f af26 	bne.w	8006b80 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop
 8006d38:	3730      	adds	r7, #48	@ 0x30
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20001344 	.word	0x20001344

08006d44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d4a:	e049      	b.n	8006de0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8006e08 <prvSwitchTimerLists+0xc4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d56:	4b2c      	ldr	r3, [pc, #176]	@ (8006e08 <prvSwitchTimerLists+0xc4>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	3304      	adds	r3, #4
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fe f93f 	bl	8004fe8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d02f      	beq.n	8006de0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4413      	add	r3, r2
 8006d88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d90e      	bls.n	8006db0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006e08 <prvSwitchTimerLists+0xc4>)
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3304      	adds	r3, #4
 8006da6:	4619      	mov	r1, r3
 8006da8:	4610      	mov	r0, r2
 8006daa:	f7fe f8e4 	bl	8004f76 <vListInsert>
 8006dae:	e017      	b.n	8006de0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006db0:	2300      	movs	r3, #0
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	2300      	movs	r3, #0
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	2100      	movs	r1, #0
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f7ff fd58 	bl	8006870 <xTimerGenericCommand>
 8006dc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10b      	bne.n	8006de0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	603b      	str	r3, [r7, #0]
}
 8006dda:	bf00      	nop
 8006ddc:	bf00      	nop
 8006dde:	e7fd      	b.n	8006ddc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006de0:	4b09      	ldr	r3, [pc, #36]	@ (8006e08 <prvSwitchTimerLists+0xc4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1b0      	bne.n	8006d4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006dea:	4b07      	ldr	r3, [pc, #28]	@ (8006e08 <prvSwitchTimerLists+0xc4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006df0:	4b06      	ldr	r3, [pc, #24]	@ (8006e0c <prvSwitchTimerLists+0xc8>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a04      	ldr	r2, [pc, #16]	@ (8006e08 <prvSwitchTimerLists+0xc4>)
 8006df6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006df8:	4a04      	ldr	r2, [pc, #16]	@ (8006e0c <prvSwitchTimerLists+0xc8>)
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	6013      	str	r3, [r2, #0]
}
 8006dfe:	bf00      	nop
 8006e00:	3718      	adds	r7, #24
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	2000133c 	.word	0x2000133c
 8006e0c:	20001340 	.word	0x20001340

08006e10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e16:	f000 f96f 	bl	80070f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e1a:	4b15      	ldr	r3, [pc, #84]	@ (8006e70 <prvCheckForValidListAndQueue+0x60>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d120      	bne.n	8006e64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e22:	4814      	ldr	r0, [pc, #80]	@ (8006e74 <prvCheckForValidListAndQueue+0x64>)
 8006e24:	f7fe f856 	bl	8004ed4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e28:	4813      	ldr	r0, [pc, #76]	@ (8006e78 <prvCheckForValidListAndQueue+0x68>)
 8006e2a:	f7fe f853 	bl	8004ed4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e2e:	4b13      	ldr	r3, [pc, #76]	@ (8006e7c <prvCheckForValidListAndQueue+0x6c>)
 8006e30:	4a10      	ldr	r2, [pc, #64]	@ (8006e74 <prvCheckForValidListAndQueue+0x64>)
 8006e32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e34:	4b12      	ldr	r3, [pc, #72]	@ (8006e80 <prvCheckForValidListAndQueue+0x70>)
 8006e36:	4a10      	ldr	r2, [pc, #64]	@ (8006e78 <prvCheckForValidListAndQueue+0x68>)
 8006e38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	4b11      	ldr	r3, [pc, #68]	@ (8006e84 <prvCheckForValidListAndQueue+0x74>)
 8006e40:	4a11      	ldr	r2, [pc, #68]	@ (8006e88 <prvCheckForValidListAndQueue+0x78>)
 8006e42:	2110      	movs	r1, #16
 8006e44:	200a      	movs	r0, #10
 8006e46:	f7fe f963 	bl	8005110 <xQueueGenericCreateStatic>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	4a08      	ldr	r2, [pc, #32]	@ (8006e70 <prvCheckForValidListAndQueue+0x60>)
 8006e4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e50:	4b07      	ldr	r3, [pc, #28]	@ (8006e70 <prvCheckForValidListAndQueue+0x60>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e58:	4b05      	ldr	r3, [pc, #20]	@ (8006e70 <prvCheckForValidListAndQueue+0x60>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	490b      	ldr	r1, [pc, #44]	@ (8006e8c <prvCheckForValidListAndQueue+0x7c>)
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe fd88 	bl	8005974 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e64:	f000 f97a 	bl	800715c <vPortExitCritical>
}
 8006e68:	bf00      	nop
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20001344 	.word	0x20001344
 8006e74:	20001314 	.word	0x20001314
 8006e78:	20001328 	.word	0x20001328
 8006e7c:	2000133c 	.word	0x2000133c
 8006e80:	20001340 	.word	0x20001340
 8006e84:	200013f0 	.word	0x200013f0
 8006e88:	20001350 	.word	0x20001350
 8006e8c:	0800be64 	.word	0x0800be64

08006e90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3b04      	subs	r3, #4
 8006ea0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3b04      	subs	r3, #4
 8006eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f023 0201 	bic.w	r2, r3, #1
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3b04      	subs	r3, #4
 8006ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8006ef4 <pxPortInitialiseStack+0x64>)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3b14      	subs	r3, #20
 8006eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3b04      	subs	r3, #4
 8006ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f06f 0202 	mvn.w	r2, #2
 8006ede:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	3b20      	subs	r3, #32
 8006ee4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	08006ef9 	.word	0x08006ef9

08006ef8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f02:	4b13      	ldr	r3, [pc, #76]	@ (8006f50 <prvTaskExitError+0x58>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0a:	d00b      	beq.n	8006f24 <prvTaskExitError+0x2c>
	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	60fb      	str	r3, [r7, #12]
}
 8006f1e:	bf00      	nop
 8006f20:	bf00      	nop
 8006f22:	e7fd      	b.n	8006f20 <prvTaskExitError+0x28>
	__asm volatile
 8006f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f28:	f383 8811 	msr	BASEPRI, r3
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	60bb      	str	r3, [r7, #8]
}
 8006f36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f38:	bf00      	nop
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d0fc      	beq.n	8006f3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f40:	bf00      	nop
 8006f42:	bf00      	nop
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	2000001c 	.word	0x2000001c
	...

08006f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f60:	4b07      	ldr	r3, [pc, #28]	@ (8006f80 <pxCurrentTCBConst2>)
 8006f62:	6819      	ldr	r1, [r3, #0]
 8006f64:	6808      	ldr	r0, [r1, #0]
 8006f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6a:	f380 8809 	msr	PSP, r0
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f04f 0000 	mov.w	r0, #0
 8006f76:	f380 8811 	msr	BASEPRI, r0
 8006f7a:	4770      	bx	lr
 8006f7c:	f3af 8000 	nop.w

08006f80 <pxCurrentTCBConst2>:
 8006f80:	20000e14 	.word	0x20000e14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop

08006f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f88:	4808      	ldr	r0, [pc, #32]	@ (8006fac <prvPortStartFirstTask+0x24>)
 8006f8a:	6800      	ldr	r0, [r0, #0]
 8006f8c:	6800      	ldr	r0, [r0, #0]
 8006f8e:	f380 8808 	msr	MSP, r0
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8814 	msr	CONTROL, r0
 8006f9a:	b662      	cpsie	i
 8006f9c:	b661      	cpsie	f
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	df00      	svc	0
 8006fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006faa:	bf00      	nop
 8006fac:	e000ed08 	.word	0xe000ed08

08006fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fb6:	4b47      	ldr	r3, [pc, #284]	@ (80070d4 <xPortStartScheduler+0x124>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a47      	ldr	r2, [pc, #284]	@ (80070d8 <xPortStartScheduler+0x128>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d10b      	bne.n	8006fd8 <xPortStartScheduler+0x28>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	613b      	str	r3, [r7, #16]
}
 8006fd2:	bf00      	nop
 8006fd4:	bf00      	nop
 8006fd6:	e7fd      	b.n	8006fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80070d4 <xPortStartScheduler+0x124>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80070dc <xPortStartScheduler+0x12c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d10b      	bne.n	8006ffa <xPortStartScheduler+0x4a>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	60fb      	str	r3, [r7, #12]
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	e7fd      	b.n	8006ff6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ffa:	4b39      	ldr	r3, [pc, #228]	@ (80070e0 <xPortStartScheduler+0x130>)
 8006ffc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	22ff      	movs	r2, #255	@ 0xff
 800700a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	b2db      	uxtb	r3, r3
 8007012:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007014:	78fb      	ldrb	r3, [r7, #3]
 8007016:	b2db      	uxtb	r3, r3
 8007018:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800701c:	b2da      	uxtb	r2, r3
 800701e:	4b31      	ldr	r3, [pc, #196]	@ (80070e4 <xPortStartScheduler+0x134>)
 8007020:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007022:	4b31      	ldr	r3, [pc, #196]	@ (80070e8 <xPortStartScheduler+0x138>)
 8007024:	2207      	movs	r2, #7
 8007026:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007028:	e009      	b.n	800703e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800702a:	4b2f      	ldr	r3, [pc, #188]	@ (80070e8 <xPortStartScheduler+0x138>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3b01      	subs	r3, #1
 8007030:	4a2d      	ldr	r2, [pc, #180]	@ (80070e8 <xPortStartScheduler+0x138>)
 8007032:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	b2db      	uxtb	r3, r3
 800703c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800703e:	78fb      	ldrb	r3, [r7, #3]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007046:	2b80      	cmp	r3, #128	@ 0x80
 8007048:	d0ef      	beq.n	800702a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800704a:	4b27      	ldr	r3, [pc, #156]	@ (80070e8 <xPortStartScheduler+0x138>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f1c3 0307 	rsb	r3, r3, #7
 8007052:	2b04      	cmp	r3, #4
 8007054:	d00b      	beq.n	800706e <xPortStartScheduler+0xbe>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	60bb      	str	r3, [r7, #8]
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	e7fd      	b.n	800706a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800706e:	4b1e      	ldr	r3, [pc, #120]	@ (80070e8 <xPortStartScheduler+0x138>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	4a1c      	ldr	r2, [pc, #112]	@ (80070e8 <xPortStartScheduler+0x138>)
 8007076:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007078:	4b1b      	ldr	r3, [pc, #108]	@ (80070e8 <xPortStartScheduler+0x138>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007080:	4a19      	ldr	r2, [pc, #100]	@ (80070e8 <xPortStartScheduler+0x138>)
 8007082:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	b2da      	uxtb	r2, r3
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800708c:	4b17      	ldr	r3, [pc, #92]	@ (80070ec <xPortStartScheduler+0x13c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a16      	ldr	r2, [pc, #88]	@ (80070ec <xPortStartScheduler+0x13c>)
 8007092:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007096:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007098:	4b14      	ldr	r3, [pc, #80]	@ (80070ec <xPortStartScheduler+0x13c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a13      	ldr	r2, [pc, #76]	@ (80070ec <xPortStartScheduler+0x13c>)
 800709e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80070a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070a4:	f000 f8da 	bl	800725c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070a8:	4b11      	ldr	r3, [pc, #68]	@ (80070f0 <xPortStartScheduler+0x140>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070ae:	f000 f8f9 	bl	80072a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070b2:	4b10      	ldr	r3, [pc, #64]	@ (80070f4 <xPortStartScheduler+0x144>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a0f      	ldr	r2, [pc, #60]	@ (80070f4 <xPortStartScheduler+0x144>)
 80070b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80070bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070be:	f7ff ff63 	bl	8006f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070c2:	f7ff f839 	bl	8006138 <vTaskSwitchContext>
	prvTaskExitError();
 80070c6:	f7ff ff17 	bl	8006ef8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	e000ed00 	.word	0xe000ed00
 80070d8:	410fc271 	.word	0x410fc271
 80070dc:	410fc270 	.word	0x410fc270
 80070e0:	e000e400 	.word	0xe000e400
 80070e4:	20001440 	.word	0x20001440
 80070e8:	20001444 	.word	0x20001444
 80070ec:	e000ed20 	.word	0xe000ed20
 80070f0:	2000001c 	.word	0x2000001c
 80070f4:	e000ef34 	.word	0xe000ef34

080070f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	607b      	str	r3, [r7, #4]
}
 8007110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007112:	4b10      	ldr	r3, [pc, #64]	@ (8007154 <vPortEnterCritical+0x5c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3301      	adds	r3, #1
 8007118:	4a0e      	ldr	r2, [pc, #56]	@ (8007154 <vPortEnterCritical+0x5c>)
 800711a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800711c:	4b0d      	ldr	r3, [pc, #52]	@ (8007154 <vPortEnterCritical+0x5c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d110      	bne.n	8007146 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007124:	4b0c      	ldr	r3, [pc, #48]	@ (8007158 <vPortEnterCritical+0x60>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00b      	beq.n	8007146 <vPortEnterCritical+0x4e>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	603b      	str	r3, [r7, #0]
}
 8007140:	bf00      	nop
 8007142:	bf00      	nop
 8007144:	e7fd      	b.n	8007142 <vPortEnterCritical+0x4a>
	}
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	2000001c 	.word	0x2000001c
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007162:	4b12      	ldr	r3, [pc, #72]	@ (80071ac <vPortExitCritical+0x50>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10b      	bne.n	8007182 <vPortExitCritical+0x26>
	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	607b      	str	r3, [r7, #4]
}
 800717c:	bf00      	nop
 800717e:	bf00      	nop
 8007180:	e7fd      	b.n	800717e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007182:	4b0a      	ldr	r3, [pc, #40]	@ (80071ac <vPortExitCritical+0x50>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3b01      	subs	r3, #1
 8007188:	4a08      	ldr	r2, [pc, #32]	@ (80071ac <vPortExitCritical+0x50>)
 800718a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800718c:	4b07      	ldr	r3, [pc, #28]	@ (80071ac <vPortExitCritical+0x50>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d105      	bne.n	80071a0 <vPortExitCritical+0x44>
 8007194:	2300      	movs	r3, #0
 8007196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	f383 8811 	msr	BASEPRI, r3
}
 800719e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	2000001c 	.word	0x2000001c

080071b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071b0:	f3ef 8009 	mrs	r0, PSP
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	4b15      	ldr	r3, [pc, #84]	@ (8007210 <pxCurrentTCBConst>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	f01e 0f10 	tst.w	lr, #16
 80071c0:	bf08      	it	eq
 80071c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ca:	6010      	str	r0, [r2, #0]
 80071cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80071d4:	f380 8811 	msr	BASEPRI, r0
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f7fe ffaa 	bl	8006138 <vTaskSwitchContext>
 80071e4:	f04f 0000 	mov.w	r0, #0
 80071e8:	f380 8811 	msr	BASEPRI, r0
 80071ec:	bc09      	pop	{r0, r3}
 80071ee:	6819      	ldr	r1, [r3, #0]
 80071f0:	6808      	ldr	r0, [r1, #0]
 80071f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f6:	f01e 0f10 	tst.w	lr, #16
 80071fa:	bf08      	it	eq
 80071fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007200:	f380 8809 	msr	PSP, r0
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	f3af 8000 	nop.w

08007210 <pxCurrentTCBConst>:
 8007210:	20000e14 	.word	0x20000e14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop

08007218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	607b      	str	r3, [r7, #4]
}
 8007230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007232:	f7fe fec7 	bl	8005fc4 <xTaskIncrementTick>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800723c:	4b06      	ldr	r3, [pc, #24]	@ (8007258 <xPortSysTickHandler+0x40>)
 800723e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	2300      	movs	r3, #0
 8007246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f383 8811 	msr	BASEPRI, r3
}
 800724e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007250:	bf00      	nop
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800725c:	b480      	push	{r7}
 800725e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007260:	4b0b      	ldr	r3, [pc, #44]	@ (8007290 <vPortSetupTimerInterrupt+0x34>)
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007266:	4b0b      	ldr	r3, [pc, #44]	@ (8007294 <vPortSetupTimerInterrupt+0x38>)
 8007268:	2200      	movs	r2, #0
 800726a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800726c:	4b0a      	ldr	r3, [pc, #40]	@ (8007298 <vPortSetupTimerInterrupt+0x3c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a0a      	ldr	r2, [pc, #40]	@ (800729c <vPortSetupTimerInterrupt+0x40>)
 8007272:	fba2 2303 	umull	r2, r3, r2, r3
 8007276:	099b      	lsrs	r3, r3, #6
 8007278:	4a09      	ldr	r2, [pc, #36]	@ (80072a0 <vPortSetupTimerInterrupt+0x44>)
 800727a:	3b01      	subs	r3, #1
 800727c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800727e:	4b04      	ldr	r3, [pc, #16]	@ (8007290 <vPortSetupTimerInterrupt+0x34>)
 8007280:	2207      	movs	r2, #7
 8007282:	601a      	str	r2, [r3, #0]
}
 8007284:	bf00      	nop
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	e000e010 	.word	0xe000e010
 8007294:	e000e018 	.word	0xe000e018
 8007298:	20000010 	.word	0x20000010
 800729c:	10624dd3 	.word	0x10624dd3
 80072a0:	e000e014 	.word	0xe000e014

080072a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80072b4 <vPortEnableVFP+0x10>
 80072a8:	6801      	ldr	r1, [r0, #0]
 80072aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80072ae:	6001      	str	r1, [r0, #0]
 80072b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072b2:	bf00      	nop
 80072b4:	e000ed88 	.word	0xe000ed88

080072b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072be:	f3ef 8305 	mrs	r3, IPSR
 80072c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b0f      	cmp	r3, #15
 80072c8:	d915      	bls.n	80072f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072ca:	4a18      	ldr	r2, [pc, #96]	@ (800732c <vPortValidateInterruptPriority+0x74>)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072d4:	4b16      	ldr	r3, [pc, #88]	@ (8007330 <vPortValidateInterruptPriority+0x78>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	7afa      	ldrb	r2, [r7, #11]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d20b      	bcs.n	80072f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	607b      	str	r3, [r7, #4]
}
 80072f0:	bf00      	nop
 80072f2:	bf00      	nop
 80072f4:	e7fd      	b.n	80072f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80072f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007334 <vPortValidateInterruptPriority+0x7c>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007338 <vPortValidateInterruptPriority+0x80>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d90b      	bls.n	800731e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	603b      	str	r3, [r7, #0]
}
 8007318:	bf00      	nop
 800731a:	bf00      	nop
 800731c:	e7fd      	b.n	800731a <vPortValidateInterruptPriority+0x62>
	}
 800731e:	bf00      	nop
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	e000e3f0 	.word	0xe000e3f0
 8007330:	20001440 	.word	0x20001440
 8007334:	e000ed0c 	.word	0xe000ed0c
 8007338:	20001444 	.word	0x20001444

0800733c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08a      	sub	sp, #40	@ 0x28
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007344:	2300      	movs	r3, #0
 8007346:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007348:	f7fe fd80 	bl	8005e4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800734c:	4b5c      	ldr	r3, [pc, #368]	@ (80074c0 <pvPortMalloc+0x184>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007354:	f000 f924 	bl	80075a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007358:	4b5a      	ldr	r3, [pc, #360]	@ (80074c4 <pvPortMalloc+0x188>)
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4013      	ands	r3, r2
 8007360:	2b00      	cmp	r3, #0
 8007362:	f040 8095 	bne.w	8007490 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d01e      	beq.n	80073aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800736c:	2208      	movs	r2, #8
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4413      	add	r3, r2
 8007372:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	2b00      	cmp	r3, #0
 800737c:	d015      	beq.n	80073aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f023 0307 	bic.w	r3, r3, #7
 8007384:	3308      	adds	r3, #8
 8007386:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f003 0307 	and.w	r3, r3, #7
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00b      	beq.n	80073aa <pvPortMalloc+0x6e>
	__asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	617b      	str	r3, [r7, #20]
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop
 80073a8:	e7fd      	b.n	80073a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d06f      	beq.n	8007490 <pvPortMalloc+0x154>
 80073b0:	4b45      	ldr	r3, [pc, #276]	@ (80074c8 <pvPortMalloc+0x18c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d86a      	bhi.n	8007490 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073ba:	4b44      	ldr	r3, [pc, #272]	@ (80074cc <pvPortMalloc+0x190>)
 80073bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073be:	4b43      	ldr	r3, [pc, #268]	@ (80074cc <pvPortMalloc+0x190>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073c4:	e004      	b.n	80073d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d903      	bls.n	80073e2 <pvPortMalloc+0xa6>
 80073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1f1      	bne.n	80073c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073e2:	4b37      	ldr	r3, [pc, #220]	@ (80074c0 <pvPortMalloc+0x184>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d051      	beq.n	8007490 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2208      	movs	r2, #8
 80073f2:	4413      	add	r3, r2
 80073f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	1ad2      	subs	r2, r2, r3
 8007406:	2308      	movs	r3, #8
 8007408:	005b      	lsls	r3, r3, #1
 800740a:	429a      	cmp	r2, r3
 800740c:	d920      	bls.n	8007450 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800740e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4413      	add	r3, r2
 8007414:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00b      	beq.n	8007438 <pvPortMalloc+0xfc>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	613b      	str	r3, [r7, #16]
}
 8007432:	bf00      	nop
 8007434:	bf00      	nop
 8007436:	e7fd      	b.n	8007434 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	1ad2      	subs	r2, r2, r3
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800744a:	69b8      	ldr	r0, [r7, #24]
 800744c:	f000 f90a 	bl	8007664 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007450:	4b1d      	ldr	r3, [pc, #116]	@ (80074c8 <pvPortMalloc+0x18c>)
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	4a1b      	ldr	r2, [pc, #108]	@ (80074c8 <pvPortMalloc+0x18c>)
 800745c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800745e:	4b1a      	ldr	r3, [pc, #104]	@ (80074c8 <pvPortMalloc+0x18c>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	4b1b      	ldr	r3, [pc, #108]	@ (80074d0 <pvPortMalloc+0x194>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d203      	bcs.n	8007472 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800746a:	4b17      	ldr	r3, [pc, #92]	@ (80074c8 <pvPortMalloc+0x18c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a18      	ldr	r2, [pc, #96]	@ (80074d0 <pvPortMalloc+0x194>)
 8007470:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	4b13      	ldr	r3, [pc, #76]	@ (80074c4 <pvPortMalloc+0x188>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	431a      	orrs	r2, r3
 800747c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007482:	2200      	movs	r2, #0
 8007484:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007486:	4b13      	ldr	r3, [pc, #76]	@ (80074d4 <pvPortMalloc+0x198>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3301      	adds	r3, #1
 800748c:	4a11      	ldr	r2, [pc, #68]	@ (80074d4 <pvPortMalloc+0x198>)
 800748e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007490:	f7fe fcea 	bl	8005e68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00b      	beq.n	80074b6 <pvPortMalloc+0x17a>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	60fb      	str	r3, [r7, #12]
}
 80074b0:	bf00      	nop
 80074b2:	bf00      	nop
 80074b4:	e7fd      	b.n	80074b2 <pvPortMalloc+0x176>
	return pvReturn;
 80074b6:	69fb      	ldr	r3, [r7, #28]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3728      	adds	r7, #40	@ 0x28
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20005050 	.word	0x20005050
 80074c4:	20005064 	.word	0x20005064
 80074c8:	20005054 	.word	0x20005054
 80074cc:	20005048 	.word	0x20005048
 80074d0:	20005058 	.word	0x20005058
 80074d4:	2000505c 	.word	0x2000505c

080074d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d04f      	beq.n	800758a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074ea:	2308      	movs	r3, #8
 80074ec:	425b      	negs	r3, r3
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4413      	add	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	4b25      	ldr	r3, [pc, #148]	@ (8007594 <vPortFree+0xbc>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4013      	ands	r3, r2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10b      	bne.n	800751e <vPortFree+0x46>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	60fb      	str	r3, [r7, #12]
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	e7fd      	b.n	800751a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00b      	beq.n	800753e <vPortFree+0x66>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	60bb      	str	r3, [r7, #8]
}
 8007538:	bf00      	nop
 800753a:	bf00      	nop
 800753c:	e7fd      	b.n	800753a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	4b14      	ldr	r3, [pc, #80]	@ (8007594 <vPortFree+0xbc>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4013      	ands	r3, r2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01e      	beq.n	800758a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d11a      	bne.n	800758a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	4b0e      	ldr	r3, [pc, #56]	@ (8007594 <vPortFree+0xbc>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	43db      	mvns	r3, r3
 800755e:	401a      	ands	r2, r3
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007564:	f7fe fc72 	bl	8005e4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	4b0a      	ldr	r3, [pc, #40]	@ (8007598 <vPortFree+0xc0>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4413      	add	r3, r2
 8007572:	4a09      	ldr	r2, [pc, #36]	@ (8007598 <vPortFree+0xc0>)
 8007574:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007576:	6938      	ldr	r0, [r7, #16]
 8007578:	f000 f874 	bl	8007664 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800757c:	4b07      	ldr	r3, [pc, #28]	@ (800759c <vPortFree+0xc4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3301      	adds	r3, #1
 8007582:	4a06      	ldr	r2, [pc, #24]	@ (800759c <vPortFree+0xc4>)
 8007584:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007586:	f7fe fc6f 	bl	8005e68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800758a:	bf00      	nop
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20005064 	.word	0x20005064
 8007598:	20005054 	.word	0x20005054
 800759c:	20005060 	.word	0x20005060

080075a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80075aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075ac:	4b27      	ldr	r3, [pc, #156]	@ (800764c <prvHeapInit+0xac>)
 80075ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00c      	beq.n	80075d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3307      	adds	r3, #7
 80075be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 0307 	bic.w	r3, r3, #7
 80075c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	4a1f      	ldr	r2, [pc, #124]	@ (800764c <prvHeapInit+0xac>)
 80075d0:	4413      	add	r3, r2
 80075d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007650 <prvHeapInit+0xb0>)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075de:	4b1c      	ldr	r3, [pc, #112]	@ (8007650 <prvHeapInit+0xb0>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	4413      	add	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075ec:	2208      	movs	r2, #8
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	1a9b      	subs	r3, r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0307 	bic.w	r3, r3, #7
 80075fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4a15      	ldr	r2, [pc, #84]	@ (8007654 <prvHeapInit+0xb4>)
 8007600:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007602:	4b14      	ldr	r3, [pc, #80]	@ (8007654 <prvHeapInit+0xb4>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2200      	movs	r2, #0
 8007608:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800760a:	4b12      	ldr	r3, [pc, #72]	@ (8007654 <prvHeapInit+0xb4>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	1ad2      	subs	r2, r2, r3
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007620:	4b0c      	ldr	r3, [pc, #48]	@ (8007654 <prvHeapInit+0xb4>)
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	4a0a      	ldr	r2, [pc, #40]	@ (8007658 <prvHeapInit+0xb8>)
 800762e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	4a09      	ldr	r2, [pc, #36]	@ (800765c <prvHeapInit+0xbc>)
 8007636:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007638:	4b09      	ldr	r3, [pc, #36]	@ (8007660 <prvHeapInit+0xc0>)
 800763a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800763e:	601a      	str	r2, [r3, #0]
}
 8007640:	bf00      	nop
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	20001448 	.word	0x20001448
 8007650:	20005048 	.word	0x20005048
 8007654:	20005050 	.word	0x20005050
 8007658:	20005058 	.word	0x20005058
 800765c:	20005054 	.word	0x20005054
 8007660:	20005064 	.word	0x20005064

08007664 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800766c:	4b28      	ldr	r3, [pc, #160]	@ (8007710 <prvInsertBlockIntoFreeList+0xac>)
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	e002      	b.n	8007678 <prvInsertBlockIntoFreeList+0x14>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	429a      	cmp	r2, r3
 8007680:	d8f7      	bhi.n	8007672 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	4413      	add	r3, r2
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	429a      	cmp	r2, r3
 8007692:	d108      	bne.n	80076a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	441a      	add	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	441a      	add	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d118      	bne.n	80076ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	4b15      	ldr	r3, [pc, #84]	@ (8007714 <prvInsertBlockIntoFreeList+0xb0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d00d      	beq.n	80076e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685a      	ldr	r2, [r3, #4]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	441a      	add	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	e008      	b.n	80076f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007714 <prvInsertBlockIntoFreeList+0xb0>)
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	e003      	b.n	80076f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d002      	beq.n	8007702 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007702:	bf00      	nop
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	20005048 	.word	0x20005048
 8007714:	20005050 	.word	0x20005050

08007718 <__cvt>:
 8007718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800771c:	ec57 6b10 	vmov	r6, r7, d0
 8007720:	2f00      	cmp	r7, #0
 8007722:	460c      	mov	r4, r1
 8007724:	4619      	mov	r1, r3
 8007726:	463b      	mov	r3, r7
 8007728:	bfbb      	ittet	lt
 800772a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800772e:	461f      	movlt	r7, r3
 8007730:	2300      	movge	r3, #0
 8007732:	232d      	movlt	r3, #45	@ 0x2d
 8007734:	700b      	strb	r3, [r1, #0]
 8007736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007738:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800773c:	4691      	mov	r9, r2
 800773e:	f023 0820 	bic.w	r8, r3, #32
 8007742:	bfbc      	itt	lt
 8007744:	4632      	movlt	r2, r6
 8007746:	4616      	movlt	r6, r2
 8007748:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800774c:	d005      	beq.n	800775a <__cvt+0x42>
 800774e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007752:	d100      	bne.n	8007756 <__cvt+0x3e>
 8007754:	3401      	adds	r4, #1
 8007756:	2102      	movs	r1, #2
 8007758:	e000      	b.n	800775c <__cvt+0x44>
 800775a:	2103      	movs	r1, #3
 800775c:	ab03      	add	r3, sp, #12
 800775e:	9301      	str	r3, [sp, #4]
 8007760:	ab02      	add	r3, sp, #8
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	ec47 6b10 	vmov	d0, r6, r7
 8007768:	4653      	mov	r3, sl
 800776a:	4622      	mov	r2, r4
 800776c:	f001 f884 	bl	8008878 <_dtoa_r>
 8007770:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007774:	4605      	mov	r5, r0
 8007776:	d119      	bne.n	80077ac <__cvt+0x94>
 8007778:	f019 0f01 	tst.w	r9, #1
 800777c:	d00e      	beq.n	800779c <__cvt+0x84>
 800777e:	eb00 0904 	add.w	r9, r0, r4
 8007782:	2200      	movs	r2, #0
 8007784:	2300      	movs	r3, #0
 8007786:	4630      	mov	r0, r6
 8007788:	4639      	mov	r1, r7
 800778a:	f7f9 f9bd 	bl	8000b08 <__aeabi_dcmpeq>
 800778e:	b108      	cbz	r0, 8007794 <__cvt+0x7c>
 8007790:	f8cd 900c 	str.w	r9, [sp, #12]
 8007794:	2230      	movs	r2, #48	@ 0x30
 8007796:	9b03      	ldr	r3, [sp, #12]
 8007798:	454b      	cmp	r3, r9
 800779a:	d31e      	bcc.n	80077da <__cvt+0xc2>
 800779c:	9b03      	ldr	r3, [sp, #12]
 800779e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077a0:	1b5b      	subs	r3, r3, r5
 80077a2:	4628      	mov	r0, r5
 80077a4:	6013      	str	r3, [r2, #0]
 80077a6:	b004      	add	sp, #16
 80077a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80077b0:	eb00 0904 	add.w	r9, r0, r4
 80077b4:	d1e5      	bne.n	8007782 <__cvt+0x6a>
 80077b6:	7803      	ldrb	r3, [r0, #0]
 80077b8:	2b30      	cmp	r3, #48	@ 0x30
 80077ba:	d10a      	bne.n	80077d2 <__cvt+0xba>
 80077bc:	2200      	movs	r2, #0
 80077be:	2300      	movs	r3, #0
 80077c0:	4630      	mov	r0, r6
 80077c2:	4639      	mov	r1, r7
 80077c4:	f7f9 f9a0 	bl	8000b08 <__aeabi_dcmpeq>
 80077c8:	b918      	cbnz	r0, 80077d2 <__cvt+0xba>
 80077ca:	f1c4 0401 	rsb	r4, r4, #1
 80077ce:	f8ca 4000 	str.w	r4, [sl]
 80077d2:	f8da 3000 	ldr.w	r3, [sl]
 80077d6:	4499      	add	r9, r3
 80077d8:	e7d3      	b.n	8007782 <__cvt+0x6a>
 80077da:	1c59      	adds	r1, r3, #1
 80077dc:	9103      	str	r1, [sp, #12]
 80077de:	701a      	strb	r2, [r3, #0]
 80077e0:	e7d9      	b.n	8007796 <__cvt+0x7e>

080077e2 <__exponent>:
 80077e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077e4:	2900      	cmp	r1, #0
 80077e6:	bfba      	itte	lt
 80077e8:	4249      	neglt	r1, r1
 80077ea:	232d      	movlt	r3, #45	@ 0x2d
 80077ec:	232b      	movge	r3, #43	@ 0x2b
 80077ee:	2909      	cmp	r1, #9
 80077f0:	7002      	strb	r2, [r0, #0]
 80077f2:	7043      	strb	r3, [r0, #1]
 80077f4:	dd29      	ble.n	800784a <__exponent+0x68>
 80077f6:	f10d 0307 	add.w	r3, sp, #7
 80077fa:	461d      	mov	r5, r3
 80077fc:	270a      	movs	r7, #10
 80077fe:	461a      	mov	r2, r3
 8007800:	fbb1 f6f7 	udiv	r6, r1, r7
 8007804:	fb07 1416 	mls	r4, r7, r6, r1
 8007808:	3430      	adds	r4, #48	@ 0x30
 800780a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800780e:	460c      	mov	r4, r1
 8007810:	2c63      	cmp	r4, #99	@ 0x63
 8007812:	f103 33ff 	add.w	r3, r3, #4294967295
 8007816:	4631      	mov	r1, r6
 8007818:	dcf1      	bgt.n	80077fe <__exponent+0x1c>
 800781a:	3130      	adds	r1, #48	@ 0x30
 800781c:	1e94      	subs	r4, r2, #2
 800781e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007822:	1c41      	adds	r1, r0, #1
 8007824:	4623      	mov	r3, r4
 8007826:	42ab      	cmp	r3, r5
 8007828:	d30a      	bcc.n	8007840 <__exponent+0x5e>
 800782a:	f10d 0309 	add.w	r3, sp, #9
 800782e:	1a9b      	subs	r3, r3, r2
 8007830:	42ac      	cmp	r4, r5
 8007832:	bf88      	it	hi
 8007834:	2300      	movhi	r3, #0
 8007836:	3302      	adds	r3, #2
 8007838:	4403      	add	r3, r0
 800783a:	1a18      	subs	r0, r3, r0
 800783c:	b003      	add	sp, #12
 800783e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007840:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007844:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007848:	e7ed      	b.n	8007826 <__exponent+0x44>
 800784a:	2330      	movs	r3, #48	@ 0x30
 800784c:	3130      	adds	r1, #48	@ 0x30
 800784e:	7083      	strb	r3, [r0, #2]
 8007850:	70c1      	strb	r1, [r0, #3]
 8007852:	1d03      	adds	r3, r0, #4
 8007854:	e7f1      	b.n	800783a <__exponent+0x58>
	...

08007858 <_printf_float>:
 8007858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	b08d      	sub	sp, #52	@ 0x34
 800785e:	460c      	mov	r4, r1
 8007860:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007864:	4616      	mov	r6, r2
 8007866:	461f      	mov	r7, r3
 8007868:	4605      	mov	r5, r0
 800786a:	f000 feef 	bl	800864c <_localeconv_r>
 800786e:	6803      	ldr	r3, [r0, #0]
 8007870:	9304      	str	r3, [sp, #16]
 8007872:	4618      	mov	r0, r3
 8007874:	f7f8 fd1c 	bl	80002b0 <strlen>
 8007878:	2300      	movs	r3, #0
 800787a:	930a      	str	r3, [sp, #40]	@ 0x28
 800787c:	f8d8 3000 	ldr.w	r3, [r8]
 8007880:	9005      	str	r0, [sp, #20]
 8007882:	3307      	adds	r3, #7
 8007884:	f023 0307 	bic.w	r3, r3, #7
 8007888:	f103 0208 	add.w	r2, r3, #8
 800788c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007890:	f8d4 b000 	ldr.w	fp, [r4]
 8007894:	f8c8 2000 	str.w	r2, [r8]
 8007898:	e9d3 8900 	ldrd	r8, r9, [r3]
 800789c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80078a0:	9307      	str	r3, [sp, #28]
 80078a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80078a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80078aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078ae:	4b9c      	ldr	r3, [pc, #624]	@ (8007b20 <_printf_float+0x2c8>)
 80078b0:	f04f 32ff 	mov.w	r2, #4294967295
 80078b4:	f7f9 f95a 	bl	8000b6c <__aeabi_dcmpun>
 80078b8:	bb70      	cbnz	r0, 8007918 <_printf_float+0xc0>
 80078ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078be:	4b98      	ldr	r3, [pc, #608]	@ (8007b20 <_printf_float+0x2c8>)
 80078c0:	f04f 32ff 	mov.w	r2, #4294967295
 80078c4:	f7f9 f934 	bl	8000b30 <__aeabi_dcmple>
 80078c8:	bb30      	cbnz	r0, 8007918 <_printf_float+0xc0>
 80078ca:	2200      	movs	r2, #0
 80078cc:	2300      	movs	r3, #0
 80078ce:	4640      	mov	r0, r8
 80078d0:	4649      	mov	r1, r9
 80078d2:	f7f9 f923 	bl	8000b1c <__aeabi_dcmplt>
 80078d6:	b110      	cbz	r0, 80078de <_printf_float+0x86>
 80078d8:	232d      	movs	r3, #45	@ 0x2d
 80078da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078de:	4a91      	ldr	r2, [pc, #580]	@ (8007b24 <_printf_float+0x2cc>)
 80078e0:	4b91      	ldr	r3, [pc, #580]	@ (8007b28 <_printf_float+0x2d0>)
 80078e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80078e6:	bf94      	ite	ls
 80078e8:	4690      	movls	r8, r2
 80078ea:	4698      	movhi	r8, r3
 80078ec:	2303      	movs	r3, #3
 80078ee:	6123      	str	r3, [r4, #16]
 80078f0:	f02b 0304 	bic.w	r3, fp, #4
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	f04f 0900 	mov.w	r9, #0
 80078fa:	9700      	str	r7, [sp, #0]
 80078fc:	4633      	mov	r3, r6
 80078fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007900:	4621      	mov	r1, r4
 8007902:	4628      	mov	r0, r5
 8007904:	f000 f9d2 	bl	8007cac <_printf_common>
 8007908:	3001      	adds	r0, #1
 800790a:	f040 808d 	bne.w	8007a28 <_printf_float+0x1d0>
 800790e:	f04f 30ff 	mov.w	r0, #4294967295
 8007912:	b00d      	add	sp, #52	@ 0x34
 8007914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007918:	4642      	mov	r2, r8
 800791a:	464b      	mov	r3, r9
 800791c:	4640      	mov	r0, r8
 800791e:	4649      	mov	r1, r9
 8007920:	f7f9 f924 	bl	8000b6c <__aeabi_dcmpun>
 8007924:	b140      	cbz	r0, 8007938 <_printf_float+0xe0>
 8007926:	464b      	mov	r3, r9
 8007928:	2b00      	cmp	r3, #0
 800792a:	bfbc      	itt	lt
 800792c:	232d      	movlt	r3, #45	@ 0x2d
 800792e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007932:	4a7e      	ldr	r2, [pc, #504]	@ (8007b2c <_printf_float+0x2d4>)
 8007934:	4b7e      	ldr	r3, [pc, #504]	@ (8007b30 <_printf_float+0x2d8>)
 8007936:	e7d4      	b.n	80078e2 <_printf_float+0x8a>
 8007938:	6863      	ldr	r3, [r4, #4]
 800793a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800793e:	9206      	str	r2, [sp, #24]
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	d13b      	bne.n	80079bc <_printf_float+0x164>
 8007944:	2306      	movs	r3, #6
 8007946:	6063      	str	r3, [r4, #4]
 8007948:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800794c:	2300      	movs	r3, #0
 800794e:	6022      	str	r2, [r4, #0]
 8007950:	9303      	str	r3, [sp, #12]
 8007952:	ab0a      	add	r3, sp, #40	@ 0x28
 8007954:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007958:	ab09      	add	r3, sp, #36	@ 0x24
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	6861      	ldr	r1, [r4, #4]
 800795e:	ec49 8b10 	vmov	d0, r8, r9
 8007962:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007966:	4628      	mov	r0, r5
 8007968:	f7ff fed6 	bl	8007718 <__cvt>
 800796c:	9b06      	ldr	r3, [sp, #24]
 800796e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007970:	2b47      	cmp	r3, #71	@ 0x47
 8007972:	4680      	mov	r8, r0
 8007974:	d129      	bne.n	80079ca <_printf_float+0x172>
 8007976:	1cc8      	adds	r0, r1, #3
 8007978:	db02      	blt.n	8007980 <_printf_float+0x128>
 800797a:	6863      	ldr	r3, [r4, #4]
 800797c:	4299      	cmp	r1, r3
 800797e:	dd41      	ble.n	8007a04 <_printf_float+0x1ac>
 8007980:	f1aa 0a02 	sub.w	sl, sl, #2
 8007984:	fa5f fa8a 	uxtb.w	sl, sl
 8007988:	3901      	subs	r1, #1
 800798a:	4652      	mov	r2, sl
 800798c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007990:	9109      	str	r1, [sp, #36]	@ 0x24
 8007992:	f7ff ff26 	bl	80077e2 <__exponent>
 8007996:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007998:	1813      	adds	r3, r2, r0
 800799a:	2a01      	cmp	r2, #1
 800799c:	4681      	mov	r9, r0
 800799e:	6123      	str	r3, [r4, #16]
 80079a0:	dc02      	bgt.n	80079a8 <_printf_float+0x150>
 80079a2:	6822      	ldr	r2, [r4, #0]
 80079a4:	07d2      	lsls	r2, r2, #31
 80079a6:	d501      	bpl.n	80079ac <_printf_float+0x154>
 80079a8:	3301      	adds	r3, #1
 80079aa:	6123      	str	r3, [r4, #16]
 80079ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d0a2      	beq.n	80078fa <_printf_float+0xa2>
 80079b4:	232d      	movs	r3, #45	@ 0x2d
 80079b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079ba:	e79e      	b.n	80078fa <_printf_float+0xa2>
 80079bc:	9a06      	ldr	r2, [sp, #24]
 80079be:	2a47      	cmp	r2, #71	@ 0x47
 80079c0:	d1c2      	bne.n	8007948 <_printf_float+0xf0>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1c0      	bne.n	8007948 <_printf_float+0xf0>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e7bd      	b.n	8007946 <_printf_float+0xee>
 80079ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079ce:	d9db      	bls.n	8007988 <_printf_float+0x130>
 80079d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80079d4:	d118      	bne.n	8007a08 <_printf_float+0x1b0>
 80079d6:	2900      	cmp	r1, #0
 80079d8:	6863      	ldr	r3, [r4, #4]
 80079da:	dd0b      	ble.n	80079f4 <_printf_float+0x19c>
 80079dc:	6121      	str	r1, [r4, #16]
 80079de:	b913      	cbnz	r3, 80079e6 <_printf_float+0x18e>
 80079e0:	6822      	ldr	r2, [r4, #0]
 80079e2:	07d0      	lsls	r0, r2, #31
 80079e4:	d502      	bpl.n	80079ec <_printf_float+0x194>
 80079e6:	3301      	adds	r3, #1
 80079e8:	440b      	add	r3, r1
 80079ea:	6123      	str	r3, [r4, #16]
 80079ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80079ee:	f04f 0900 	mov.w	r9, #0
 80079f2:	e7db      	b.n	80079ac <_printf_float+0x154>
 80079f4:	b913      	cbnz	r3, 80079fc <_printf_float+0x1a4>
 80079f6:	6822      	ldr	r2, [r4, #0]
 80079f8:	07d2      	lsls	r2, r2, #31
 80079fa:	d501      	bpl.n	8007a00 <_printf_float+0x1a8>
 80079fc:	3302      	adds	r3, #2
 80079fe:	e7f4      	b.n	80079ea <_printf_float+0x192>
 8007a00:	2301      	movs	r3, #1
 8007a02:	e7f2      	b.n	80079ea <_printf_float+0x192>
 8007a04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007a08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a0a:	4299      	cmp	r1, r3
 8007a0c:	db05      	blt.n	8007a1a <_printf_float+0x1c2>
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	6121      	str	r1, [r4, #16]
 8007a12:	07d8      	lsls	r0, r3, #31
 8007a14:	d5ea      	bpl.n	80079ec <_printf_float+0x194>
 8007a16:	1c4b      	adds	r3, r1, #1
 8007a18:	e7e7      	b.n	80079ea <_printf_float+0x192>
 8007a1a:	2900      	cmp	r1, #0
 8007a1c:	bfd4      	ite	le
 8007a1e:	f1c1 0202 	rsble	r2, r1, #2
 8007a22:	2201      	movgt	r2, #1
 8007a24:	4413      	add	r3, r2
 8007a26:	e7e0      	b.n	80079ea <_printf_float+0x192>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	055a      	lsls	r2, r3, #21
 8007a2c:	d407      	bmi.n	8007a3e <_printf_float+0x1e6>
 8007a2e:	6923      	ldr	r3, [r4, #16]
 8007a30:	4642      	mov	r2, r8
 8007a32:	4631      	mov	r1, r6
 8007a34:	4628      	mov	r0, r5
 8007a36:	47b8      	blx	r7
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d12b      	bne.n	8007a94 <_printf_float+0x23c>
 8007a3c:	e767      	b.n	800790e <_printf_float+0xb6>
 8007a3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a42:	f240 80dd 	bls.w	8007c00 <_printf_float+0x3a8>
 8007a46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f7f9 f85b 	bl	8000b08 <__aeabi_dcmpeq>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d033      	beq.n	8007abe <_printf_float+0x266>
 8007a56:	4a37      	ldr	r2, [pc, #220]	@ (8007b34 <_printf_float+0x2dc>)
 8007a58:	2301      	movs	r3, #1
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b8      	blx	r7
 8007a60:	3001      	adds	r0, #1
 8007a62:	f43f af54 	beq.w	800790e <_printf_float+0xb6>
 8007a66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007a6a:	4543      	cmp	r3, r8
 8007a6c:	db02      	blt.n	8007a74 <_printf_float+0x21c>
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	07d8      	lsls	r0, r3, #31
 8007a72:	d50f      	bpl.n	8007a94 <_printf_float+0x23c>
 8007a74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a78:	4631      	mov	r1, r6
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	47b8      	blx	r7
 8007a7e:	3001      	adds	r0, #1
 8007a80:	f43f af45 	beq.w	800790e <_printf_float+0xb6>
 8007a84:	f04f 0900 	mov.w	r9, #0
 8007a88:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a8c:	f104 0a1a 	add.w	sl, r4, #26
 8007a90:	45c8      	cmp	r8, r9
 8007a92:	dc09      	bgt.n	8007aa8 <_printf_float+0x250>
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	079b      	lsls	r3, r3, #30
 8007a98:	f100 8103 	bmi.w	8007ca2 <_printf_float+0x44a>
 8007a9c:	68e0      	ldr	r0, [r4, #12]
 8007a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aa0:	4298      	cmp	r0, r3
 8007aa2:	bfb8      	it	lt
 8007aa4:	4618      	movlt	r0, r3
 8007aa6:	e734      	b.n	8007912 <_printf_float+0xba>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	4652      	mov	r2, sl
 8007aac:	4631      	mov	r1, r6
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b8      	blx	r7
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	f43f af2b 	beq.w	800790e <_printf_float+0xb6>
 8007ab8:	f109 0901 	add.w	r9, r9, #1
 8007abc:	e7e8      	b.n	8007a90 <_printf_float+0x238>
 8007abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	dc39      	bgt.n	8007b38 <_printf_float+0x2e0>
 8007ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8007b34 <_printf_float+0x2dc>)
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4628      	mov	r0, r5
 8007acc:	47b8      	blx	r7
 8007ace:	3001      	adds	r0, #1
 8007ad0:	f43f af1d 	beq.w	800790e <_printf_float+0xb6>
 8007ad4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007ad8:	ea59 0303 	orrs.w	r3, r9, r3
 8007adc:	d102      	bne.n	8007ae4 <_printf_float+0x28c>
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	07d9      	lsls	r1, r3, #31
 8007ae2:	d5d7      	bpl.n	8007a94 <_printf_float+0x23c>
 8007ae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ae8:	4631      	mov	r1, r6
 8007aea:	4628      	mov	r0, r5
 8007aec:	47b8      	blx	r7
 8007aee:	3001      	adds	r0, #1
 8007af0:	f43f af0d 	beq.w	800790e <_printf_float+0xb6>
 8007af4:	f04f 0a00 	mov.w	sl, #0
 8007af8:	f104 0b1a 	add.w	fp, r4, #26
 8007afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007afe:	425b      	negs	r3, r3
 8007b00:	4553      	cmp	r3, sl
 8007b02:	dc01      	bgt.n	8007b08 <_printf_float+0x2b0>
 8007b04:	464b      	mov	r3, r9
 8007b06:	e793      	b.n	8007a30 <_printf_float+0x1d8>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	465a      	mov	r2, fp
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	4628      	mov	r0, r5
 8007b10:	47b8      	blx	r7
 8007b12:	3001      	adds	r0, #1
 8007b14:	f43f aefb 	beq.w	800790e <_printf_float+0xb6>
 8007b18:	f10a 0a01 	add.w	sl, sl, #1
 8007b1c:	e7ee      	b.n	8007afc <_printf_float+0x2a4>
 8007b1e:	bf00      	nop
 8007b20:	7fefffff 	.word	0x7fefffff
 8007b24:	0800cc94 	.word	0x0800cc94
 8007b28:	0800cc98 	.word	0x0800cc98
 8007b2c:	0800cc9c 	.word	0x0800cc9c
 8007b30:	0800cca0 	.word	0x0800cca0
 8007b34:	0800cca4 	.word	0x0800cca4
 8007b38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b3e:	4553      	cmp	r3, sl
 8007b40:	bfa8      	it	ge
 8007b42:	4653      	movge	r3, sl
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	4699      	mov	r9, r3
 8007b48:	dc36      	bgt.n	8007bb8 <_printf_float+0x360>
 8007b4a:	f04f 0b00 	mov.w	fp, #0
 8007b4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b52:	f104 021a 	add.w	r2, r4, #26
 8007b56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b58:	9306      	str	r3, [sp, #24]
 8007b5a:	eba3 0309 	sub.w	r3, r3, r9
 8007b5e:	455b      	cmp	r3, fp
 8007b60:	dc31      	bgt.n	8007bc6 <_printf_float+0x36e>
 8007b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b64:	459a      	cmp	sl, r3
 8007b66:	dc3a      	bgt.n	8007bde <_printf_float+0x386>
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	07da      	lsls	r2, r3, #31
 8007b6c:	d437      	bmi.n	8007bde <_printf_float+0x386>
 8007b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b70:	ebaa 0903 	sub.w	r9, sl, r3
 8007b74:	9b06      	ldr	r3, [sp, #24]
 8007b76:	ebaa 0303 	sub.w	r3, sl, r3
 8007b7a:	4599      	cmp	r9, r3
 8007b7c:	bfa8      	it	ge
 8007b7e:	4699      	movge	r9, r3
 8007b80:	f1b9 0f00 	cmp.w	r9, #0
 8007b84:	dc33      	bgt.n	8007bee <_printf_float+0x396>
 8007b86:	f04f 0800 	mov.w	r8, #0
 8007b8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b8e:	f104 0b1a 	add.w	fp, r4, #26
 8007b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b94:	ebaa 0303 	sub.w	r3, sl, r3
 8007b98:	eba3 0309 	sub.w	r3, r3, r9
 8007b9c:	4543      	cmp	r3, r8
 8007b9e:	f77f af79 	ble.w	8007a94 <_printf_float+0x23c>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	465a      	mov	r2, fp
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	4628      	mov	r0, r5
 8007baa:	47b8      	blx	r7
 8007bac:	3001      	adds	r0, #1
 8007bae:	f43f aeae 	beq.w	800790e <_printf_float+0xb6>
 8007bb2:	f108 0801 	add.w	r8, r8, #1
 8007bb6:	e7ec      	b.n	8007b92 <_printf_float+0x33a>
 8007bb8:	4642      	mov	r2, r8
 8007bba:	4631      	mov	r1, r6
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	47b8      	blx	r7
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d1c2      	bne.n	8007b4a <_printf_float+0x2f2>
 8007bc4:	e6a3      	b.n	800790e <_printf_float+0xb6>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4628      	mov	r0, r5
 8007bcc:	9206      	str	r2, [sp, #24]
 8007bce:	47b8      	blx	r7
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	f43f ae9c 	beq.w	800790e <_printf_float+0xb6>
 8007bd6:	9a06      	ldr	r2, [sp, #24]
 8007bd8:	f10b 0b01 	add.w	fp, fp, #1
 8007bdc:	e7bb      	b.n	8007b56 <_printf_float+0x2fe>
 8007bde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007be2:	4631      	mov	r1, r6
 8007be4:	4628      	mov	r0, r5
 8007be6:	47b8      	blx	r7
 8007be8:	3001      	adds	r0, #1
 8007bea:	d1c0      	bne.n	8007b6e <_printf_float+0x316>
 8007bec:	e68f      	b.n	800790e <_printf_float+0xb6>
 8007bee:	9a06      	ldr	r2, [sp, #24]
 8007bf0:	464b      	mov	r3, r9
 8007bf2:	4442      	add	r2, r8
 8007bf4:	4631      	mov	r1, r6
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	47b8      	blx	r7
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d1c3      	bne.n	8007b86 <_printf_float+0x32e>
 8007bfe:	e686      	b.n	800790e <_printf_float+0xb6>
 8007c00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c04:	f1ba 0f01 	cmp.w	sl, #1
 8007c08:	dc01      	bgt.n	8007c0e <_printf_float+0x3b6>
 8007c0a:	07db      	lsls	r3, r3, #31
 8007c0c:	d536      	bpl.n	8007c7c <_printf_float+0x424>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	4642      	mov	r2, r8
 8007c12:	4631      	mov	r1, r6
 8007c14:	4628      	mov	r0, r5
 8007c16:	47b8      	blx	r7
 8007c18:	3001      	adds	r0, #1
 8007c1a:	f43f ae78 	beq.w	800790e <_printf_float+0xb6>
 8007c1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c22:	4631      	mov	r1, r6
 8007c24:	4628      	mov	r0, r5
 8007c26:	47b8      	blx	r7
 8007c28:	3001      	adds	r0, #1
 8007c2a:	f43f ae70 	beq.w	800790e <_printf_float+0xb6>
 8007c2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c32:	2200      	movs	r2, #0
 8007c34:	2300      	movs	r3, #0
 8007c36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c3a:	f7f8 ff65 	bl	8000b08 <__aeabi_dcmpeq>
 8007c3e:	b9c0      	cbnz	r0, 8007c72 <_printf_float+0x41a>
 8007c40:	4653      	mov	r3, sl
 8007c42:	f108 0201 	add.w	r2, r8, #1
 8007c46:	4631      	mov	r1, r6
 8007c48:	4628      	mov	r0, r5
 8007c4a:	47b8      	blx	r7
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d10c      	bne.n	8007c6a <_printf_float+0x412>
 8007c50:	e65d      	b.n	800790e <_printf_float+0xb6>
 8007c52:	2301      	movs	r3, #1
 8007c54:	465a      	mov	r2, fp
 8007c56:	4631      	mov	r1, r6
 8007c58:	4628      	mov	r0, r5
 8007c5a:	47b8      	blx	r7
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	f43f ae56 	beq.w	800790e <_printf_float+0xb6>
 8007c62:	f108 0801 	add.w	r8, r8, #1
 8007c66:	45d0      	cmp	r8, sl
 8007c68:	dbf3      	blt.n	8007c52 <_printf_float+0x3fa>
 8007c6a:	464b      	mov	r3, r9
 8007c6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c70:	e6df      	b.n	8007a32 <_printf_float+0x1da>
 8007c72:	f04f 0800 	mov.w	r8, #0
 8007c76:	f104 0b1a 	add.w	fp, r4, #26
 8007c7a:	e7f4      	b.n	8007c66 <_printf_float+0x40e>
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	4642      	mov	r2, r8
 8007c80:	e7e1      	b.n	8007c46 <_printf_float+0x3ee>
 8007c82:	2301      	movs	r3, #1
 8007c84:	464a      	mov	r2, r9
 8007c86:	4631      	mov	r1, r6
 8007c88:	4628      	mov	r0, r5
 8007c8a:	47b8      	blx	r7
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	f43f ae3e 	beq.w	800790e <_printf_float+0xb6>
 8007c92:	f108 0801 	add.w	r8, r8, #1
 8007c96:	68e3      	ldr	r3, [r4, #12]
 8007c98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c9a:	1a5b      	subs	r3, r3, r1
 8007c9c:	4543      	cmp	r3, r8
 8007c9e:	dcf0      	bgt.n	8007c82 <_printf_float+0x42a>
 8007ca0:	e6fc      	b.n	8007a9c <_printf_float+0x244>
 8007ca2:	f04f 0800 	mov.w	r8, #0
 8007ca6:	f104 0919 	add.w	r9, r4, #25
 8007caa:	e7f4      	b.n	8007c96 <_printf_float+0x43e>

08007cac <_printf_common>:
 8007cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb0:	4616      	mov	r6, r2
 8007cb2:	4698      	mov	r8, r3
 8007cb4:	688a      	ldr	r2, [r1, #8]
 8007cb6:	690b      	ldr	r3, [r1, #16]
 8007cb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	bfb8      	it	lt
 8007cc0:	4613      	movlt	r3, r2
 8007cc2:	6033      	str	r3, [r6, #0]
 8007cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cc8:	4607      	mov	r7, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	b10a      	cbz	r2, 8007cd2 <_printf_common+0x26>
 8007cce:	3301      	adds	r3, #1
 8007cd0:	6033      	str	r3, [r6, #0]
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	0699      	lsls	r1, r3, #26
 8007cd6:	bf42      	ittt	mi
 8007cd8:	6833      	ldrmi	r3, [r6, #0]
 8007cda:	3302      	addmi	r3, #2
 8007cdc:	6033      	strmi	r3, [r6, #0]
 8007cde:	6825      	ldr	r5, [r4, #0]
 8007ce0:	f015 0506 	ands.w	r5, r5, #6
 8007ce4:	d106      	bne.n	8007cf4 <_printf_common+0x48>
 8007ce6:	f104 0a19 	add.w	sl, r4, #25
 8007cea:	68e3      	ldr	r3, [r4, #12]
 8007cec:	6832      	ldr	r2, [r6, #0]
 8007cee:	1a9b      	subs	r3, r3, r2
 8007cf0:	42ab      	cmp	r3, r5
 8007cf2:	dc26      	bgt.n	8007d42 <_printf_common+0x96>
 8007cf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007cf8:	6822      	ldr	r2, [r4, #0]
 8007cfa:	3b00      	subs	r3, #0
 8007cfc:	bf18      	it	ne
 8007cfe:	2301      	movne	r3, #1
 8007d00:	0692      	lsls	r2, r2, #26
 8007d02:	d42b      	bmi.n	8007d5c <_printf_common+0xb0>
 8007d04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d08:	4641      	mov	r1, r8
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	47c8      	blx	r9
 8007d0e:	3001      	adds	r0, #1
 8007d10:	d01e      	beq.n	8007d50 <_printf_common+0xa4>
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	6922      	ldr	r2, [r4, #16]
 8007d16:	f003 0306 	and.w	r3, r3, #6
 8007d1a:	2b04      	cmp	r3, #4
 8007d1c:	bf02      	ittt	eq
 8007d1e:	68e5      	ldreq	r5, [r4, #12]
 8007d20:	6833      	ldreq	r3, [r6, #0]
 8007d22:	1aed      	subeq	r5, r5, r3
 8007d24:	68a3      	ldr	r3, [r4, #8]
 8007d26:	bf0c      	ite	eq
 8007d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d2c:	2500      	movne	r5, #0
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	bfc4      	itt	gt
 8007d32:	1a9b      	subgt	r3, r3, r2
 8007d34:	18ed      	addgt	r5, r5, r3
 8007d36:	2600      	movs	r6, #0
 8007d38:	341a      	adds	r4, #26
 8007d3a:	42b5      	cmp	r5, r6
 8007d3c:	d11a      	bne.n	8007d74 <_printf_common+0xc8>
 8007d3e:	2000      	movs	r0, #0
 8007d40:	e008      	b.n	8007d54 <_printf_common+0xa8>
 8007d42:	2301      	movs	r3, #1
 8007d44:	4652      	mov	r2, sl
 8007d46:	4641      	mov	r1, r8
 8007d48:	4638      	mov	r0, r7
 8007d4a:	47c8      	blx	r9
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	d103      	bne.n	8007d58 <_printf_common+0xac>
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d58:	3501      	adds	r5, #1
 8007d5a:	e7c6      	b.n	8007cea <_printf_common+0x3e>
 8007d5c:	18e1      	adds	r1, r4, r3
 8007d5e:	1c5a      	adds	r2, r3, #1
 8007d60:	2030      	movs	r0, #48	@ 0x30
 8007d62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d66:	4422      	add	r2, r4
 8007d68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d70:	3302      	adds	r3, #2
 8007d72:	e7c7      	b.n	8007d04 <_printf_common+0x58>
 8007d74:	2301      	movs	r3, #1
 8007d76:	4622      	mov	r2, r4
 8007d78:	4641      	mov	r1, r8
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	47c8      	blx	r9
 8007d7e:	3001      	adds	r0, #1
 8007d80:	d0e6      	beq.n	8007d50 <_printf_common+0xa4>
 8007d82:	3601      	adds	r6, #1
 8007d84:	e7d9      	b.n	8007d3a <_printf_common+0x8e>
	...

08007d88 <_printf_i>:
 8007d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d8c:	7e0f      	ldrb	r7, [r1, #24]
 8007d8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d90:	2f78      	cmp	r7, #120	@ 0x78
 8007d92:	4691      	mov	r9, r2
 8007d94:	4680      	mov	r8, r0
 8007d96:	460c      	mov	r4, r1
 8007d98:	469a      	mov	sl, r3
 8007d9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d9e:	d807      	bhi.n	8007db0 <_printf_i+0x28>
 8007da0:	2f62      	cmp	r7, #98	@ 0x62
 8007da2:	d80a      	bhi.n	8007dba <_printf_i+0x32>
 8007da4:	2f00      	cmp	r7, #0
 8007da6:	f000 80d2 	beq.w	8007f4e <_printf_i+0x1c6>
 8007daa:	2f58      	cmp	r7, #88	@ 0x58
 8007dac:	f000 80b9 	beq.w	8007f22 <_printf_i+0x19a>
 8007db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007db4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007db8:	e03a      	b.n	8007e30 <_printf_i+0xa8>
 8007dba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007dbe:	2b15      	cmp	r3, #21
 8007dc0:	d8f6      	bhi.n	8007db0 <_printf_i+0x28>
 8007dc2:	a101      	add	r1, pc, #4	@ (adr r1, 8007dc8 <_printf_i+0x40>)
 8007dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dc8:	08007e21 	.word	0x08007e21
 8007dcc:	08007e35 	.word	0x08007e35
 8007dd0:	08007db1 	.word	0x08007db1
 8007dd4:	08007db1 	.word	0x08007db1
 8007dd8:	08007db1 	.word	0x08007db1
 8007ddc:	08007db1 	.word	0x08007db1
 8007de0:	08007e35 	.word	0x08007e35
 8007de4:	08007db1 	.word	0x08007db1
 8007de8:	08007db1 	.word	0x08007db1
 8007dec:	08007db1 	.word	0x08007db1
 8007df0:	08007db1 	.word	0x08007db1
 8007df4:	08007f35 	.word	0x08007f35
 8007df8:	08007e5f 	.word	0x08007e5f
 8007dfc:	08007eef 	.word	0x08007eef
 8007e00:	08007db1 	.word	0x08007db1
 8007e04:	08007db1 	.word	0x08007db1
 8007e08:	08007f57 	.word	0x08007f57
 8007e0c:	08007db1 	.word	0x08007db1
 8007e10:	08007e5f 	.word	0x08007e5f
 8007e14:	08007db1 	.word	0x08007db1
 8007e18:	08007db1 	.word	0x08007db1
 8007e1c:	08007ef7 	.word	0x08007ef7
 8007e20:	6833      	ldr	r3, [r6, #0]
 8007e22:	1d1a      	adds	r2, r3, #4
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6032      	str	r2, [r6, #0]
 8007e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e30:	2301      	movs	r3, #1
 8007e32:	e09d      	b.n	8007f70 <_printf_i+0x1e8>
 8007e34:	6833      	ldr	r3, [r6, #0]
 8007e36:	6820      	ldr	r0, [r4, #0]
 8007e38:	1d19      	adds	r1, r3, #4
 8007e3a:	6031      	str	r1, [r6, #0]
 8007e3c:	0606      	lsls	r6, r0, #24
 8007e3e:	d501      	bpl.n	8007e44 <_printf_i+0xbc>
 8007e40:	681d      	ldr	r5, [r3, #0]
 8007e42:	e003      	b.n	8007e4c <_printf_i+0xc4>
 8007e44:	0645      	lsls	r5, r0, #25
 8007e46:	d5fb      	bpl.n	8007e40 <_printf_i+0xb8>
 8007e48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e4c:	2d00      	cmp	r5, #0
 8007e4e:	da03      	bge.n	8007e58 <_printf_i+0xd0>
 8007e50:	232d      	movs	r3, #45	@ 0x2d
 8007e52:	426d      	negs	r5, r5
 8007e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e58:	4859      	ldr	r0, [pc, #356]	@ (8007fc0 <_printf_i+0x238>)
 8007e5a:	230a      	movs	r3, #10
 8007e5c:	e011      	b.n	8007e82 <_printf_i+0xfa>
 8007e5e:	6821      	ldr	r1, [r4, #0]
 8007e60:	6833      	ldr	r3, [r6, #0]
 8007e62:	0608      	lsls	r0, r1, #24
 8007e64:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e68:	d402      	bmi.n	8007e70 <_printf_i+0xe8>
 8007e6a:	0649      	lsls	r1, r1, #25
 8007e6c:	bf48      	it	mi
 8007e6e:	b2ad      	uxthmi	r5, r5
 8007e70:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e72:	4853      	ldr	r0, [pc, #332]	@ (8007fc0 <_printf_i+0x238>)
 8007e74:	6033      	str	r3, [r6, #0]
 8007e76:	bf14      	ite	ne
 8007e78:	230a      	movne	r3, #10
 8007e7a:	2308      	moveq	r3, #8
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e82:	6866      	ldr	r6, [r4, #4]
 8007e84:	60a6      	str	r6, [r4, #8]
 8007e86:	2e00      	cmp	r6, #0
 8007e88:	bfa2      	ittt	ge
 8007e8a:	6821      	ldrge	r1, [r4, #0]
 8007e8c:	f021 0104 	bicge.w	r1, r1, #4
 8007e90:	6021      	strge	r1, [r4, #0]
 8007e92:	b90d      	cbnz	r5, 8007e98 <_printf_i+0x110>
 8007e94:	2e00      	cmp	r6, #0
 8007e96:	d04b      	beq.n	8007f30 <_printf_i+0x1a8>
 8007e98:	4616      	mov	r6, r2
 8007e9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e9e:	fb03 5711 	mls	r7, r3, r1, r5
 8007ea2:	5dc7      	ldrb	r7, [r0, r7]
 8007ea4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ea8:	462f      	mov	r7, r5
 8007eaa:	42bb      	cmp	r3, r7
 8007eac:	460d      	mov	r5, r1
 8007eae:	d9f4      	bls.n	8007e9a <_printf_i+0x112>
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d10b      	bne.n	8007ecc <_printf_i+0x144>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	07df      	lsls	r7, r3, #31
 8007eb8:	d508      	bpl.n	8007ecc <_printf_i+0x144>
 8007eba:	6923      	ldr	r3, [r4, #16]
 8007ebc:	6861      	ldr	r1, [r4, #4]
 8007ebe:	4299      	cmp	r1, r3
 8007ec0:	bfde      	ittt	le
 8007ec2:	2330      	movle	r3, #48	@ 0x30
 8007ec4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ec8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ecc:	1b92      	subs	r2, r2, r6
 8007ece:	6122      	str	r2, [r4, #16]
 8007ed0:	f8cd a000 	str.w	sl, [sp]
 8007ed4:	464b      	mov	r3, r9
 8007ed6:	aa03      	add	r2, sp, #12
 8007ed8:	4621      	mov	r1, r4
 8007eda:	4640      	mov	r0, r8
 8007edc:	f7ff fee6 	bl	8007cac <_printf_common>
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d14a      	bne.n	8007f7a <_printf_i+0x1f2>
 8007ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee8:	b004      	add	sp, #16
 8007eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	f043 0320 	orr.w	r3, r3, #32
 8007ef4:	6023      	str	r3, [r4, #0]
 8007ef6:	4833      	ldr	r0, [pc, #204]	@ (8007fc4 <_printf_i+0x23c>)
 8007ef8:	2778      	movs	r7, #120	@ 0x78
 8007efa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	6831      	ldr	r1, [r6, #0]
 8007f02:	061f      	lsls	r7, r3, #24
 8007f04:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f08:	d402      	bmi.n	8007f10 <_printf_i+0x188>
 8007f0a:	065f      	lsls	r7, r3, #25
 8007f0c:	bf48      	it	mi
 8007f0e:	b2ad      	uxthmi	r5, r5
 8007f10:	6031      	str	r1, [r6, #0]
 8007f12:	07d9      	lsls	r1, r3, #31
 8007f14:	bf44      	itt	mi
 8007f16:	f043 0320 	orrmi.w	r3, r3, #32
 8007f1a:	6023      	strmi	r3, [r4, #0]
 8007f1c:	b11d      	cbz	r5, 8007f26 <_printf_i+0x19e>
 8007f1e:	2310      	movs	r3, #16
 8007f20:	e7ac      	b.n	8007e7c <_printf_i+0xf4>
 8007f22:	4827      	ldr	r0, [pc, #156]	@ (8007fc0 <_printf_i+0x238>)
 8007f24:	e7e9      	b.n	8007efa <_printf_i+0x172>
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	f023 0320 	bic.w	r3, r3, #32
 8007f2c:	6023      	str	r3, [r4, #0]
 8007f2e:	e7f6      	b.n	8007f1e <_printf_i+0x196>
 8007f30:	4616      	mov	r6, r2
 8007f32:	e7bd      	b.n	8007eb0 <_printf_i+0x128>
 8007f34:	6833      	ldr	r3, [r6, #0]
 8007f36:	6825      	ldr	r5, [r4, #0]
 8007f38:	6961      	ldr	r1, [r4, #20]
 8007f3a:	1d18      	adds	r0, r3, #4
 8007f3c:	6030      	str	r0, [r6, #0]
 8007f3e:	062e      	lsls	r6, r5, #24
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	d501      	bpl.n	8007f48 <_printf_i+0x1c0>
 8007f44:	6019      	str	r1, [r3, #0]
 8007f46:	e002      	b.n	8007f4e <_printf_i+0x1c6>
 8007f48:	0668      	lsls	r0, r5, #25
 8007f4a:	d5fb      	bpl.n	8007f44 <_printf_i+0x1bc>
 8007f4c:	8019      	strh	r1, [r3, #0]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	6123      	str	r3, [r4, #16]
 8007f52:	4616      	mov	r6, r2
 8007f54:	e7bc      	b.n	8007ed0 <_printf_i+0x148>
 8007f56:	6833      	ldr	r3, [r6, #0]
 8007f58:	1d1a      	adds	r2, r3, #4
 8007f5a:	6032      	str	r2, [r6, #0]
 8007f5c:	681e      	ldr	r6, [r3, #0]
 8007f5e:	6862      	ldr	r2, [r4, #4]
 8007f60:	2100      	movs	r1, #0
 8007f62:	4630      	mov	r0, r6
 8007f64:	f7f8 f954 	bl	8000210 <memchr>
 8007f68:	b108      	cbz	r0, 8007f6e <_printf_i+0x1e6>
 8007f6a:	1b80      	subs	r0, r0, r6
 8007f6c:	6060      	str	r0, [r4, #4]
 8007f6e:	6863      	ldr	r3, [r4, #4]
 8007f70:	6123      	str	r3, [r4, #16]
 8007f72:	2300      	movs	r3, #0
 8007f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f78:	e7aa      	b.n	8007ed0 <_printf_i+0x148>
 8007f7a:	6923      	ldr	r3, [r4, #16]
 8007f7c:	4632      	mov	r2, r6
 8007f7e:	4649      	mov	r1, r9
 8007f80:	4640      	mov	r0, r8
 8007f82:	47d0      	blx	sl
 8007f84:	3001      	adds	r0, #1
 8007f86:	d0ad      	beq.n	8007ee4 <_printf_i+0x15c>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	079b      	lsls	r3, r3, #30
 8007f8c:	d413      	bmi.n	8007fb6 <_printf_i+0x22e>
 8007f8e:	68e0      	ldr	r0, [r4, #12]
 8007f90:	9b03      	ldr	r3, [sp, #12]
 8007f92:	4298      	cmp	r0, r3
 8007f94:	bfb8      	it	lt
 8007f96:	4618      	movlt	r0, r3
 8007f98:	e7a6      	b.n	8007ee8 <_printf_i+0x160>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4632      	mov	r2, r6
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	47d0      	blx	sl
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d09d      	beq.n	8007ee4 <_printf_i+0x15c>
 8007fa8:	3501      	adds	r5, #1
 8007faa:	68e3      	ldr	r3, [r4, #12]
 8007fac:	9903      	ldr	r1, [sp, #12]
 8007fae:	1a5b      	subs	r3, r3, r1
 8007fb0:	42ab      	cmp	r3, r5
 8007fb2:	dcf2      	bgt.n	8007f9a <_printf_i+0x212>
 8007fb4:	e7eb      	b.n	8007f8e <_printf_i+0x206>
 8007fb6:	2500      	movs	r5, #0
 8007fb8:	f104 0619 	add.w	r6, r4, #25
 8007fbc:	e7f5      	b.n	8007faa <_printf_i+0x222>
 8007fbe:	bf00      	nop
 8007fc0:	0800cca6 	.word	0x0800cca6
 8007fc4:	0800ccb7 	.word	0x0800ccb7

08007fc8 <_scanf_float>:
 8007fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fcc:	b087      	sub	sp, #28
 8007fce:	4617      	mov	r7, r2
 8007fd0:	9303      	str	r3, [sp, #12]
 8007fd2:	688b      	ldr	r3, [r1, #8]
 8007fd4:	1e5a      	subs	r2, r3, #1
 8007fd6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007fda:	bf81      	itttt	hi
 8007fdc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007fe0:	eb03 0b05 	addhi.w	fp, r3, r5
 8007fe4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007fe8:	608b      	strhi	r3, [r1, #8]
 8007fea:	680b      	ldr	r3, [r1, #0]
 8007fec:	460a      	mov	r2, r1
 8007fee:	f04f 0500 	mov.w	r5, #0
 8007ff2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007ff6:	f842 3b1c 	str.w	r3, [r2], #28
 8007ffa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007ffe:	4680      	mov	r8, r0
 8008000:	460c      	mov	r4, r1
 8008002:	bf98      	it	ls
 8008004:	f04f 0b00 	movls.w	fp, #0
 8008008:	9201      	str	r2, [sp, #4]
 800800a:	4616      	mov	r6, r2
 800800c:	46aa      	mov	sl, r5
 800800e:	46a9      	mov	r9, r5
 8008010:	9502      	str	r5, [sp, #8]
 8008012:	68a2      	ldr	r2, [r4, #8]
 8008014:	b152      	cbz	r2, 800802c <_scanf_float+0x64>
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	2b4e      	cmp	r3, #78	@ 0x4e
 800801c:	d864      	bhi.n	80080e8 <_scanf_float+0x120>
 800801e:	2b40      	cmp	r3, #64	@ 0x40
 8008020:	d83c      	bhi.n	800809c <_scanf_float+0xd4>
 8008022:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008026:	b2c8      	uxtb	r0, r1
 8008028:	280e      	cmp	r0, #14
 800802a:	d93a      	bls.n	80080a2 <_scanf_float+0xda>
 800802c:	f1b9 0f00 	cmp.w	r9, #0
 8008030:	d003      	beq.n	800803a <_scanf_float+0x72>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800803e:	f1ba 0f01 	cmp.w	sl, #1
 8008042:	f200 8117 	bhi.w	8008274 <_scanf_float+0x2ac>
 8008046:	9b01      	ldr	r3, [sp, #4]
 8008048:	429e      	cmp	r6, r3
 800804a:	f200 8108 	bhi.w	800825e <_scanf_float+0x296>
 800804e:	2001      	movs	r0, #1
 8008050:	b007      	add	sp, #28
 8008052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008056:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800805a:	2a0d      	cmp	r2, #13
 800805c:	d8e6      	bhi.n	800802c <_scanf_float+0x64>
 800805e:	a101      	add	r1, pc, #4	@ (adr r1, 8008064 <_scanf_float+0x9c>)
 8008060:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008064:	080081ab 	.word	0x080081ab
 8008068:	0800802d 	.word	0x0800802d
 800806c:	0800802d 	.word	0x0800802d
 8008070:	0800802d 	.word	0x0800802d
 8008074:	0800820b 	.word	0x0800820b
 8008078:	080081e3 	.word	0x080081e3
 800807c:	0800802d 	.word	0x0800802d
 8008080:	0800802d 	.word	0x0800802d
 8008084:	080081b9 	.word	0x080081b9
 8008088:	0800802d 	.word	0x0800802d
 800808c:	0800802d 	.word	0x0800802d
 8008090:	0800802d 	.word	0x0800802d
 8008094:	0800802d 	.word	0x0800802d
 8008098:	08008171 	.word	0x08008171
 800809c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80080a0:	e7db      	b.n	800805a <_scanf_float+0x92>
 80080a2:	290e      	cmp	r1, #14
 80080a4:	d8c2      	bhi.n	800802c <_scanf_float+0x64>
 80080a6:	a001      	add	r0, pc, #4	@ (adr r0, 80080ac <_scanf_float+0xe4>)
 80080a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80080ac:	08008161 	.word	0x08008161
 80080b0:	0800802d 	.word	0x0800802d
 80080b4:	08008161 	.word	0x08008161
 80080b8:	080081f7 	.word	0x080081f7
 80080bc:	0800802d 	.word	0x0800802d
 80080c0:	08008109 	.word	0x08008109
 80080c4:	08008147 	.word	0x08008147
 80080c8:	08008147 	.word	0x08008147
 80080cc:	08008147 	.word	0x08008147
 80080d0:	08008147 	.word	0x08008147
 80080d4:	08008147 	.word	0x08008147
 80080d8:	08008147 	.word	0x08008147
 80080dc:	08008147 	.word	0x08008147
 80080e0:	08008147 	.word	0x08008147
 80080e4:	08008147 	.word	0x08008147
 80080e8:	2b6e      	cmp	r3, #110	@ 0x6e
 80080ea:	d809      	bhi.n	8008100 <_scanf_float+0x138>
 80080ec:	2b60      	cmp	r3, #96	@ 0x60
 80080ee:	d8b2      	bhi.n	8008056 <_scanf_float+0x8e>
 80080f0:	2b54      	cmp	r3, #84	@ 0x54
 80080f2:	d07b      	beq.n	80081ec <_scanf_float+0x224>
 80080f4:	2b59      	cmp	r3, #89	@ 0x59
 80080f6:	d199      	bne.n	800802c <_scanf_float+0x64>
 80080f8:	2d07      	cmp	r5, #7
 80080fa:	d197      	bne.n	800802c <_scanf_float+0x64>
 80080fc:	2508      	movs	r5, #8
 80080fe:	e02c      	b.n	800815a <_scanf_float+0x192>
 8008100:	2b74      	cmp	r3, #116	@ 0x74
 8008102:	d073      	beq.n	80081ec <_scanf_float+0x224>
 8008104:	2b79      	cmp	r3, #121	@ 0x79
 8008106:	e7f6      	b.n	80080f6 <_scanf_float+0x12e>
 8008108:	6821      	ldr	r1, [r4, #0]
 800810a:	05c8      	lsls	r0, r1, #23
 800810c:	d51b      	bpl.n	8008146 <_scanf_float+0x17e>
 800810e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008112:	6021      	str	r1, [r4, #0]
 8008114:	f109 0901 	add.w	r9, r9, #1
 8008118:	f1bb 0f00 	cmp.w	fp, #0
 800811c:	d003      	beq.n	8008126 <_scanf_float+0x15e>
 800811e:	3201      	adds	r2, #1
 8008120:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008124:	60a2      	str	r2, [r4, #8]
 8008126:	68a3      	ldr	r3, [r4, #8]
 8008128:	3b01      	subs	r3, #1
 800812a:	60a3      	str	r3, [r4, #8]
 800812c:	6923      	ldr	r3, [r4, #16]
 800812e:	3301      	adds	r3, #1
 8008130:	6123      	str	r3, [r4, #16]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3b01      	subs	r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	607b      	str	r3, [r7, #4]
 800813a:	f340 8087 	ble.w	800824c <_scanf_float+0x284>
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	3301      	adds	r3, #1
 8008142:	603b      	str	r3, [r7, #0]
 8008144:	e765      	b.n	8008012 <_scanf_float+0x4a>
 8008146:	eb1a 0105 	adds.w	r1, sl, r5
 800814a:	f47f af6f 	bne.w	800802c <_scanf_float+0x64>
 800814e:	6822      	ldr	r2, [r4, #0]
 8008150:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008154:	6022      	str	r2, [r4, #0]
 8008156:	460d      	mov	r5, r1
 8008158:	468a      	mov	sl, r1
 800815a:	f806 3b01 	strb.w	r3, [r6], #1
 800815e:	e7e2      	b.n	8008126 <_scanf_float+0x15e>
 8008160:	6822      	ldr	r2, [r4, #0]
 8008162:	0610      	lsls	r0, r2, #24
 8008164:	f57f af62 	bpl.w	800802c <_scanf_float+0x64>
 8008168:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800816c:	6022      	str	r2, [r4, #0]
 800816e:	e7f4      	b.n	800815a <_scanf_float+0x192>
 8008170:	f1ba 0f00 	cmp.w	sl, #0
 8008174:	d10e      	bne.n	8008194 <_scanf_float+0x1cc>
 8008176:	f1b9 0f00 	cmp.w	r9, #0
 800817a:	d10e      	bne.n	800819a <_scanf_float+0x1d2>
 800817c:	6822      	ldr	r2, [r4, #0]
 800817e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008182:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008186:	d108      	bne.n	800819a <_scanf_float+0x1d2>
 8008188:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800818c:	6022      	str	r2, [r4, #0]
 800818e:	f04f 0a01 	mov.w	sl, #1
 8008192:	e7e2      	b.n	800815a <_scanf_float+0x192>
 8008194:	f1ba 0f02 	cmp.w	sl, #2
 8008198:	d055      	beq.n	8008246 <_scanf_float+0x27e>
 800819a:	2d01      	cmp	r5, #1
 800819c:	d002      	beq.n	80081a4 <_scanf_float+0x1dc>
 800819e:	2d04      	cmp	r5, #4
 80081a0:	f47f af44 	bne.w	800802c <_scanf_float+0x64>
 80081a4:	3501      	adds	r5, #1
 80081a6:	b2ed      	uxtb	r5, r5
 80081a8:	e7d7      	b.n	800815a <_scanf_float+0x192>
 80081aa:	f1ba 0f01 	cmp.w	sl, #1
 80081ae:	f47f af3d 	bne.w	800802c <_scanf_float+0x64>
 80081b2:	f04f 0a02 	mov.w	sl, #2
 80081b6:	e7d0      	b.n	800815a <_scanf_float+0x192>
 80081b8:	b97d      	cbnz	r5, 80081da <_scanf_float+0x212>
 80081ba:	f1b9 0f00 	cmp.w	r9, #0
 80081be:	f47f af38 	bne.w	8008032 <_scanf_float+0x6a>
 80081c2:	6822      	ldr	r2, [r4, #0]
 80081c4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80081c8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80081cc:	f040 8108 	bne.w	80083e0 <_scanf_float+0x418>
 80081d0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80081d4:	6022      	str	r2, [r4, #0]
 80081d6:	2501      	movs	r5, #1
 80081d8:	e7bf      	b.n	800815a <_scanf_float+0x192>
 80081da:	2d03      	cmp	r5, #3
 80081dc:	d0e2      	beq.n	80081a4 <_scanf_float+0x1dc>
 80081de:	2d05      	cmp	r5, #5
 80081e0:	e7de      	b.n	80081a0 <_scanf_float+0x1d8>
 80081e2:	2d02      	cmp	r5, #2
 80081e4:	f47f af22 	bne.w	800802c <_scanf_float+0x64>
 80081e8:	2503      	movs	r5, #3
 80081ea:	e7b6      	b.n	800815a <_scanf_float+0x192>
 80081ec:	2d06      	cmp	r5, #6
 80081ee:	f47f af1d 	bne.w	800802c <_scanf_float+0x64>
 80081f2:	2507      	movs	r5, #7
 80081f4:	e7b1      	b.n	800815a <_scanf_float+0x192>
 80081f6:	6822      	ldr	r2, [r4, #0]
 80081f8:	0591      	lsls	r1, r2, #22
 80081fa:	f57f af17 	bpl.w	800802c <_scanf_float+0x64>
 80081fe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008202:	6022      	str	r2, [r4, #0]
 8008204:	f8cd 9008 	str.w	r9, [sp, #8]
 8008208:	e7a7      	b.n	800815a <_scanf_float+0x192>
 800820a:	6822      	ldr	r2, [r4, #0]
 800820c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008210:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008214:	d006      	beq.n	8008224 <_scanf_float+0x25c>
 8008216:	0550      	lsls	r0, r2, #21
 8008218:	f57f af08 	bpl.w	800802c <_scanf_float+0x64>
 800821c:	f1b9 0f00 	cmp.w	r9, #0
 8008220:	f000 80de 	beq.w	80083e0 <_scanf_float+0x418>
 8008224:	0591      	lsls	r1, r2, #22
 8008226:	bf58      	it	pl
 8008228:	9902      	ldrpl	r1, [sp, #8]
 800822a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800822e:	bf58      	it	pl
 8008230:	eba9 0101 	subpl.w	r1, r9, r1
 8008234:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008238:	bf58      	it	pl
 800823a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800823e:	6022      	str	r2, [r4, #0]
 8008240:	f04f 0900 	mov.w	r9, #0
 8008244:	e789      	b.n	800815a <_scanf_float+0x192>
 8008246:	f04f 0a03 	mov.w	sl, #3
 800824a:	e786      	b.n	800815a <_scanf_float+0x192>
 800824c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008250:	4639      	mov	r1, r7
 8008252:	4640      	mov	r0, r8
 8008254:	4798      	blx	r3
 8008256:	2800      	cmp	r0, #0
 8008258:	f43f aedb 	beq.w	8008012 <_scanf_float+0x4a>
 800825c:	e6e6      	b.n	800802c <_scanf_float+0x64>
 800825e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008262:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008266:	463a      	mov	r2, r7
 8008268:	4640      	mov	r0, r8
 800826a:	4798      	blx	r3
 800826c:	6923      	ldr	r3, [r4, #16]
 800826e:	3b01      	subs	r3, #1
 8008270:	6123      	str	r3, [r4, #16]
 8008272:	e6e8      	b.n	8008046 <_scanf_float+0x7e>
 8008274:	1e6b      	subs	r3, r5, #1
 8008276:	2b06      	cmp	r3, #6
 8008278:	d824      	bhi.n	80082c4 <_scanf_float+0x2fc>
 800827a:	2d02      	cmp	r5, #2
 800827c:	d836      	bhi.n	80082ec <_scanf_float+0x324>
 800827e:	9b01      	ldr	r3, [sp, #4]
 8008280:	429e      	cmp	r6, r3
 8008282:	f67f aee4 	bls.w	800804e <_scanf_float+0x86>
 8008286:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800828a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800828e:	463a      	mov	r2, r7
 8008290:	4640      	mov	r0, r8
 8008292:	4798      	blx	r3
 8008294:	6923      	ldr	r3, [r4, #16]
 8008296:	3b01      	subs	r3, #1
 8008298:	6123      	str	r3, [r4, #16]
 800829a:	e7f0      	b.n	800827e <_scanf_float+0x2b6>
 800829c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082a0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80082a4:	463a      	mov	r2, r7
 80082a6:	4640      	mov	r0, r8
 80082a8:	4798      	blx	r3
 80082aa:	6923      	ldr	r3, [r4, #16]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	6123      	str	r3, [r4, #16]
 80082b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082b4:	fa5f fa8a 	uxtb.w	sl, sl
 80082b8:	f1ba 0f02 	cmp.w	sl, #2
 80082bc:	d1ee      	bne.n	800829c <_scanf_float+0x2d4>
 80082be:	3d03      	subs	r5, #3
 80082c0:	b2ed      	uxtb	r5, r5
 80082c2:	1b76      	subs	r6, r6, r5
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	05da      	lsls	r2, r3, #23
 80082c8:	d530      	bpl.n	800832c <_scanf_float+0x364>
 80082ca:	055b      	lsls	r3, r3, #21
 80082cc:	d511      	bpl.n	80082f2 <_scanf_float+0x32a>
 80082ce:	9b01      	ldr	r3, [sp, #4]
 80082d0:	429e      	cmp	r6, r3
 80082d2:	f67f aebc 	bls.w	800804e <_scanf_float+0x86>
 80082d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082de:	463a      	mov	r2, r7
 80082e0:	4640      	mov	r0, r8
 80082e2:	4798      	blx	r3
 80082e4:	6923      	ldr	r3, [r4, #16]
 80082e6:	3b01      	subs	r3, #1
 80082e8:	6123      	str	r3, [r4, #16]
 80082ea:	e7f0      	b.n	80082ce <_scanf_float+0x306>
 80082ec:	46aa      	mov	sl, r5
 80082ee:	46b3      	mov	fp, r6
 80082f0:	e7de      	b.n	80082b0 <_scanf_float+0x2e8>
 80082f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80082f6:	6923      	ldr	r3, [r4, #16]
 80082f8:	2965      	cmp	r1, #101	@ 0x65
 80082fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80082fe:	f106 35ff 	add.w	r5, r6, #4294967295
 8008302:	6123      	str	r3, [r4, #16]
 8008304:	d00c      	beq.n	8008320 <_scanf_float+0x358>
 8008306:	2945      	cmp	r1, #69	@ 0x45
 8008308:	d00a      	beq.n	8008320 <_scanf_float+0x358>
 800830a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800830e:	463a      	mov	r2, r7
 8008310:	4640      	mov	r0, r8
 8008312:	4798      	blx	r3
 8008314:	6923      	ldr	r3, [r4, #16]
 8008316:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800831a:	3b01      	subs	r3, #1
 800831c:	1eb5      	subs	r5, r6, #2
 800831e:	6123      	str	r3, [r4, #16]
 8008320:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008324:	463a      	mov	r2, r7
 8008326:	4640      	mov	r0, r8
 8008328:	4798      	blx	r3
 800832a:	462e      	mov	r6, r5
 800832c:	6822      	ldr	r2, [r4, #0]
 800832e:	f012 0210 	ands.w	r2, r2, #16
 8008332:	d001      	beq.n	8008338 <_scanf_float+0x370>
 8008334:	2000      	movs	r0, #0
 8008336:	e68b      	b.n	8008050 <_scanf_float+0x88>
 8008338:	7032      	strb	r2, [r6, #0]
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008340:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008344:	d11c      	bne.n	8008380 <_scanf_float+0x3b8>
 8008346:	9b02      	ldr	r3, [sp, #8]
 8008348:	454b      	cmp	r3, r9
 800834a:	eba3 0209 	sub.w	r2, r3, r9
 800834e:	d123      	bne.n	8008398 <_scanf_float+0x3d0>
 8008350:	9901      	ldr	r1, [sp, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	4640      	mov	r0, r8
 8008356:	f002 fc07 	bl	800ab68 <_strtod_r>
 800835a:	9b03      	ldr	r3, [sp, #12]
 800835c:	6821      	ldr	r1, [r4, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f011 0f02 	tst.w	r1, #2
 8008364:	ec57 6b10 	vmov	r6, r7, d0
 8008368:	f103 0204 	add.w	r2, r3, #4
 800836c:	d01f      	beq.n	80083ae <_scanf_float+0x3e6>
 800836e:	9903      	ldr	r1, [sp, #12]
 8008370:	600a      	str	r2, [r1, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	e9c3 6700 	strd	r6, r7, [r3]
 8008378:	68e3      	ldr	r3, [r4, #12]
 800837a:	3301      	adds	r3, #1
 800837c:	60e3      	str	r3, [r4, #12]
 800837e:	e7d9      	b.n	8008334 <_scanf_float+0x36c>
 8008380:	9b04      	ldr	r3, [sp, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0e4      	beq.n	8008350 <_scanf_float+0x388>
 8008386:	9905      	ldr	r1, [sp, #20]
 8008388:	230a      	movs	r3, #10
 800838a:	3101      	adds	r1, #1
 800838c:	4640      	mov	r0, r8
 800838e:	f002 fc6b 	bl	800ac68 <_strtol_r>
 8008392:	9b04      	ldr	r3, [sp, #16]
 8008394:	9e05      	ldr	r6, [sp, #20]
 8008396:	1ac2      	subs	r2, r0, r3
 8008398:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800839c:	429e      	cmp	r6, r3
 800839e:	bf28      	it	cs
 80083a0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80083a4:	4910      	ldr	r1, [pc, #64]	@ (80083e8 <_scanf_float+0x420>)
 80083a6:	4630      	mov	r0, r6
 80083a8:	f000 f8e4 	bl	8008574 <siprintf>
 80083ac:	e7d0      	b.n	8008350 <_scanf_float+0x388>
 80083ae:	f011 0f04 	tst.w	r1, #4
 80083b2:	9903      	ldr	r1, [sp, #12]
 80083b4:	600a      	str	r2, [r1, #0]
 80083b6:	d1dc      	bne.n	8008372 <_scanf_float+0x3aa>
 80083b8:	681d      	ldr	r5, [r3, #0]
 80083ba:	4632      	mov	r2, r6
 80083bc:	463b      	mov	r3, r7
 80083be:	4630      	mov	r0, r6
 80083c0:	4639      	mov	r1, r7
 80083c2:	f7f8 fbd3 	bl	8000b6c <__aeabi_dcmpun>
 80083c6:	b128      	cbz	r0, 80083d4 <_scanf_float+0x40c>
 80083c8:	4808      	ldr	r0, [pc, #32]	@ (80083ec <_scanf_float+0x424>)
 80083ca:	f000 f9c5 	bl	8008758 <nanf>
 80083ce:	ed85 0a00 	vstr	s0, [r5]
 80083d2:	e7d1      	b.n	8008378 <_scanf_float+0x3b0>
 80083d4:	4630      	mov	r0, r6
 80083d6:	4639      	mov	r1, r7
 80083d8:	f7f8 fc26 	bl	8000c28 <__aeabi_d2f>
 80083dc:	6028      	str	r0, [r5, #0]
 80083de:	e7cb      	b.n	8008378 <_scanf_float+0x3b0>
 80083e0:	f04f 0900 	mov.w	r9, #0
 80083e4:	e629      	b.n	800803a <_scanf_float+0x72>
 80083e6:	bf00      	nop
 80083e8:	0800ccc8 	.word	0x0800ccc8
 80083ec:	0800d05d 	.word	0x0800d05d

080083f0 <std>:
 80083f0:	2300      	movs	r3, #0
 80083f2:	b510      	push	{r4, lr}
 80083f4:	4604      	mov	r4, r0
 80083f6:	e9c0 3300 	strd	r3, r3, [r0]
 80083fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083fe:	6083      	str	r3, [r0, #8]
 8008400:	8181      	strh	r1, [r0, #12]
 8008402:	6643      	str	r3, [r0, #100]	@ 0x64
 8008404:	81c2      	strh	r2, [r0, #14]
 8008406:	6183      	str	r3, [r0, #24]
 8008408:	4619      	mov	r1, r3
 800840a:	2208      	movs	r2, #8
 800840c:	305c      	adds	r0, #92	@ 0x5c
 800840e:	f000 f914 	bl	800863a <memset>
 8008412:	4b0d      	ldr	r3, [pc, #52]	@ (8008448 <std+0x58>)
 8008414:	6263      	str	r3, [r4, #36]	@ 0x24
 8008416:	4b0d      	ldr	r3, [pc, #52]	@ (800844c <std+0x5c>)
 8008418:	62a3      	str	r3, [r4, #40]	@ 0x28
 800841a:	4b0d      	ldr	r3, [pc, #52]	@ (8008450 <std+0x60>)
 800841c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800841e:	4b0d      	ldr	r3, [pc, #52]	@ (8008454 <std+0x64>)
 8008420:	6323      	str	r3, [r4, #48]	@ 0x30
 8008422:	4b0d      	ldr	r3, [pc, #52]	@ (8008458 <std+0x68>)
 8008424:	6224      	str	r4, [r4, #32]
 8008426:	429c      	cmp	r4, r3
 8008428:	d006      	beq.n	8008438 <std+0x48>
 800842a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800842e:	4294      	cmp	r4, r2
 8008430:	d002      	beq.n	8008438 <std+0x48>
 8008432:	33d0      	adds	r3, #208	@ 0xd0
 8008434:	429c      	cmp	r4, r3
 8008436:	d105      	bne.n	8008444 <std+0x54>
 8008438:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800843c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008440:	f000 b978 	b.w	8008734 <__retarget_lock_init_recursive>
 8008444:	bd10      	pop	{r4, pc}
 8008446:	bf00      	nop
 8008448:	080085b5 	.word	0x080085b5
 800844c:	080085d7 	.word	0x080085d7
 8008450:	0800860f 	.word	0x0800860f
 8008454:	08008633 	.word	0x08008633
 8008458:	20005068 	.word	0x20005068

0800845c <stdio_exit_handler>:
 800845c:	4a02      	ldr	r2, [pc, #8]	@ (8008468 <stdio_exit_handler+0xc>)
 800845e:	4903      	ldr	r1, [pc, #12]	@ (800846c <stdio_exit_handler+0x10>)
 8008460:	4803      	ldr	r0, [pc, #12]	@ (8008470 <stdio_exit_handler+0x14>)
 8008462:	f000 b869 	b.w	8008538 <_fwalk_sglue>
 8008466:	bf00      	nop
 8008468:	20000020 	.word	0x20000020
 800846c:	0800b025 	.word	0x0800b025
 8008470:	20000030 	.word	0x20000030

08008474 <cleanup_stdio>:
 8008474:	6841      	ldr	r1, [r0, #4]
 8008476:	4b0c      	ldr	r3, [pc, #48]	@ (80084a8 <cleanup_stdio+0x34>)
 8008478:	4299      	cmp	r1, r3
 800847a:	b510      	push	{r4, lr}
 800847c:	4604      	mov	r4, r0
 800847e:	d001      	beq.n	8008484 <cleanup_stdio+0x10>
 8008480:	f002 fdd0 	bl	800b024 <_fflush_r>
 8008484:	68a1      	ldr	r1, [r4, #8]
 8008486:	4b09      	ldr	r3, [pc, #36]	@ (80084ac <cleanup_stdio+0x38>)
 8008488:	4299      	cmp	r1, r3
 800848a:	d002      	beq.n	8008492 <cleanup_stdio+0x1e>
 800848c:	4620      	mov	r0, r4
 800848e:	f002 fdc9 	bl	800b024 <_fflush_r>
 8008492:	68e1      	ldr	r1, [r4, #12]
 8008494:	4b06      	ldr	r3, [pc, #24]	@ (80084b0 <cleanup_stdio+0x3c>)
 8008496:	4299      	cmp	r1, r3
 8008498:	d004      	beq.n	80084a4 <cleanup_stdio+0x30>
 800849a:	4620      	mov	r0, r4
 800849c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a0:	f002 bdc0 	b.w	800b024 <_fflush_r>
 80084a4:	bd10      	pop	{r4, pc}
 80084a6:	bf00      	nop
 80084a8:	20005068 	.word	0x20005068
 80084ac:	200050d0 	.word	0x200050d0
 80084b0:	20005138 	.word	0x20005138

080084b4 <global_stdio_init.part.0>:
 80084b4:	b510      	push	{r4, lr}
 80084b6:	4b0b      	ldr	r3, [pc, #44]	@ (80084e4 <global_stdio_init.part.0+0x30>)
 80084b8:	4c0b      	ldr	r4, [pc, #44]	@ (80084e8 <global_stdio_init.part.0+0x34>)
 80084ba:	4a0c      	ldr	r2, [pc, #48]	@ (80084ec <global_stdio_init.part.0+0x38>)
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	4620      	mov	r0, r4
 80084c0:	2200      	movs	r2, #0
 80084c2:	2104      	movs	r1, #4
 80084c4:	f7ff ff94 	bl	80083f0 <std>
 80084c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80084cc:	2201      	movs	r2, #1
 80084ce:	2109      	movs	r1, #9
 80084d0:	f7ff ff8e 	bl	80083f0 <std>
 80084d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80084d8:	2202      	movs	r2, #2
 80084da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084de:	2112      	movs	r1, #18
 80084e0:	f7ff bf86 	b.w	80083f0 <std>
 80084e4:	200051a0 	.word	0x200051a0
 80084e8:	20005068 	.word	0x20005068
 80084ec:	0800845d 	.word	0x0800845d

080084f0 <__sfp_lock_acquire>:
 80084f0:	4801      	ldr	r0, [pc, #4]	@ (80084f8 <__sfp_lock_acquire+0x8>)
 80084f2:	f000 b920 	b.w	8008736 <__retarget_lock_acquire_recursive>
 80084f6:	bf00      	nop
 80084f8:	200051a9 	.word	0x200051a9

080084fc <__sfp_lock_release>:
 80084fc:	4801      	ldr	r0, [pc, #4]	@ (8008504 <__sfp_lock_release+0x8>)
 80084fe:	f000 b91b 	b.w	8008738 <__retarget_lock_release_recursive>
 8008502:	bf00      	nop
 8008504:	200051a9 	.word	0x200051a9

08008508 <__sinit>:
 8008508:	b510      	push	{r4, lr}
 800850a:	4604      	mov	r4, r0
 800850c:	f7ff fff0 	bl	80084f0 <__sfp_lock_acquire>
 8008510:	6a23      	ldr	r3, [r4, #32]
 8008512:	b11b      	cbz	r3, 800851c <__sinit+0x14>
 8008514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008518:	f7ff bff0 	b.w	80084fc <__sfp_lock_release>
 800851c:	4b04      	ldr	r3, [pc, #16]	@ (8008530 <__sinit+0x28>)
 800851e:	6223      	str	r3, [r4, #32]
 8008520:	4b04      	ldr	r3, [pc, #16]	@ (8008534 <__sinit+0x2c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1f5      	bne.n	8008514 <__sinit+0xc>
 8008528:	f7ff ffc4 	bl	80084b4 <global_stdio_init.part.0>
 800852c:	e7f2      	b.n	8008514 <__sinit+0xc>
 800852e:	bf00      	nop
 8008530:	08008475 	.word	0x08008475
 8008534:	200051a0 	.word	0x200051a0

08008538 <_fwalk_sglue>:
 8008538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800853c:	4607      	mov	r7, r0
 800853e:	4688      	mov	r8, r1
 8008540:	4614      	mov	r4, r2
 8008542:	2600      	movs	r6, #0
 8008544:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008548:	f1b9 0901 	subs.w	r9, r9, #1
 800854c:	d505      	bpl.n	800855a <_fwalk_sglue+0x22>
 800854e:	6824      	ldr	r4, [r4, #0]
 8008550:	2c00      	cmp	r4, #0
 8008552:	d1f7      	bne.n	8008544 <_fwalk_sglue+0xc>
 8008554:	4630      	mov	r0, r6
 8008556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800855a:	89ab      	ldrh	r3, [r5, #12]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d907      	bls.n	8008570 <_fwalk_sglue+0x38>
 8008560:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008564:	3301      	adds	r3, #1
 8008566:	d003      	beq.n	8008570 <_fwalk_sglue+0x38>
 8008568:	4629      	mov	r1, r5
 800856a:	4638      	mov	r0, r7
 800856c:	47c0      	blx	r8
 800856e:	4306      	orrs	r6, r0
 8008570:	3568      	adds	r5, #104	@ 0x68
 8008572:	e7e9      	b.n	8008548 <_fwalk_sglue+0x10>

08008574 <siprintf>:
 8008574:	b40e      	push	{r1, r2, r3}
 8008576:	b500      	push	{lr}
 8008578:	b09c      	sub	sp, #112	@ 0x70
 800857a:	ab1d      	add	r3, sp, #116	@ 0x74
 800857c:	9002      	str	r0, [sp, #8]
 800857e:	9006      	str	r0, [sp, #24]
 8008580:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008584:	4809      	ldr	r0, [pc, #36]	@ (80085ac <siprintf+0x38>)
 8008586:	9107      	str	r1, [sp, #28]
 8008588:	9104      	str	r1, [sp, #16]
 800858a:	4909      	ldr	r1, [pc, #36]	@ (80085b0 <siprintf+0x3c>)
 800858c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008590:	9105      	str	r1, [sp, #20]
 8008592:	6800      	ldr	r0, [r0, #0]
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	a902      	add	r1, sp, #8
 8008598:	f002 fbc4 	bl	800ad24 <_svfiprintf_r>
 800859c:	9b02      	ldr	r3, [sp, #8]
 800859e:	2200      	movs	r2, #0
 80085a0:	701a      	strb	r2, [r3, #0]
 80085a2:	b01c      	add	sp, #112	@ 0x70
 80085a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80085a8:	b003      	add	sp, #12
 80085aa:	4770      	bx	lr
 80085ac:	2000002c 	.word	0x2000002c
 80085b0:	ffff0208 	.word	0xffff0208

080085b4 <__sread>:
 80085b4:	b510      	push	{r4, lr}
 80085b6:	460c      	mov	r4, r1
 80085b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085bc:	f000 f86c 	bl	8008698 <_read_r>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	bfab      	itete	ge
 80085c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80085c6:	89a3      	ldrhlt	r3, [r4, #12]
 80085c8:	181b      	addge	r3, r3, r0
 80085ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085ce:	bfac      	ite	ge
 80085d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80085d2:	81a3      	strhlt	r3, [r4, #12]
 80085d4:	bd10      	pop	{r4, pc}

080085d6 <__swrite>:
 80085d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085da:	461f      	mov	r7, r3
 80085dc:	898b      	ldrh	r3, [r1, #12]
 80085de:	05db      	lsls	r3, r3, #23
 80085e0:	4605      	mov	r5, r0
 80085e2:	460c      	mov	r4, r1
 80085e4:	4616      	mov	r6, r2
 80085e6:	d505      	bpl.n	80085f4 <__swrite+0x1e>
 80085e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ec:	2302      	movs	r3, #2
 80085ee:	2200      	movs	r2, #0
 80085f0:	f000 f840 	bl	8008674 <_lseek_r>
 80085f4:	89a3      	ldrh	r3, [r4, #12]
 80085f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085fe:	81a3      	strh	r3, [r4, #12]
 8008600:	4632      	mov	r2, r6
 8008602:	463b      	mov	r3, r7
 8008604:	4628      	mov	r0, r5
 8008606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800860a:	f000 b857 	b.w	80086bc <_write_r>

0800860e <__sseek>:
 800860e:	b510      	push	{r4, lr}
 8008610:	460c      	mov	r4, r1
 8008612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008616:	f000 f82d 	bl	8008674 <_lseek_r>
 800861a:	1c43      	adds	r3, r0, #1
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	bf15      	itete	ne
 8008620:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008622:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008626:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800862a:	81a3      	strheq	r3, [r4, #12]
 800862c:	bf18      	it	ne
 800862e:	81a3      	strhne	r3, [r4, #12]
 8008630:	bd10      	pop	{r4, pc}

08008632 <__sclose>:
 8008632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008636:	f000 b80d 	b.w	8008654 <_close_r>

0800863a <memset>:
 800863a:	4402      	add	r2, r0
 800863c:	4603      	mov	r3, r0
 800863e:	4293      	cmp	r3, r2
 8008640:	d100      	bne.n	8008644 <memset+0xa>
 8008642:	4770      	bx	lr
 8008644:	f803 1b01 	strb.w	r1, [r3], #1
 8008648:	e7f9      	b.n	800863e <memset+0x4>
	...

0800864c <_localeconv_r>:
 800864c:	4800      	ldr	r0, [pc, #0]	@ (8008650 <_localeconv_r+0x4>)
 800864e:	4770      	bx	lr
 8008650:	2000016c 	.word	0x2000016c

08008654 <_close_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	4d06      	ldr	r5, [pc, #24]	@ (8008670 <_close_r+0x1c>)
 8008658:	2300      	movs	r3, #0
 800865a:	4604      	mov	r4, r0
 800865c:	4608      	mov	r0, r1
 800865e:	602b      	str	r3, [r5, #0]
 8008660:	f7f9 fdca 	bl	80021f8 <_close>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d102      	bne.n	800866e <_close_r+0x1a>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	b103      	cbz	r3, 800866e <_close_r+0x1a>
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	200051a4 	.word	0x200051a4

08008674 <_lseek_r>:
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	4d07      	ldr	r5, [pc, #28]	@ (8008694 <_lseek_r+0x20>)
 8008678:	4604      	mov	r4, r0
 800867a:	4608      	mov	r0, r1
 800867c:	4611      	mov	r1, r2
 800867e:	2200      	movs	r2, #0
 8008680:	602a      	str	r2, [r5, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	f7f9 fddf 	bl	8002246 <_lseek>
 8008688:	1c43      	adds	r3, r0, #1
 800868a:	d102      	bne.n	8008692 <_lseek_r+0x1e>
 800868c:	682b      	ldr	r3, [r5, #0]
 800868e:	b103      	cbz	r3, 8008692 <_lseek_r+0x1e>
 8008690:	6023      	str	r3, [r4, #0]
 8008692:	bd38      	pop	{r3, r4, r5, pc}
 8008694:	200051a4 	.word	0x200051a4

08008698 <_read_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	4d07      	ldr	r5, [pc, #28]	@ (80086b8 <_read_r+0x20>)
 800869c:	4604      	mov	r4, r0
 800869e:	4608      	mov	r0, r1
 80086a0:	4611      	mov	r1, r2
 80086a2:	2200      	movs	r2, #0
 80086a4:	602a      	str	r2, [r5, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	f7f9 fd6d 	bl	8002186 <_read>
 80086ac:	1c43      	adds	r3, r0, #1
 80086ae:	d102      	bne.n	80086b6 <_read_r+0x1e>
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	b103      	cbz	r3, 80086b6 <_read_r+0x1e>
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	bd38      	pop	{r3, r4, r5, pc}
 80086b8:	200051a4 	.word	0x200051a4

080086bc <_write_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	4d07      	ldr	r5, [pc, #28]	@ (80086dc <_write_r+0x20>)
 80086c0:	4604      	mov	r4, r0
 80086c2:	4608      	mov	r0, r1
 80086c4:	4611      	mov	r1, r2
 80086c6:	2200      	movs	r2, #0
 80086c8:	602a      	str	r2, [r5, #0]
 80086ca:	461a      	mov	r2, r3
 80086cc:	f7f9 fd78 	bl	80021c0 <_write>
 80086d0:	1c43      	adds	r3, r0, #1
 80086d2:	d102      	bne.n	80086da <_write_r+0x1e>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	b103      	cbz	r3, 80086da <_write_r+0x1e>
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	200051a4 	.word	0x200051a4

080086e0 <__errno>:
 80086e0:	4b01      	ldr	r3, [pc, #4]	@ (80086e8 <__errno+0x8>)
 80086e2:	6818      	ldr	r0, [r3, #0]
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	2000002c 	.word	0x2000002c

080086ec <__libc_init_array>:
 80086ec:	b570      	push	{r4, r5, r6, lr}
 80086ee:	4d0d      	ldr	r5, [pc, #52]	@ (8008724 <__libc_init_array+0x38>)
 80086f0:	4c0d      	ldr	r4, [pc, #52]	@ (8008728 <__libc_init_array+0x3c>)
 80086f2:	1b64      	subs	r4, r4, r5
 80086f4:	10a4      	asrs	r4, r4, #2
 80086f6:	2600      	movs	r6, #0
 80086f8:	42a6      	cmp	r6, r4
 80086fa:	d109      	bne.n	8008710 <__libc_init_array+0x24>
 80086fc:	4d0b      	ldr	r5, [pc, #44]	@ (800872c <__libc_init_array+0x40>)
 80086fe:	4c0c      	ldr	r4, [pc, #48]	@ (8008730 <__libc_init_array+0x44>)
 8008700:	f003 fb74 	bl	800bdec <_init>
 8008704:	1b64      	subs	r4, r4, r5
 8008706:	10a4      	asrs	r4, r4, #2
 8008708:	2600      	movs	r6, #0
 800870a:	42a6      	cmp	r6, r4
 800870c:	d105      	bne.n	800871a <__libc_init_array+0x2e>
 800870e:	bd70      	pop	{r4, r5, r6, pc}
 8008710:	f855 3b04 	ldr.w	r3, [r5], #4
 8008714:	4798      	blx	r3
 8008716:	3601      	adds	r6, #1
 8008718:	e7ee      	b.n	80086f8 <__libc_init_array+0xc>
 800871a:	f855 3b04 	ldr.w	r3, [r5], #4
 800871e:	4798      	blx	r3
 8008720:	3601      	adds	r6, #1
 8008722:	e7f2      	b.n	800870a <__libc_init_array+0x1e>
 8008724:	0800d0c8 	.word	0x0800d0c8
 8008728:	0800d0c8 	.word	0x0800d0c8
 800872c:	0800d0c8 	.word	0x0800d0c8
 8008730:	0800d0cc 	.word	0x0800d0cc

08008734 <__retarget_lock_init_recursive>:
 8008734:	4770      	bx	lr

08008736 <__retarget_lock_acquire_recursive>:
 8008736:	4770      	bx	lr

08008738 <__retarget_lock_release_recursive>:
 8008738:	4770      	bx	lr

0800873a <memcpy>:
 800873a:	440a      	add	r2, r1
 800873c:	4291      	cmp	r1, r2
 800873e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008742:	d100      	bne.n	8008746 <memcpy+0xc>
 8008744:	4770      	bx	lr
 8008746:	b510      	push	{r4, lr}
 8008748:	f811 4b01 	ldrb.w	r4, [r1], #1
 800874c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008750:	4291      	cmp	r1, r2
 8008752:	d1f9      	bne.n	8008748 <memcpy+0xe>
 8008754:	bd10      	pop	{r4, pc}
	...

08008758 <nanf>:
 8008758:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008760 <nanf+0x8>
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	7fc00000 	.word	0x7fc00000

08008764 <quorem>:
 8008764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008768:	6903      	ldr	r3, [r0, #16]
 800876a:	690c      	ldr	r4, [r1, #16]
 800876c:	42a3      	cmp	r3, r4
 800876e:	4607      	mov	r7, r0
 8008770:	db7e      	blt.n	8008870 <quorem+0x10c>
 8008772:	3c01      	subs	r4, #1
 8008774:	f101 0814 	add.w	r8, r1, #20
 8008778:	00a3      	lsls	r3, r4, #2
 800877a:	f100 0514 	add.w	r5, r0, #20
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008784:	9301      	str	r3, [sp, #4]
 8008786:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800878a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800878e:	3301      	adds	r3, #1
 8008790:	429a      	cmp	r2, r3
 8008792:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008796:	fbb2 f6f3 	udiv	r6, r2, r3
 800879a:	d32e      	bcc.n	80087fa <quorem+0x96>
 800879c:	f04f 0a00 	mov.w	sl, #0
 80087a0:	46c4      	mov	ip, r8
 80087a2:	46ae      	mov	lr, r5
 80087a4:	46d3      	mov	fp, sl
 80087a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80087aa:	b298      	uxth	r0, r3
 80087ac:	fb06 a000 	mla	r0, r6, r0, sl
 80087b0:	0c02      	lsrs	r2, r0, #16
 80087b2:	0c1b      	lsrs	r3, r3, #16
 80087b4:	fb06 2303 	mla	r3, r6, r3, r2
 80087b8:	f8de 2000 	ldr.w	r2, [lr]
 80087bc:	b280      	uxth	r0, r0
 80087be:	b292      	uxth	r2, r2
 80087c0:	1a12      	subs	r2, r2, r0
 80087c2:	445a      	add	r2, fp
 80087c4:	f8de 0000 	ldr.w	r0, [lr]
 80087c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80087d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80087d6:	b292      	uxth	r2, r2
 80087d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80087dc:	45e1      	cmp	r9, ip
 80087de:	f84e 2b04 	str.w	r2, [lr], #4
 80087e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80087e6:	d2de      	bcs.n	80087a6 <quorem+0x42>
 80087e8:	9b00      	ldr	r3, [sp, #0]
 80087ea:	58eb      	ldr	r3, [r5, r3]
 80087ec:	b92b      	cbnz	r3, 80087fa <quorem+0x96>
 80087ee:	9b01      	ldr	r3, [sp, #4]
 80087f0:	3b04      	subs	r3, #4
 80087f2:	429d      	cmp	r5, r3
 80087f4:	461a      	mov	r2, r3
 80087f6:	d32f      	bcc.n	8008858 <quorem+0xf4>
 80087f8:	613c      	str	r4, [r7, #16]
 80087fa:	4638      	mov	r0, r7
 80087fc:	f001 f9c4 	bl	8009b88 <__mcmp>
 8008800:	2800      	cmp	r0, #0
 8008802:	db25      	blt.n	8008850 <quorem+0xec>
 8008804:	4629      	mov	r1, r5
 8008806:	2000      	movs	r0, #0
 8008808:	f858 2b04 	ldr.w	r2, [r8], #4
 800880c:	f8d1 c000 	ldr.w	ip, [r1]
 8008810:	fa1f fe82 	uxth.w	lr, r2
 8008814:	fa1f f38c 	uxth.w	r3, ip
 8008818:	eba3 030e 	sub.w	r3, r3, lr
 800881c:	4403      	add	r3, r0
 800881e:	0c12      	lsrs	r2, r2, #16
 8008820:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008824:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008828:	b29b      	uxth	r3, r3
 800882a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800882e:	45c1      	cmp	r9, r8
 8008830:	f841 3b04 	str.w	r3, [r1], #4
 8008834:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008838:	d2e6      	bcs.n	8008808 <quorem+0xa4>
 800883a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800883e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008842:	b922      	cbnz	r2, 800884e <quorem+0xea>
 8008844:	3b04      	subs	r3, #4
 8008846:	429d      	cmp	r5, r3
 8008848:	461a      	mov	r2, r3
 800884a:	d30b      	bcc.n	8008864 <quorem+0x100>
 800884c:	613c      	str	r4, [r7, #16]
 800884e:	3601      	adds	r6, #1
 8008850:	4630      	mov	r0, r6
 8008852:	b003      	add	sp, #12
 8008854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008858:	6812      	ldr	r2, [r2, #0]
 800885a:	3b04      	subs	r3, #4
 800885c:	2a00      	cmp	r2, #0
 800885e:	d1cb      	bne.n	80087f8 <quorem+0x94>
 8008860:	3c01      	subs	r4, #1
 8008862:	e7c6      	b.n	80087f2 <quorem+0x8e>
 8008864:	6812      	ldr	r2, [r2, #0]
 8008866:	3b04      	subs	r3, #4
 8008868:	2a00      	cmp	r2, #0
 800886a:	d1ef      	bne.n	800884c <quorem+0xe8>
 800886c:	3c01      	subs	r4, #1
 800886e:	e7ea      	b.n	8008846 <quorem+0xe2>
 8008870:	2000      	movs	r0, #0
 8008872:	e7ee      	b.n	8008852 <quorem+0xee>
 8008874:	0000      	movs	r0, r0
	...

08008878 <_dtoa_r>:
 8008878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887c:	69c7      	ldr	r7, [r0, #28]
 800887e:	b099      	sub	sp, #100	@ 0x64
 8008880:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008884:	ec55 4b10 	vmov	r4, r5, d0
 8008888:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800888a:	9109      	str	r1, [sp, #36]	@ 0x24
 800888c:	4683      	mov	fp, r0
 800888e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008890:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008892:	b97f      	cbnz	r7, 80088b4 <_dtoa_r+0x3c>
 8008894:	2010      	movs	r0, #16
 8008896:	f000 fdfd 	bl	8009494 <malloc>
 800889a:	4602      	mov	r2, r0
 800889c:	f8cb 001c 	str.w	r0, [fp, #28]
 80088a0:	b920      	cbnz	r0, 80088ac <_dtoa_r+0x34>
 80088a2:	4ba7      	ldr	r3, [pc, #668]	@ (8008b40 <_dtoa_r+0x2c8>)
 80088a4:	21ef      	movs	r1, #239	@ 0xef
 80088a6:	48a7      	ldr	r0, [pc, #668]	@ (8008b44 <_dtoa_r+0x2cc>)
 80088a8:	f002 fc2a 	bl	800b100 <__assert_func>
 80088ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80088b0:	6007      	str	r7, [r0, #0]
 80088b2:	60c7      	str	r7, [r0, #12]
 80088b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088b8:	6819      	ldr	r1, [r3, #0]
 80088ba:	b159      	cbz	r1, 80088d4 <_dtoa_r+0x5c>
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	604a      	str	r2, [r1, #4]
 80088c0:	2301      	movs	r3, #1
 80088c2:	4093      	lsls	r3, r2
 80088c4:	608b      	str	r3, [r1, #8]
 80088c6:	4658      	mov	r0, fp
 80088c8:	f000 feda 	bl	8009680 <_Bfree>
 80088cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	1e2b      	subs	r3, r5, #0
 80088d6:	bfb9      	ittee	lt
 80088d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80088dc:	9303      	strlt	r3, [sp, #12]
 80088de:	2300      	movge	r3, #0
 80088e0:	6033      	strge	r3, [r6, #0]
 80088e2:	9f03      	ldr	r7, [sp, #12]
 80088e4:	4b98      	ldr	r3, [pc, #608]	@ (8008b48 <_dtoa_r+0x2d0>)
 80088e6:	bfbc      	itt	lt
 80088e8:	2201      	movlt	r2, #1
 80088ea:	6032      	strlt	r2, [r6, #0]
 80088ec:	43bb      	bics	r3, r7
 80088ee:	d112      	bne.n	8008916 <_dtoa_r+0x9e>
 80088f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80088f6:	6013      	str	r3, [r2, #0]
 80088f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088fc:	4323      	orrs	r3, r4
 80088fe:	f000 854d 	beq.w	800939c <_dtoa_r+0xb24>
 8008902:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008904:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008b5c <_dtoa_r+0x2e4>
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 854f 	beq.w	80093ac <_dtoa_r+0xb34>
 800890e:	f10a 0303 	add.w	r3, sl, #3
 8008912:	f000 bd49 	b.w	80093a8 <_dtoa_r+0xb30>
 8008916:	ed9d 7b02 	vldr	d7, [sp, #8]
 800891a:	2200      	movs	r2, #0
 800891c:	ec51 0b17 	vmov	r0, r1, d7
 8008920:	2300      	movs	r3, #0
 8008922:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008926:	f7f8 f8ef 	bl	8000b08 <__aeabi_dcmpeq>
 800892a:	4680      	mov	r8, r0
 800892c:	b158      	cbz	r0, 8008946 <_dtoa_r+0xce>
 800892e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008930:	2301      	movs	r3, #1
 8008932:	6013      	str	r3, [r2, #0]
 8008934:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008936:	b113      	cbz	r3, 800893e <_dtoa_r+0xc6>
 8008938:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800893a:	4b84      	ldr	r3, [pc, #528]	@ (8008b4c <_dtoa_r+0x2d4>)
 800893c:	6013      	str	r3, [r2, #0]
 800893e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008b60 <_dtoa_r+0x2e8>
 8008942:	f000 bd33 	b.w	80093ac <_dtoa_r+0xb34>
 8008946:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800894a:	aa16      	add	r2, sp, #88	@ 0x58
 800894c:	a917      	add	r1, sp, #92	@ 0x5c
 800894e:	4658      	mov	r0, fp
 8008950:	f001 fa3a 	bl	8009dc8 <__d2b>
 8008954:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008958:	4681      	mov	r9, r0
 800895a:	2e00      	cmp	r6, #0
 800895c:	d077      	beq.n	8008a4e <_dtoa_r+0x1d6>
 800895e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008960:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008968:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800896c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008970:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008974:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008978:	4619      	mov	r1, r3
 800897a:	2200      	movs	r2, #0
 800897c:	4b74      	ldr	r3, [pc, #464]	@ (8008b50 <_dtoa_r+0x2d8>)
 800897e:	f7f7 fca3 	bl	80002c8 <__aeabi_dsub>
 8008982:	a369      	add	r3, pc, #420	@ (adr r3, 8008b28 <_dtoa_r+0x2b0>)
 8008984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008988:	f7f7 fe56 	bl	8000638 <__aeabi_dmul>
 800898c:	a368      	add	r3, pc, #416	@ (adr r3, 8008b30 <_dtoa_r+0x2b8>)
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	f7f7 fc9b 	bl	80002cc <__adddf3>
 8008996:	4604      	mov	r4, r0
 8008998:	4630      	mov	r0, r6
 800899a:	460d      	mov	r5, r1
 800899c:	f7f7 fde2 	bl	8000564 <__aeabi_i2d>
 80089a0:	a365      	add	r3, pc, #404	@ (adr r3, 8008b38 <_dtoa_r+0x2c0>)
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	f7f7 fe47 	bl	8000638 <__aeabi_dmul>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	4620      	mov	r0, r4
 80089b0:	4629      	mov	r1, r5
 80089b2:	f7f7 fc8b 	bl	80002cc <__adddf3>
 80089b6:	4604      	mov	r4, r0
 80089b8:	460d      	mov	r5, r1
 80089ba:	f7f8 f8ed 	bl	8000b98 <__aeabi_d2iz>
 80089be:	2200      	movs	r2, #0
 80089c0:	4607      	mov	r7, r0
 80089c2:	2300      	movs	r3, #0
 80089c4:	4620      	mov	r0, r4
 80089c6:	4629      	mov	r1, r5
 80089c8:	f7f8 f8a8 	bl	8000b1c <__aeabi_dcmplt>
 80089cc:	b140      	cbz	r0, 80089e0 <_dtoa_r+0x168>
 80089ce:	4638      	mov	r0, r7
 80089d0:	f7f7 fdc8 	bl	8000564 <__aeabi_i2d>
 80089d4:	4622      	mov	r2, r4
 80089d6:	462b      	mov	r3, r5
 80089d8:	f7f8 f896 	bl	8000b08 <__aeabi_dcmpeq>
 80089dc:	b900      	cbnz	r0, 80089e0 <_dtoa_r+0x168>
 80089de:	3f01      	subs	r7, #1
 80089e0:	2f16      	cmp	r7, #22
 80089e2:	d851      	bhi.n	8008a88 <_dtoa_r+0x210>
 80089e4:	4b5b      	ldr	r3, [pc, #364]	@ (8008b54 <_dtoa_r+0x2dc>)
 80089e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089f2:	f7f8 f893 	bl	8000b1c <__aeabi_dcmplt>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d048      	beq.n	8008a8c <_dtoa_r+0x214>
 80089fa:	3f01      	subs	r7, #1
 80089fc:	2300      	movs	r3, #0
 80089fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8008a00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a02:	1b9b      	subs	r3, r3, r6
 8008a04:	1e5a      	subs	r2, r3, #1
 8008a06:	bf44      	itt	mi
 8008a08:	f1c3 0801 	rsbmi	r8, r3, #1
 8008a0c:	2300      	movmi	r3, #0
 8008a0e:	9208      	str	r2, [sp, #32]
 8008a10:	bf54      	ite	pl
 8008a12:	f04f 0800 	movpl.w	r8, #0
 8008a16:	9308      	strmi	r3, [sp, #32]
 8008a18:	2f00      	cmp	r7, #0
 8008a1a:	db39      	blt.n	8008a90 <_dtoa_r+0x218>
 8008a1c:	9b08      	ldr	r3, [sp, #32]
 8008a1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008a20:	443b      	add	r3, r7
 8008a22:	9308      	str	r3, [sp, #32]
 8008a24:	2300      	movs	r3, #0
 8008a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a2a:	2b09      	cmp	r3, #9
 8008a2c:	d864      	bhi.n	8008af8 <_dtoa_r+0x280>
 8008a2e:	2b05      	cmp	r3, #5
 8008a30:	bfc4      	itt	gt
 8008a32:	3b04      	subgt	r3, #4
 8008a34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a38:	f1a3 0302 	sub.w	r3, r3, #2
 8008a3c:	bfcc      	ite	gt
 8008a3e:	2400      	movgt	r4, #0
 8008a40:	2401      	movle	r4, #1
 8008a42:	2b03      	cmp	r3, #3
 8008a44:	d863      	bhi.n	8008b0e <_dtoa_r+0x296>
 8008a46:	e8df f003 	tbb	[pc, r3]
 8008a4a:	372a      	.short	0x372a
 8008a4c:	5535      	.short	0x5535
 8008a4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008a52:	441e      	add	r6, r3
 8008a54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008a58:	2b20      	cmp	r3, #32
 8008a5a:	bfc1      	itttt	gt
 8008a5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008a60:	409f      	lslgt	r7, r3
 8008a62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008a6a:	bfd6      	itet	le
 8008a6c:	f1c3 0320 	rsble	r3, r3, #32
 8008a70:	ea47 0003 	orrgt.w	r0, r7, r3
 8008a74:	fa04 f003 	lslle.w	r0, r4, r3
 8008a78:	f7f7 fd64 	bl	8000544 <__aeabi_ui2d>
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008a82:	3e01      	subs	r6, #1
 8008a84:	9214      	str	r2, [sp, #80]	@ 0x50
 8008a86:	e777      	b.n	8008978 <_dtoa_r+0x100>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e7b8      	b.n	80089fe <_dtoa_r+0x186>
 8008a8c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008a8e:	e7b7      	b.n	8008a00 <_dtoa_r+0x188>
 8008a90:	427b      	negs	r3, r7
 8008a92:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a94:	2300      	movs	r3, #0
 8008a96:	eba8 0807 	sub.w	r8, r8, r7
 8008a9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a9c:	e7c4      	b.n	8008a28 <_dtoa_r+0x1b0>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008aa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	dc35      	bgt.n	8008b14 <_dtoa_r+0x29c>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	9307      	str	r3, [sp, #28]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ab2:	e00b      	b.n	8008acc <_dtoa_r+0x254>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e7f3      	b.n	8008aa0 <_dtoa_r+0x228>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008abc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008abe:	18fb      	adds	r3, r7, r3
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	9307      	str	r3, [sp, #28]
 8008ac8:	bfb8      	it	lt
 8008aca:	2301      	movlt	r3, #1
 8008acc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	2204      	movs	r2, #4
 8008ad4:	f102 0514 	add.w	r5, r2, #20
 8008ad8:	429d      	cmp	r5, r3
 8008ada:	d91f      	bls.n	8008b1c <_dtoa_r+0x2a4>
 8008adc:	6041      	str	r1, [r0, #4]
 8008ade:	4658      	mov	r0, fp
 8008ae0:	f000 fd8e 	bl	8009600 <_Balloc>
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d13c      	bne.n	8008b64 <_dtoa_r+0x2ec>
 8008aea:	4b1b      	ldr	r3, [pc, #108]	@ (8008b58 <_dtoa_r+0x2e0>)
 8008aec:	4602      	mov	r2, r0
 8008aee:	f240 11af 	movw	r1, #431	@ 0x1af
 8008af2:	e6d8      	b.n	80088a6 <_dtoa_r+0x2e>
 8008af4:	2301      	movs	r3, #1
 8008af6:	e7e0      	b.n	8008aba <_dtoa_r+0x242>
 8008af8:	2401      	movs	r4, #1
 8008afa:	2300      	movs	r3, #0
 8008afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008afe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008b00:	f04f 33ff 	mov.w	r3, #4294967295
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	9307      	str	r3, [sp, #28]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	2312      	movs	r3, #18
 8008b0c:	e7d0      	b.n	8008ab0 <_dtoa_r+0x238>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b12:	e7f5      	b.n	8008b00 <_dtoa_r+0x288>
 8008b14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	9307      	str	r3, [sp, #28]
 8008b1a:	e7d7      	b.n	8008acc <_dtoa_r+0x254>
 8008b1c:	3101      	adds	r1, #1
 8008b1e:	0052      	lsls	r2, r2, #1
 8008b20:	e7d8      	b.n	8008ad4 <_dtoa_r+0x25c>
 8008b22:	bf00      	nop
 8008b24:	f3af 8000 	nop.w
 8008b28:	636f4361 	.word	0x636f4361
 8008b2c:	3fd287a7 	.word	0x3fd287a7
 8008b30:	8b60c8b3 	.word	0x8b60c8b3
 8008b34:	3fc68a28 	.word	0x3fc68a28
 8008b38:	509f79fb 	.word	0x509f79fb
 8008b3c:	3fd34413 	.word	0x3fd34413
 8008b40:	0800ccda 	.word	0x0800ccda
 8008b44:	0800ccf1 	.word	0x0800ccf1
 8008b48:	7ff00000 	.word	0x7ff00000
 8008b4c:	0800cca5 	.word	0x0800cca5
 8008b50:	3ff80000 	.word	0x3ff80000
 8008b54:	0800cde8 	.word	0x0800cde8
 8008b58:	0800cd49 	.word	0x0800cd49
 8008b5c:	0800ccd6 	.word	0x0800ccd6
 8008b60:	0800cca4 	.word	0x0800cca4
 8008b64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b68:	6018      	str	r0, [r3, #0]
 8008b6a:	9b07      	ldr	r3, [sp, #28]
 8008b6c:	2b0e      	cmp	r3, #14
 8008b6e:	f200 80a4 	bhi.w	8008cba <_dtoa_r+0x442>
 8008b72:	2c00      	cmp	r4, #0
 8008b74:	f000 80a1 	beq.w	8008cba <_dtoa_r+0x442>
 8008b78:	2f00      	cmp	r7, #0
 8008b7a:	dd33      	ble.n	8008be4 <_dtoa_r+0x36c>
 8008b7c:	4bad      	ldr	r3, [pc, #692]	@ (8008e34 <_dtoa_r+0x5bc>)
 8008b7e:	f007 020f 	and.w	r2, r7, #15
 8008b82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b86:	ed93 7b00 	vldr	d7, [r3]
 8008b8a:	05f8      	lsls	r0, r7, #23
 8008b8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b94:	d516      	bpl.n	8008bc4 <_dtoa_r+0x34c>
 8008b96:	4ba8      	ldr	r3, [pc, #672]	@ (8008e38 <_dtoa_r+0x5c0>)
 8008b98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ba0:	f7f7 fe74 	bl	800088c <__aeabi_ddiv>
 8008ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ba8:	f004 040f 	and.w	r4, r4, #15
 8008bac:	2603      	movs	r6, #3
 8008bae:	4da2      	ldr	r5, [pc, #648]	@ (8008e38 <_dtoa_r+0x5c0>)
 8008bb0:	b954      	cbnz	r4, 8008bc8 <_dtoa_r+0x350>
 8008bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bba:	f7f7 fe67 	bl	800088c <__aeabi_ddiv>
 8008bbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bc2:	e028      	b.n	8008c16 <_dtoa_r+0x39e>
 8008bc4:	2602      	movs	r6, #2
 8008bc6:	e7f2      	b.n	8008bae <_dtoa_r+0x336>
 8008bc8:	07e1      	lsls	r1, r4, #31
 8008bca:	d508      	bpl.n	8008bde <_dtoa_r+0x366>
 8008bcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008bd4:	f7f7 fd30 	bl	8000638 <__aeabi_dmul>
 8008bd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bdc:	3601      	adds	r6, #1
 8008bde:	1064      	asrs	r4, r4, #1
 8008be0:	3508      	adds	r5, #8
 8008be2:	e7e5      	b.n	8008bb0 <_dtoa_r+0x338>
 8008be4:	f000 80d2 	beq.w	8008d8c <_dtoa_r+0x514>
 8008be8:	427c      	negs	r4, r7
 8008bea:	4b92      	ldr	r3, [pc, #584]	@ (8008e34 <_dtoa_r+0x5bc>)
 8008bec:	4d92      	ldr	r5, [pc, #584]	@ (8008e38 <_dtoa_r+0x5c0>)
 8008bee:	f004 020f 	and.w	r2, r4, #15
 8008bf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bfe:	f7f7 fd1b 	bl	8000638 <__aeabi_dmul>
 8008c02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c06:	1124      	asrs	r4, r4, #4
 8008c08:	2300      	movs	r3, #0
 8008c0a:	2602      	movs	r6, #2
 8008c0c:	2c00      	cmp	r4, #0
 8008c0e:	f040 80b2 	bne.w	8008d76 <_dtoa_r+0x4fe>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1d3      	bne.n	8008bbe <_dtoa_r+0x346>
 8008c16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 80b7 	beq.w	8008d90 <_dtoa_r+0x518>
 8008c22:	4b86      	ldr	r3, [pc, #536]	@ (8008e3c <_dtoa_r+0x5c4>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	4620      	mov	r0, r4
 8008c28:	4629      	mov	r1, r5
 8008c2a:	f7f7 ff77 	bl	8000b1c <__aeabi_dcmplt>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	f000 80ae 	beq.w	8008d90 <_dtoa_r+0x518>
 8008c34:	9b07      	ldr	r3, [sp, #28]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f000 80aa 	beq.w	8008d90 <_dtoa_r+0x518>
 8008c3c:	9b00      	ldr	r3, [sp, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	dd37      	ble.n	8008cb2 <_dtoa_r+0x43a>
 8008c42:	1e7b      	subs	r3, r7, #1
 8008c44:	9304      	str	r3, [sp, #16]
 8008c46:	4620      	mov	r0, r4
 8008c48:	4b7d      	ldr	r3, [pc, #500]	@ (8008e40 <_dtoa_r+0x5c8>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	f7f7 fcf3 	bl	8000638 <__aeabi_dmul>
 8008c52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c56:	9c00      	ldr	r4, [sp, #0]
 8008c58:	3601      	adds	r6, #1
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f7f7 fc82 	bl	8000564 <__aeabi_i2d>
 8008c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c64:	f7f7 fce8 	bl	8000638 <__aeabi_dmul>
 8008c68:	4b76      	ldr	r3, [pc, #472]	@ (8008e44 <_dtoa_r+0x5cc>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f7f7 fb2e 	bl	80002cc <__adddf3>
 8008c70:	4605      	mov	r5, r0
 8008c72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008c76:	2c00      	cmp	r4, #0
 8008c78:	f040 808d 	bne.w	8008d96 <_dtoa_r+0x51e>
 8008c7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c80:	4b71      	ldr	r3, [pc, #452]	@ (8008e48 <_dtoa_r+0x5d0>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	f7f7 fb20 	bl	80002c8 <__aeabi_dsub>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c90:	462a      	mov	r2, r5
 8008c92:	4633      	mov	r3, r6
 8008c94:	f7f7 ff60 	bl	8000b58 <__aeabi_dcmpgt>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	f040 828b 	bne.w	80091b4 <_dtoa_r+0x93c>
 8008c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ca8:	f7f7 ff38 	bl	8000b1c <__aeabi_dcmplt>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	f040 8128 	bne.w	8008f02 <_dtoa_r+0x68a>
 8008cb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008cb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008cba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f2c0 815a 	blt.w	8008f76 <_dtoa_r+0x6fe>
 8008cc2:	2f0e      	cmp	r7, #14
 8008cc4:	f300 8157 	bgt.w	8008f76 <_dtoa_r+0x6fe>
 8008cc8:	4b5a      	ldr	r3, [pc, #360]	@ (8008e34 <_dtoa_r+0x5bc>)
 8008cca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008cce:	ed93 7b00 	vldr	d7, [r3]
 8008cd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	ed8d 7b00 	vstr	d7, [sp]
 8008cda:	da03      	bge.n	8008ce4 <_dtoa_r+0x46c>
 8008cdc:	9b07      	ldr	r3, [sp, #28]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f340 8101 	ble.w	8008ee6 <_dtoa_r+0x66e>
 8008ce4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ce8:	4656      	mov	r6, sl
 8008cea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cee:	4620      	mov	r0, r4
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	f7f7 fdcb 	bl	800088c <__aeabi_ddiv>
 8008cf6:	f7f7 ff4f 	bl	8000b98 <__aeabi_d2iz>
 8008cfa:	4680      	mov	r8, r0
 8008cfc:	f7f7 fc32 	bl	8000564 <__aeabi_i2d>
 8008d00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d04:	f7f7 fc98 	bl	8000638 <__aeabi_dmul>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	4629      	mov	r1, r5
 8008d10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008d14:	f7f7 fad8 	bl	80002c8 <__aeabi_dsub>
 8008d18:	f806 4b01 	strb.w	r4, [r6], #1
 8008d1c:	9d07      	ldr	r5, [sp, #28]
 8008d1e:	eba6 040a 	sub.w	r4, r6, sl
 8008d22:	42a5      	cmp	r5, r4
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	f040 8117 	bne.w	8008f5a <_dtoa_r+0x6e2>
 8008d2c:	f7f7 face 	bl	80002cc <__adddf3>
 8008d30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d34:	4604      	mov	r4, r0
 8008d36:	460d      	mov	r5, r1
 8008d38:	f7f7 ff0e 	bl	8000b58 <__aeabi_dcmpgt>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	f040 80f9 	bne.w	8008f34 <_dtoa_r+0x6bc>
 8008d42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d46:	4620      	mov	r0, r4
 8008d48:	4629      	mov	r1, r5
 8008d4a:	f7f7 fedd 	bl	8000b08 <__aeabi_dcmpeq>
 8008d4e:	b118      	cbz	r0, 8008d58 <_dtoa_r+0x4e0>
 8008d50:	f018 0f01 	tst.w	r8, #1
 8008d54:	f040 80ee 	bne.w	8008f34 <_dtoa_r+0x6bc>
 8008d58:	4649      	mov	r1, r9
 8008d5a:	4658      	mov	r0, fp
 8008d5c:	f000 fc90 	bl	8009680 <_Bfree>
 8008d60:	2300      	movs	r3, #0
 8008d62:	7033      	strb	r3, [r6, #0]
 8008d64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d66:	3701      	adds	r7, #1
 8008d68:	601f      	str	r7, [r3, #0]
 8008d6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f000 831d 	beq.w	80093ac <_dtoa_r+0xb34>
 8008d72:	601e      	str	r6, [r3, #0]
 8008d74:	e31a      	b.n	80093ac <_dtoa_r+0xb34>
 8008d76:	07e2      	lsls	r2, r4, #31
 8008d78:	d505      	bpl.n	8008d86 <_dtoa_r+0x50e>
 8008d7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d7e:	f7f7 fc5b 	bl	8000638 <__aeabi_dmul>
 8008d82:	3601      	adds	r6, #1
 8008d84:	2301      	movs	r3, #1
 8008d86:	1064      	asrs	r4, r4, #1
 8008d88:	3508      	adds	r5, #8
 8008d8a:	e73f      	b.n	8008c0c <_dtoa_r+0x394>
 8008d8c:	2602      	movs	r6, #2
 8008d8e:	e742      	b.n	8008c16 <_dtoa_r+0x39e>
 8008d90:	9c07      	ldr	r4, [sp, #28]
 8008d92:	9704      	str	r7, [sp, #16]
 8008d94:	e761      	b.n	8008c5a <_dtoa_r+0x3e2>
 8008d96:	4b27      	ldr	r3, [pc, #156]	@ (8008e34 <_dtoa_r+0x5bc>)
 8008d98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008da2:	4454      	add	r4, sl
 8008da4:	2900      	cmp	r1, #0
 8008da6:	d053      	beq.n	8008e50 <_dtoa_r+0x5d8>
 8008da8:	4928      	ldr	r1, [pc, #160]	@ (8008e4c <_dtoa_r+0x5d4>)
 8008daa:	2000      	movs	r0, #0
 8008dac:	f7f7 fd6e 	bl	800088c <__aeabi_ddiv>
 8008db0:	4633      	mov	r3, r6
 8008db2:	462a      	mov	r2, r5
 8008db4:	f7f7 fa88 	bl	80002c8 <__aeabi_dsub>
 8008db8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008dbc:	4656      	mov	r6, sl
 8008dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dc2:	f7f7 fee9 	bl	8000b98 <__aeabi_d2iz>
 8008dc6:	4605      	mov	r5, r0
 8008dc8:	f7f7 fbcc 	bl	8000564 <__aeabi_i2d>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dd4:	f7f7 fa78 	bl	80002c8 <__aeabi_dsub>
 8008dd8:	3530      	adds	r5, #48	@ 0x30
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008de2:	f806 5b01 	strb.w	r5, [r6], #1
 8008de6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008dea:	f7f7 fe97 	bl	8000b1c <__aeabi_dcmplt>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d171      	bne.n	8008ed6 <_dtoa_r+0x65e>
 8008df2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008df6:	4911      	ldr	r1, [pc, #68]	@ (8008e3c <_dtoa_r+0x5c4>)
 8008df8:	2000      	movs	r0, #0
 8008dfa:	f7f7 fa65 	bl	80002c8 <__aeabi_dsub>
 8008dfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e02:	f7f7 fe8b 	bl	8000b1c <__aeabi_dcmplt>
 8008e06:	2800      	cmp	r0, #0
 8008e08:	f040 8095 	bne.w	8008f36 <_dtoa_r+0x6be>
 8008e0c:	42a6      	cmp	r6, r4
 8008e0e:	f43f af50 	beq.w	8008cb2 <_dtoa_r+0x43a>
 8008e12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e16:	4b0a      	ldr	r3, [pc, #40]	@ (8008e40 <_dtoa_r+0x5c8>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f7f7 fc0d 	bl	8000638 <__aeabi_dmul>
 8008e1e:	4b08      	ldr	r3, [pc, #32]	@ (8008e40 <_dtoa_r+0x5c8>)
 8008e20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e24:	2200      	movs	r2, #0
 8008e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e2a:	f7f7 fc05 	bl	8000638 <__aeabi_dmul>
 8008e2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e32:	e7c4      	b.n	8008dbe <_dtoa_r+0x546>
 8008e34:	0800cde8 	.word	0x0800cde8
 8008e38:	0800cdc0 	.word	0x0800cdc0
 8008e3c:	3ff00000 	.word	0x3ff00000
 8008e40:	40240000 	.word	0x40240000
 8008e44:	401c0000 	.word	0x401c0000
 8008e48:	40140000 	.word	0x40140000
 8008e4c:	3fe00000 	.word	0x3fe00000
 8008e50:	4631      	mov	r1, r6
 8008e52:	4628      	mov	r0, r5
 8008e54:	f7f7 fbf0 	bl	8000638 <__aeabi_dmul>
 8008e58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e5c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008e5e:	4656      	mov	r6, sl
 8008e60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e64:	f7f7 fe98 	bl	8000b98 <__aeabi_d2iz>
 8008e68:	4605      	mov	r5, r0
 8008e6a:	f7f7 fb7b 	bl	8000564 <__aeabi_i2d>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e76:	f7f7 fa27 	bl	80002c8 <__aeabi_dsub>
 8008e7a:	3530      	adds	r5, #48	@ 0x30
 8008e7c:	f806 5b01 	strb.w	r5, [r6], #1
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	42a6      	cmp	r6, r4
 8008e86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e8a:	f04f 0200 	mov.w	r2, #0
 8008e8e:	d124      	bne.n	8008eda <_dtoa_r+0x662>
 8008e90:	4bac      	ldr	r3, [pc, #688]	@ (8009144 <_dtoa_r+0x8cc>)
 8008e92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e96:	f7f7 fa19 	bl	80002cc <__adddf3>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ea2:	f7f7 fe59 	bl	8000b58 <__aeabi_dcmpgt>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d145      	bne.n	8008f36 <_dtoa_r+0x6be>
 8008eaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008eae:	49a5      	ldr	r1, [pc, #660]	@ (8009144 <_dtoa_r+0x8cc>)
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	f7f7 fa09 	bl	80002c8 <__aeabi_dsub>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ebe:	f7f7 fe2d 	bl	8000b1c <__aeabi_dcmplt>
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	f43f aef5 	beq.w	8008cb2 <_dtoa_r+0x43a>
 8008ec8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008eca:	1e73      	subs	r3, r6, #1
 8008ecc:	9315      	str	r3, [sp, #84]	@ 0x54
 8008ece:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ed2:	2b30      	cmp	r3, #48	@ 0x30
 8008ed4:	d0f8      	beq.n	8008ec8 <_dtoa_r+0x650>
 8008ed6:	9f04      	ldr	r7, [sp, #16]
 8008ed8:	e73e      	b.n	8008d58 <_dtoa_r+0x4e0>
 8008eda:	4b9b      	ldr	r3, [pc, #620]	@ (8009148 <_dtoa_r+0x8d0>)
 8008edc:	f7f7 fbac 	bl	8000638 <__aeabi_dmul>
 8008ee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ee4:	e7bc      	b.n	8008e60 <_dtoa_r+0x5e8>
 8008ee6:	d10c      	bne.n	8008f02 <_dtoa_r+0x68a>
 8008ee8:	4b98      	ldr	r3, [pc, #608]	@ (800914c <_dtoa_r+0x8d4>)
 8008eea:	2200      	movs	r2, #0
 8008eec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ef0:	f7f7 fba2 	bl	8000638 <__aeabi_dmul>
 8008ef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ef8:	f7f7 fe24 	bl	8000b44 <__aeabi_dcmpge>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	f000 8157 	beq.w	80091b0 <_dtoa_r+0x938>
 8008f02:	2400      	movs	r4, #0
 8008f04:	4625      	mov	r5, r4
 8008f06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f08:	43db      	mvns	r3, r3
 8008f0a:	9304      	str	r3, [sp, #16]
 8008f0c:	4656      	mov	r6, sl
 8008f0e:	2700      	movs	r7, #0
 8008f10:	4621      	mov	r1, r4
 8008f12:	4658      	mov	r0, fp
 8008f14:	f000 fbb4 	bl	8009680 <_Bfree>
 8008f18:	2d00      	cmp	r5, #0
 8008f1a:	d0dc      	beq.n	8008ed6 <_dtoa_r+0x65e>
 8008f1c:	b12f      	cbz	r7, 8008f2a <_dtoa_r+0x6b2>
 8008f1e:	42af      	cmp	r7, r5
 8008f20:	d003      	beq.n	8008f2a <_dtoa_r+0x6b2>
 8008f22:	4639      	mov	r1, r7
 8008f24:	4658      	mov	r0, fp
 8008f26:	f000 fbab 	bl	8009680 <_Bfree>
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	4658      	mov	r0, fp
 8008f2e:	f000 fba7 	bl	8009680 <_Bfree>
 8008f32:	e7d0      	b.n	8008ed6 <_dtoa_r+0x65e>
 8008f34:	9704      	str	r7, [sp, #16]
 8008f36:	4633      	mov	r3, r6
 8008f38:	461e      	mov	r6, r3
 8008f3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f3e:	2a39      	cmp	r2, #57	@ 0x39
 8008f40:	d107      	bne.n	8008f52 <_dtoa_r+0x6da>
 8008f42:	459a      	cmp	sl, r3
 8008f44:	d1f8      	bne.n	8008f38 <_dtoa_r+0x6c0>
 8008f46:	9a04      	ldr	r2, [sp, #16]
 8008f48:	3201      	adds	r2, #1
 8008f4a:	9204      	str	r2, [sp, #16]
 8008f4c:	2230      	movs	r2, #48	@ 0x30
 8008f4e:	f88a 2000 	strb.w	r2, [sl]
 8008f52:	781a      	ldrb	r2, [r3, #0]
 8008f54:	3201      	adds	r2, #1
 8008f56:	701a      	strb	r2, [r3, #0]
 8008f58:	e7bd      	b.n	8008ed6 <_dtoa_r+0x65e>
 8008f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8009148 <_dtoa_r+0x8d0>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f7f7 fb6b 	bl	8000638 <__aeabi_dmul>
 8008f62:	2200      	movs	r2, #0
 8008f64:	2300      	movs	r3, #0
 8008f66:	4604      	mov	r4, r0
 8008f68:	460d      	mov	r5, r1
 8008f6a:	f7f7 fdcd 	bl	8000b08 <__aeabi_dcmpeq>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	f43f aebb 	beq.w	8008cea <_dtoa_r+0x472>
 8008f74:	e6f0      	b.n	8008d58 <_dtoa_r+0x4e0>
 8008f76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f78:	2a00      	cmp	r2, #0
 8008f7a:	f000 80db 	beq.w	8009134 <_dtoa_r+0x8bc>
 8008f7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f80:	2a01      	cmp	r2, #1
 8008f82:	f300 80bf 	bgt.w	8009104 <_dtoa_r+0x88c>
 8008f86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008f88:	2a00      	cmp	r2, #0
 8008f8a:	f000 80b7 	beq.w	80090fc <_dtoa_r+0x884>
 8008f8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f94:	4646      	mov	r6, r8
 8008f96:	9a08      	ldr	r2, [sp, #32]
 8008f98:	2101      	movs	r1, #1
 8008f9a:	441a      	add	r2, r3
 8008f9c:	4658      	mov	r0, fp
 8008f9e:	4498      	add	r8, r3
 8008fa0:	9208      	str	r2, [sp, #32]
 8008fa2:	f000 fc6b 	bl	800987c <__i2b>
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	b15e      	cbz	r6, 8008fc2 <_dtoa_r+0x74a>
 8008faa:	9b08      	ldr	r3, [sp, #32]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	dd08      	ble.n	8008fc2 <_dtoa_r+0x74a>
 8008fb0:	42b3      	cmp	r3, r6
 8008fb2:	9a08      	ldr	r2, [sp, #32]
 8008fb4:	bfa8      	it	ge
 8008fb6:	4633      	movge	r3, r6
 8008fb8:	eba8 0803 	sub.w	r8, r8, r3
 8008fbc:	1af6      	subs	r6, r6, r3
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	9308      	str	r3, [sp, #32]
 8008fc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fc4:	b1f3      	cbz	r3, 8009004 <_dtoa_r+0x78c>
 8008fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 80b7 	beq.w	800913c <_dtoa_r+0x8c4>
 8008fce:	b18c      	cbz	r4, 8008ff4 <_dtoa_r+0x77c>
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	4622      	mov	r2, r4
 8008fd4:	4658      	mov	r0, fp
 8008fd6:	f000 fd11 	bl	80099fc <__pow5mult>
 8008fda:	464a      	mov	r2, r9
 8008fdc:	4601      	mov	r1, r0
 8008fde:	4605      	mov	r5, r0
 8008fe0:	4658      	mov	r0, fp
 8008fe2:	f000 fc61 	bl	80098a8 <__multiply>
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	9004      	str	r0, [sp, #16]
 8008fea:	4658      	mov	r0, fp
 8008fec:	f000 fb48 	bl	8009680 <_Bfree>
 8008ff0:	9b04      	ldr	r3, [sp, #16]
 8008ff2:	4699      	mov	r9, r3
 8008ff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ff6:	1b1a      	subs	r2, r3, r4
 8008ff8:	d004      	beq.n	8009004 <_dtoa_r+0x78c>
 8008ffa:	4649      	mov	r1, r9
 8008ffc:	4658      	mov	r0, fp
 8008ffe:	f000 fcfd 	bl	80099fc <__pow5mult>
 8009002:	4681      	mov	r9, r0
 8009004:	2101      	movs	r1, #1
 8009006:	4658      	mov	r0, fp
 8009008:	f000 fc38 	bl	800987c <__i2b>
 800900c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800900e:	4604      	mov	r4, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 81cf 	beq.w	80093b4 <_dtoa_r+0xb3c>
 8009016:	461a      	mov	r2, r3
 8009018:	4601      	mov	r1, r0
 800901a:	4658      	mov	r0, fp
 800901c:	f000 fcee 	bl	80099fc <__pow5mult>
 8009020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009022:	2b01      	cmp	r3, #1
 8009024:	4604      	mov	r4, r0
 8009026:	f300 8095 	bgt.w	8009154 <_dtoa_r+0x8dc>
 800902a:	9b02      	ldr	r3, [sp, #8]
 800902c:	2b00      	cmp	r3, #0
 800902e:	f040 8087 	bne.w	8009140 <_dtoa_r+0x8c8>
 8009032:	9b03      	ldr	r3, [sp, #12]
 8009034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009038:	2b00      	cmp	r3, #0
 800903a:	f040 8089 	bne.w	8009150 <_dtoa_r+0x8d8>
 800903e:	9b03      	ldr	r3, [sp, #12]
 8009040:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009044:	0d1b      	lsrs	r3, r3, #20
 8009046:	051b      	lsls	r3, r3, #20
 8009048:	b12b      	cbz	r3, 8009056 <_dtoa_r+0x7de>
 800904a:	9b08      	ldr	r3, [sp, #32]
 800904c:	3301      	adds	r3, #1
 800904e:	9308      	str	r3, [sp, #32]
 8009050:	f108 0801 	add.w	r8, r8, #1
 8009054:	2301      	movs	r3, #1
 8009056:	930a      	str	r3, [sp, #40]	@ 0x28
 8009058:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 81b0 	beq.w	80093c0 <_dtoa_r+0xb48>
 8009060:	6923      	ldr	r3, [r4, #16]
 8009062:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009066:	6918      	ldr	r0, [r3, #16]
 8009068:	f000 fbbc 	bl	80097e4 <__hi0bits>
 800906c:	f1c0 0020 	rsb	r0, r0, #32
 8009070:	9b08      	ldr	r3, [sp, #32]
 8009072:	4418      	add	r0, r3
 8009074:	f010 001f 	ands.w	r0, r0, #31
 8009078:	d077      	beq.n	800916a <_dtoa_r+0x8f2>
 800907a:	f1c0 0320 	rsb	r3, r0, #32
 800907e:	2b04      	cmp	r3, #4
 8009080:	dd6b      	ble.n	800915a <_dtoa_r+0x8e2>
 8009082:	9b08      	ldr	r3, [sp, #32]
 8009084:	f1c0 001c 	rsb	r0, r0, #28
 8009088:	4403      	add	r3, r0
 800908a:	4480      	add	r8, r0
 800908c:	4406      	add	r6, r0
 800908e:	9308      	str	r3, [sp, #32]
 8009090:	f1b8 0f00 	cmp.w	r8, #0
 8009094:	dd05      	ble.n	80090a2 <_dtoa_r+0x82a>
 8009096:	4649      	mov	r1, r9
 8009098:	4642      	mov	r2, r8
 800909a:	4658      	mov	r0, fp
 800909c:	f000 fd08 	bl	8009ab0 <__lshift>
 80090a0:	4681      	mov	r9, r0
 80090a2:	9b08      	ldr	r3, [sp, #32]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	dd05      	ble.n	80090b4 <_dtoa_r+0x83c>
 80090a8:	4621      	mov	r1, r4
 80090aa:	461a      	mov	r2, r3
 80090ac:	4658      	mov	r0, fp
 80090ae:	f000 fcff 	bl	8009ab0 <__lshift>
 80090b2:	4604      	mov	r4, r0
 80090b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d059      	beq.n	800916e <_dtoa_r+0x8f6>
 80090ba:	4621      	mov	r1, r4
 80090bc:	4648      	mov	r0, r9
 80090be:	f000 fd63 	bl	8009b88 <__mcmp>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	da53      	bge.n	800916e <_dtoa_r+0x8f6>
 80090c6:	1e7b      	subs	r3, r7, #1
 80090c8:	9304      	str	r3, [sp, #16]
 80090ca:	4649      	mov	r1, r9
 80090cc:	2300      	movs	r3, #0
 80090ce:	220a      	movs	r2, #10
 80090d0:	4658      	mov	r0, fp
 80090d2:	f000 faf7 	bl	80096c4 <__multadd>
 80090d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090d8:	4681      	mov	r9, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 8172 	beq.w	80093c4 <_dtoa_r+0xb4c>
 80090e0:	2300      	movs	r3, #0
 80090e2:	4629      	mov	r1, r5
 80090e4:	220a      	movs	r2, #10
 80090e6:	4658      	mov	r0, fp
 80090e8:	f000 faec 	bl	80096c4 <__multadd>
 80090ec:	9b00      	ldr	r3, [sp, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	4605      	mov	r5, r0
 80090f2:	dc67      	bgt.n	80091c4 <_dtoa_r+0x94c>
 80090f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	dc41      	bgt.n	800917e <_dtoa_r+0x906>
 80090fa:	e063      	b.n	80091c4 <_dtoa_r+0x94c>
 80090fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80090fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009102:	e746      	b.n	8008f92 <_dtoa_r+0x71a>
 8009104:	9b07      	ldr	r3, [sp, #28]
 8009106:	1e5c      	subs	r4, r3, #1
 8009108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800910a:	42a3      	cmp	r3, r4
 800910c:	bfbf      	itttt	lt
 800910e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009110:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009112:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009114:	1ae3      	sublt	r3, r4, r3
 8009116:	bfb4      	ite	lt
 8009118:	18d2      	addlt	r2, r2, r3
 800911a:	1b1c      	subge	r4, r3, r4
 800911c:	9b07      	ldr	r3, [sp, #28]
 800911e:	bfbc      	itt	lt
 8009120:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009122:	2400      	movlt	r4, #0
 8009124:	2b00      	cmp	r3, #0
 8009126:	bfb5      	itete	lt
 8009128:	eba8 0603 	sublt.w	r6, r8, r3
 800912c:	9b07      	ldrge	r3, [sp, #28]
 800912e:	2300      	movlt	r3, #0
 8009130:	4646      	movge	r6, r8
 8009132:	e730      	b.n	8008f96 <_dtoa_r+0x71e>
 8009134:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009136:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009138:	4646      	mov	r6, r8
 800913a:	e735      	b.n	8008fa8 <_dtoa_r+0x730>
 800913c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800913e:	e75c      	b.n	8008ffa <_dtoa_r+0x782>
 8009140:	2300      	movs	r3, #0
 8009142:	e788      	b.n	8009056 <_dtoa_r+0x7de>
 8009144:	3fe00000 	.word	0x3fe00000
 8009148:	40240000 	.word	0x40240000
 800914c:	40140000 	.word	0x40140000
 8009150:	9b02      	ldr	r3, [sp, #8]
 8009152:	e780      	b.n	8009056 <_dtoa_r+0x7de>
 8009154:	2300      	movs	r3, #0
 8009156:	930a      	str	r3, [sp, #40]	@ 0x28
 8009158:	e782      	b.n	8009060 <_dtoa_r+0x7e8>
 800915a:	d099      	beq.n	8009090 <_dtoa_r+0x818>
 800915c:	9a08      	ldr	r2, [sp, #32]
 800915e:	331c      	adds	r3, #28
 8009160:	441a      	add	r2, r3
 8009162:	4498      	add	r8, r3
 8009164:	441e      	add	r6, r3
 8009166:	9208      	str	r2, [sp, #32]
 8009168:	e792      	b.n	8009090 <_dtoa_r+0x818>
 800916a:	4603      	mov	r3, r0
 800916c:	e7f6      	b.n	800915c <_dtoa_r+0x8e4>
 800916e:	9b07      	ldr	r3, [sp, #28]
 8009170:	9704      	str	r7, [sp, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	dc20      	bgt.n	80091b8 <_dtoa_r+0x940>
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800917a:	2b02      	cmp	r3, #2
 800917c:	dd1e      	ble.n	80091bc <_dtoa_r+0x944>
 800917e:	9b00      	ldr	r3, [sp, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	f47f aec0 	bne.w	8008f06 <_dtoa_r+0x68e>
 8009186:	4621      	mov	r1, r4
 8009188:	2205      	movs	r2, #5
 800918a:	4658      	mov	r0, fp
 800918c:	f000 fa9a 	bl	80096c4 <__multadd>
 8009190:	4601      	mov	r1, r0
 8009192:	4604      	mov	r4, r0
 8009194:	4648      	mov	r0, r9
 8009196:	f000 fcf7 	bl	8009b88 <__mcmp>
 800919a:	2800      	cmp	r0, #0
 800919c:	f77f aeb3 	ble.w	8008f06 <_dtoa_r+0x68e>
 80091a0:	4656      	mov	r6, sl
 80091a2:	2331      	movs	r3, #49	@ 0x31
 80091a4:	f806 3b01 	strb.w	r3, [r6], #1
 80091a8:	9b04      	ldr	r3, [sp, #16]
 80091aa:	3301      	adds	r3, #1
 80091ac:	9304      	str	r3, [sp, #16]
 80091ae:	e6ae      	b.n	8008f0e <_dtoa_r+0x696>
 80091b0:	9c07      	ldr	r4, [sp, #28]
 80091b2:	9704      	str	r7, [sp, #16]
 80091b4:	4625      	mov	r5, r4
 80091b6:	e7f3      	b.n	80091a0 <_dtoa_r+0x928>
 80091b8:	9b07      	ldr	r3, [sp, #28]
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 8104 	beq.w	80093cc <_dtoa_r+0xb54>
 80091c4:	2e00      	cmp	r6, #0
 80091c6:	dd05      	ble.n	80091d4 <_dtoa_r+0x95c>
 80091c8:	4629      	mov	r1, r5
 80091ca:	4632      	mov	r2, r6
 80091cc:	4658      	mov	r0, fp
 80091ce:	f000 fc6f 	bl	8009ab0 <__lshift>
 80091d2:	4605      	mov	r5, r0
 80091d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d05a      	beq.n	8009290 <_dtoa_r+0xa18>
 80091da:	6869      	ldr	r1, [r5, #4]
 80091dc:	4658      	mov	r0, fp
 80091de:	f000 fa0f 	bl	8009600 <_Balloc>
 80091e2:	4606      	mov	r6, r0
 80091e4:	b928      	cbnz	r0, 80091f2 <_dtoa_r+0x97a>
 80091e6:	4b84      	ldr	r3, [pc, #528]	@ (80093f8 <_dtoa_r+0xb80>)
 80091e8:	4602      	mov	r2, r0
 80091ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80091ee:	f7ff bb5a 	b.w	80088a6 <_dtoa_r+0x2e>
 80091f2:	692a      	ldr	r2, [r5, #16]
 80091f4:	3202      	adds	r2, #2
 80091f6:	0092      	lsls	r2, r2, #2
 80091f8:	f105 010c 	add.w	r1, r5, #12
 80091fc:	300c      	adds	r0, #12
 80091fe:	f7ff fa9c 	bl	800873a <memcpy>
 8009202:	2201      	movs	r2, #1
 8009204:	4631      	mov	r1, r6
 8009206:	4658      	mov	r0, fp
 8009208:	f000 fc52 	bl	8009ab0 <__lshift>
 800920c:	f10a 0301 	add.w	r3, sl, #1
 8009210:	9307      	str	r3, [sp, #28]
 8009212:	9b00      	ldr	r3, [sp, #0]
 8009214:	4453      	add	r3, sl
 8009216:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009218:	9b02      	ldr	r3, [sp, #8]
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	462f      	mov	r7, r5
 8009220:	930a      	str	r3, [sp, #40]	@ 0x28
 8009222:	4605      	mov	r5, r0
 8009224:	9b07      	ldr	r3, [sp, #28]
 8009226:	4621      	mov	r1, r4
 8009228:	3b01      	subs	r3, #1
 800922a:	4648      	mov	r0, r9
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	f7ff fa99 	bl	8008764 <quorem>
 8009232:	4639      	mov	r1, r7
 8009234:	9002      	str	r0, [sp, #8]
 8009236:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800923a:	4648      	mov	r0, r9
 800923c:	f000 fca4 	bl	8009b88 <__mcmp>
 8009240:	462a      	mov	r2, r5
 8009242:	9008      	str	r0, [sp, #32]
 8009244:	4621      	mov	r1, r4
 8009246:	4658      	mov	r0, fp
 8009248:	f000 fcba 	bl	8009bc0 <__mdiff>
 800924c:	68c2      	ldr	r2, [r0, #12]
 800924e:	4606      	mov	r6, r0
 8009250:	bb02      	cbnz	r2, 8009294 <_dtoa_r+0xa1c>
 8009252:	4601      	mov	r1, r0
 8009254:	4648      	mov	r0, r9
 8009256:	f000 fc97 	bl	8009b88 <__mcmp>
 800925a:	4602      	mov	r2, r0
 800925c:	4631      	mov	r1, r6
 800925e:	4658      	mov	r0, fp
 8009260:	920e      	str	r2, [sp, #56]	@ 0x38
 8009262:	f000 fa0d 	bl	8009680 <_Bfree>
 8009266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009268:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800926a:	9e07      	ldr	r6, [sp, #28]
 800926c:	ea43 0102 	orr.w	r1, r3, r2
 8009270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009272:	4319      	orrs	r1, r3
 8009274:	d110      	bne.n	8009298 <_dtoa_r+0xa20>
 8009276:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800927a:	d029      	beq.n	80092d0 <_dtoa_r+0xa58>
 800927c:	9b08      	ldr	r3, [sp, #32]
 800927e:	2b00      	cmp	r3, #0
 8009280:	dd02      	ble.n	8009288 <_dtoa_r+0xa10>
 8009282:	9b02      	ldr	r3, [sp, #8]
 8009284:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009288:	9b00      	ldr	r3, [sp, #0]
 800928a:	f883 8000 	strb.w	r8, [r3]
 800928e:	e63f      	b.n	8008f10 <_dtoa_r+0x698>
 8009290:	4628      	mov	r0, r5
 8009292:	e7bb      	b.n	800920c <_dtoa_r+0x994>
 8009294:	2201      	movs	r2, #1
 8009296:	e7e1      	b.n	800925c <_dtoa_r+0x9e4>
 8009298:	9b08      	ldr	r3, [sp, #32]
 800929a:	2b00      	cmp	r3, #0
 800929c:	db04      	blt.n	80092a8 <_dtoa_r+0xa30>
 800929e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80092a0:	430b      	orrs	r3, r1
 80092a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092a4:	430b      	orrs	r3, r1
 80092a6:	d120      	bne.n	80092ea <_dtoa_r+0xa72>
 80092a8:	2a00      	cmp	r2, #0
 80092aa:	dded      	ble.n	8009288 <_dtoa_r+0xa10>
 80092ac:	4649      	mov	r1, r9
 80092ae:	2201      	movs	r2, #1
 80092b0:	4658      	mov	r0, fp
 80092b2:	f000 fbfd 	bl	8009ab0 <__lshift>
 80092b6:	4621      	mov	r1, r4
 80092b8:	4681      	mov	r9, r0
 80092ba:	f000 fc65 	bl	8009b88 <__mcmp>
 80092be:	2800      	cmp	r0, #0
 80092c0:	dc03      	bgt.n	80092ca <_dtoa_r+0xa52>
 80092c2:	d1e1      	bne.n	8009288 <_dtoa_r+0xa10>
 80092c4:	f018 0f01 	tst.w	r8, #1
 80092c8:	d0de      	beq.n	8009288 <_dtoa_r+0xa10>
 80092ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092ce:	d1d8      	bne.n	8009282 <_dtoa_r+0xa0a>
 80092d0:	9a00      	ldr	r2, [sp, #0]
 80092d2:	2339      	movs	r3, #57	@ 0x39
 80092d4:	7013      	strb	r3, [r2, #0]
 80092d6:	4633      	mov	r3, r6
 80092d8:	461e      	mov	r6, r3
 80092da:	3b01      	subs	r3, #1
 80092dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80092e0:	2a39      	cmp	r2, #57	@ 0x39
 80092e2:	d052      	beq.n	800938a <_dtoa_r+0xb12>
 80092e4:	3201      	adds	r2, #1
 80092e6:	701a      	strb	r2, [r3, #0]
 80092e8:	e612      	b.n	8008f10 <_dtoa_r+0x698>
 80092ea:	2a00      	cmp	r2, #0
 80092ec:	dd07      	ble.n	80092fe <_dtoa_r+0xa86>
 80092ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092f2:	d0ed      	beq.n	80092d0 <_dtoa_r+0xa58>
 80092f4:	9a00      	ldr	r2, [sp, #0]
 80092f6:	f108 0301 	add.w	r3, r8, #1
 80092fa:	7013      	strb	r3, [r2, #0]
 80092fc:	e608      	b.n	8008f10 <_dtoa_r+0x698>
 80092fe:	9b07      	ldr	r3, [sp, #28]
 8009300:	9a07      	ldr	r2, [sp, #28]
 8009302:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009308:	4293      	cmp	r3, r2
 800930a:	d028      	beq.n	800935e <_dtoa_r+0xae6>
 800930c:	4649      	mov	r1, r9
 800930e:	2300      	movs	r3, #0
 8009310:	220a      	movs	r2, #10
 8009312:	4658      	mov	r0, fp
 8009314:	f000 f9d6 	bl	80096c4 <__multadd>
 8009318:	42af      	cmp	r7, r5
 800931a:	4681      	mov	r9, r0
 800931c:	f04f 0300 	mov.w	r3, #0
 8009320:	f04f 020a 	mov.w	r2, #10
 8009324:	4639      	mov	r1, r7
 8009326:	4658      	mov	r0, fp
 8009328:	d107      	bne.n	800933a <_dtoa_r+0xac2>
 800932a:	f000 f9cb 	bl	80096c4 <__multadd>
 800932e:	4607      	mov	r7, r0
 8009330:	4605      	mov	r5, r0
 8009332:	9b07      	ldr	r3, [sp, #28]
 8009334:	3301      	adds	r3, #1
 8009336:	9307      	str	r3, [sp, #28]
 8009338:	e774      	b.n	8009224 <_dtoa_r+0x9ac>
 800933a:	f000 f9c3 	bl	80096c4 <__multadd>
 800933e:	4629      	mov	r1, r5
 8009340:	4607      	mov	r7, r0
 8009342:	2300      	movs	r3, #0
 8009344:	220a      	movs	r2, #10
 8009346:	4658      	mov	r0, fp
 8009348:	f000 f9bc 	bl	80096c4 <__multadd>
 800934c:	4605      	mov	r5, r0
 800934e:	e7f0      	b.n	8009332 <_dtoa_r+0xaba>
 8009350:	9b00      	ldr	r3, [sp, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	bfcc      	ite	gt
 8009356:	461e      	movgt	r6, r3
 8009358:	2601      	movle	r6, #1
 800935a:	4456      	add	r6, sl
 800935c:	2700      	movs	r7, #0
 800935e:	4649      	mov	r1, r9
 8009360:	2201      	movs	r2, #1
 8009362:	4658      	mov	r0, fp
 8009364:	f000 fba4 	bl	8009ab0 <__lshift>
 8009368:	4621      	mov	r1, r4
 800936a:	4681      	mov	r9, r0
 800936c:	f000 fc0c 	bl	8009b88 <__mcmp>
 8009370:	2800      	cmp	r0, #0
 8009372:	dcb0      	bgt.n	80092d6 <_dtoa_r+0xa5e>
 8009374:	d102      	bne.n	800937c <_dtoa_r+0xb04>
 8009376:	f018 0f01 	tst.w	r8, #1
 800937a:	d1ac      	bne.n	80092d6 <_dtoa_r+0xa5e>
 800937c:	4633      	mov	r3, r6
 800937e:	461e      	mov	r6, r3
 8009380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009384:	2a30      	cmp	r2, #48	@ 0x30
 8009386:	d0fa      	beq.n	800937e <_dtoa_r+0xb06>
 8009388:	e5c2      	b.n	8008f10 <_dtoa_r+0x698>
 800938a:	459a      	cmp	sl, r3
 800938c:	d1a4      	bne.n	80092d8 <_dtoa_r+0xa60>
 800938e:	9b04      	ldr	r3, [sp, #16]
 8009390:	3301      	adds	r3, #1
 8009392:	9304      	str	r3, [sp, #16]
 8009394:	2331      	movs	r3, #49	@ 0x31
 8009396:	f88a 3000 	strb.w	r3, [sl]
 800939a:	e5b9      	b.n	8008f10 <_dtoa_r+0x698>
 800939c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800939e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80093fc <_dtoa_r+0xb84>
 80093a2:	b11b      	cbz	r3, 80093ac <_dtoa_r+0xb34>
 80093a4:	f10a 0308 	add.w	r3, sl, #8
 80093a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80093aa:	6013      	str	r3, [r2, #0]
 80093ac:	4650      	mov	r0, sl
 80093ae:	b019      	add	sp, #100	@ 0x64
 80093b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	f77f ae37 	ble.w	800902a <_dtoa_r+0x7b2>
 80093bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093be:	930a      	str	r3, [sp, #40]	@ 0x28
 80093c0:	2001      	movs	r0, #1
 80093c2:	e655      	b.n	8009070 <_dtoa_r+0x7f8>
 80093c4:	9b00      	ldr	r3, [sp, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f77f aed6 	ble.w	8009178 <_dtoa_r+0x900>
 80093cc:	4656      	mov	r6, sl
 80093ce:	4621      	mov	r1, r4
 80093d0:	4648      	mov	r0, r9
 80093d2:	f7ff f9c7 	bl	8008764 <quorem>
 80093d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80093da:	f806 8b01 	strb.w	r8, [r6], #1
 80093de:	9b00      	ldr	r3, [sp, #0]
 80093e0:	eba6 020a 	sub.w	r2, r6, sl
 80093e4:	4293      	cmp	r3, r2
 80093e6:	ddb3      	ble.n	8009350 <_dtoa_r+0xad8>
 80093e8:	4649      	mov	r1, r9
 80093ea:	2300      	movs	r3, #0
 80093ec:	220a      	movs	r2, #10
 80093ee:	4658      	mov	r0, fp
 80093f0:	f000 f968 	bl	80096c4 <__multadd>
 80093f4:	4681      	mov	r9, r0
 80093f6:	e7ea      	b.n	80093ce <_dtoa_r+0xb56>
 80093f8:	0800cd49 	.word	0x0800cd49
 80093fc:	0800cccd 	.word	0x0800cccd

08009400 <_free_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4605      	mov	r5, r0
 8009404:	2900      	cmp	r1, #0
 8009406:	d041      	beq.n	800948c <_free_r+0x8c>
 8009408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800940c:	1f0c      	subs	r4, r1, #4
 800940e:	2b00      	cmp	r3, #0
 8009410:	bfb8      	it	lt
 8009412:	18e4      	addlt	r4, r4, r3
 8009414:	f000 f8e8 	bl	80095e8 <__malloc_lock>
 8009418:	4a1d      	ldr	r2, [pc, #116]	@ (8009490 <_free_r+0x90>)
 800941a:	6813      	ldr	r3, [r2, #0]
 800941c:	b933      	cbnz	r3, 800942c <_free_r+0x2c>
 800941e:	6063      	str	r3, [r4, #4]
 8009420:	6014      	str	r4, [r2, #0]
 8009422:	4628      	mov	r0, r5
 8009424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009428:	f000 b8e4 	b.w	80095f4 <__malloc_unlock>
 800942c:	42a3      	cmp	r3, r4
 800942e:	d908      	bls.n	8009442 <_free_r+0x42>
 8009430:	6820      	ldr	r0, [r4, #0]
 8009432:	1821      	adds	r1, r4, r0
 8009434:	428b      	cmp	r3, r1
 8009436:	bf01      	itttt	eq
 8009438:	6819      	ldreq	r1, [r3, #0]
 800943a:	685b      	ldreq	r3, [r3, #4]
 800943c:	1809      	addeq	r1, r1, r0
 800943e:	6021      	streq	r1, [r4, #0]
 8009440:	e7ed      	b.n	800941e <_free_r+0x1e>
 8009442:	461a      	mov	r2, r3
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	b10b      	cbz	r3, 800944c <_free_r+0x4c>
 8009448:	42a3      	cmp	r3, r4
 800944a:	d9fa      	bls.n	8009442 <_free_r+0x42>
 800944c:	6811      	ldr	r1, [r2, #0]
 800944e:	1850      	adds	r0, r2, r1
 8009450:	42a0      	cmp	r0, r4
 8009452:	d10b      	bne.n	800946c <_free_r+0x6c>
 8009454:	6820      	ldr	r0, [r4, #0]
 8009456:	4401      	add	r1, r0
 8009458:	1850      	adds	r0, r2, r1
 800945a:	4283      	cmp	r3, r0
 800945c:	6011      	str	r1, [r2, #0]
 800945e:	d1e0      	bne.n	8009422 <_free_r+0x22>
 8009460:	6818      	ldr	r0, [r3, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	6053      	str	r3, [r2, #4]
 8009466:	4408      	add	r0, r1
 8009468:	6010      	str	r0, [r2, #0]
 800946a:	e7da      	b.n	8009422 <_free_r+0x22>
 800946c:	d902      	bls.n	8009474 <_free_r+0x74>
 800946e:	230c      	movs	r3, #12
 8009470:	602b      	str	r3, [r5, #0]
 8009472:	e7d6      	b.n	8009422 <_free_r+0x22>
 8009474:	6820      	ldr	r0, [r4, #0]
 8009476:	1821      	adds	r1, r4, r0
 8009478:	428b      	cmp	r3, r1
 800947a:	bf04      	itt	eq
 800947c:	6819      	ldreq	r1, [r3, #0]
 800947e:	685b      	ldreq	r3, [r3, #4]
 8009480:	6063      	str	r3, [r4, #4]
 8009482:	bf04      	itt	eq
 8009484:	1809      	addeq	r1, r1, r0
 8009486:	6021      	streq	r1, [r4, #0]
 8009488:	6054      	str	r4, [r2, #4]
 800948a:	e7ca      	b.n	8009422 <_free_r+0x22>
 800948c:	bd38      	pop	{r3, r4, r5, pc}
 800948e:	bf00      	nop
 8009490:	200051b0 	.word	0x200051b0

08009494 <malloc>:
 8009494:	4b02      	ldr	r3, [pc, #8]	@ (80094a0 <malloc+0xc>)
 8009496:	4601      	mov	r1, r0
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	f000 b825 	b.w	80094e8 <_malloc_r>
 800949e:	bf00      	nop
 80094a0:	2000002c 	.word	0x2000002c

080094a4 <sbrk_aligned>:
 80094a4:	b570      	push	{r4, r5, r6, lr}
 80094a6:	4e0f      	ldr	r6, [pc, #60]	@ (80094e4 <sbrk_aligned+0x40>)
 80094a8:	460c      	mov	r4, r1
 80094aa:	6831      	ldr	r1, [r6, #0]
 80094ac:	4605      	mov	r5, r0
 80094ae:	b911      	cbnz	r1, 80094b6 <sbrk_aligned+0x12>
 80094b0:	f001 fe0c 	bl	800b0cc <_sbrk_r>
 80094b4:	6030      	str	r0, [r6, #0]
 80094b6:	4621      	mov	r1, r4
 80094b8:	4628      	mov	r0, r5
 80094ba:	f001 fe07 	bl	800b0cc <_sbrk_r>
 80094be:	1c43      	adds	r3, r0, #1
 80094c0:	d103      	bne.n	80094ca <sbrk_aligned+0x26>
 80094c2:	f04f 34ff 	mov.w	r4, #4294967295
 80094c6:	4620      	mov	r0, r4
 80094c8:	bd70      	pop	{r4, r5, r6, pc}
 80094ca:	1cc4      	adds	r4, r0, #3
 80094cc:	f024 0403 	bic.w	r4, r4, #3
 80094d0:	42a0      	cmp	r0, r4
 80094d2:	d0f8      	beq.n	80094c6 <sbrk_aligned+0x22>
 80094d4:	1a21      	subs	r1, r4, r0
 80094d6:	4628      	mov	r0, r5
 80094d8:	f001 fdf8 	bl	800b0cc <_sbrk_r>
 80094dc:	3001      	adds	r0, #1
 80094de:	d1f2      	bne.n	80094c6 <sbrk_aligned+0x22>
 80094e0:	e7ef      	b.n	80094c2 <sbrk_aligned+0x1e>
 80094e2:	bf00      	nop
 80094e4:	200051ac 	.word	0x200051ac

080094e8 <_malloc_r>:
 80094e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094ec:	1ccd      	adds	r5, r1, #3
 80094ee:	f025 0503 	bic.w	r5, r5, #3
 80094f2:	3508      	adds	r5, #8
 80094f4:	2d0c      	cmp	r5, #12
 80094f6:	bf38      	it	cc
 80094f8:	250c      	movcc	r5, #12
 80094fa:	2d00      	cmp	r5, #0
 80094fc:	4606      	mov	r6, r0
 80094fe:	db01      	blt.n	8009504 <_malloc_r+0x1c>
 8009500:	42a9      	cmp	r1, r5
 8009502:	d904      	bls.n	800950e <_malloc_r+0x26>
 8009504:	230c      	movs	r3, #12
 8009506:	6033      	str	r3, [r6, #0]
 8009508:	2000      	movs	r0, #0
 800950a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800950e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095e4 <_malloc_r+0xfc>
 8009512:	f000 f869 	bl	80095e8 <__malloc_lock>
 8009516:	f8d8 3000 	ldr.w	r3, [r8]
 800951a:	461c      	mov	r4, r3
 800951c:	bb44      	cbnz	r4, 8009570 <_malloc_r+0x88>
 800951e:	4629      	mov	r1, r5
 8009520:	4630      	mov	r0, r6
 8009522:	f7ff ffbf 	bl	80094a4 <sbrk_aligned>
 8009526:	1c43      	adds	r3, r0, #1
 8009528:	4604      	mov	r4, r0
 800952a:	d158      	bne.n	80095de <_malloc_r+0xf6>
 800952c:	f8d8 4000 	ldr.w	r4, [r8]
 8009530:	4627      	mov	r7, r4
 8009532:	2f00      	cmp	r7, #0
 8009534:	d143      	bne.n	80095be <_malloc_r+0xd6>
 8009536:	2c00      	cmp	r4, #0
 8009538:	d04b      	beq.n	80095d2 <_malloc_r+0xea>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	4639      	mov	r1, r7
 800953e:	4630      	mov	r0, r6
 8009540:	eb04 0903 	add.w	r9, r4, r3
 8009544:	f001 fdc2 	bl	800b0cc <_sbrk_r>
 8009548:	4581      	cmp	r9, r0
 800954a:	d142      	bne.n	80095d2 <_malloc_r+0xea>
 800954c:	6821      	ldr	r1, [r4, #0]
 800954e:	1a6d      	subs	r5, r5, r1
 8009550:	4629      	mov	r1, r5
 8009552:	4630      	mov	r0, r6
 8009554:	f7ff ffa6 	bl	80094a4 <sbrk_aligned>
 8009558:	3001      	adds	r0, #1
 800955a:	d03a      	beq.n	80095d2 <_malloc_r+0xea>
 800955c:	6823      	ldr	r3, [r4, #0]
 800955e:	442b      	add	r3, r5
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	f8d8 3000 	ldr.w	r3, [r8]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	bb62      	cbnz	r2, 80095c4 <_malloc_r+0xdc>
 800956a:	f8c8 7000 	str.w	r7, [r8]
 800956e:	e00f      	b.n	8009590 <_malloc_r+0xa8>
 8009570:	6822      	ldr	r2, [r4, #0]
 8009572:	1b52      	subs	r2, r2, r5
 8009574:	d420      	bmi.n	80095b8 <_malloc_r+0xd0>
 8009576:	2a0b      	cmp	r2, #11
 8009578:	d917      	bls.n	80095aa <_malloc_r+0xc2>
 800957a:	1961      	adds	r1, r4, r5
 800957c:	42a3      	cmp	r3, r4
 800957e:	6025      	str	r5, [r4, #0]
 8009580:	bf18      	it	ne
 8009582:	6059      	strne	r1, [r3, #4]
 8009584:	6863      	ldr	r3, [r4, #4]
 8009586:	bf08      	it	eq
 8009588:	f8c8 1000 	streq.w	r1, [r8]
 800958c:	5162      	str	r2, [r4, r5]
 800958e:	604b      	str	r3, [r1, #4]
 8009590:	4630      	mov	r0, r6
 8009592:	f000 f82f 	bl	80095f4 <__malloc_unlock>
 8009596:	f104 000b 	add.w	r0, r4, #11
 800959a:	1d23      	adds	r3, r4, #4
 800959c:	f020 0007 	bic.w	r0, r0, #7
 80095a0:	1ac2      	subs	r2, r0, r3
 80095a2:	bf1c      	itt	ne
 80095a4:	1a1b      	subne	r3, r3, r0
 80095a6:	50a3      	strne	r3, [r4, r2]
 80095a8:	e7af      	b.n	800950a <_malloc_r+0x22>
 80095aa:	6862      	ldr	r2, [r4, #4]
 80095ac:	42a3      	cmp	r3, r4
 80095ae:	bf0c      	ite	eq
 80095b0:	f8c8 2000 	streq.w	r2, [r8]
 80095b4:	605a      	strne	r2, [r3, #4]
 80095b6:	e7eb      	b.n	8009590 <_malloc_r+0xa8>
 80095b8:	4623      	mov	r3, r4
 80095ba:	6864      	ldr	r4, [r4, #4]
 80095bc:	e7ae      	b.n	800951c <_malloc_r+0x34>
 80095be:	463c      	mov	r4, r7
 80095c0:	687f      	ldr	r7, [r7, #4]
 80095c2:	e7b6      	b.n	8009532 <_malloc_r+0x4a>
 80095c4:	461a      	mov	r2, r3
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	42a3      	cmp	r3, r4
 80095ca:	d1fb      	bne.n	80095c4 <_malloc_r+0xdc>
 80095cc:	2300      	movs	r3, #0
 80095ce:	6053      	str	r3, [r2, #4]
 80095d0:	e7de      	b.n	8009590 <_malloc_r+0xa8>
 80095d2:	230c      	movs	r3, #12
 80095d4:	6033      	str	r3, [r6, #0]
 80095d6:	4630      	mov	r0, r6
 80095d8:	f000 f80c 	bl	80095f4 <__malloc_unlock>
 80095dc:	e794      	b.n	8009508 <_malloc_r+0x20>
 80095de:	6005      	str	r5, [r0, #0]
 80095e0:	e7d6      	b.n	8009590 <_malloc_r+0xa8>
 80095e2:	bf00      	nop
 80095e4:	200051b0 	.word	0x200051b0

080095e8 <__malloc_lock>:
 80095e8:	4801      	ldr	r0, [pc, #4]	@ (80095f0 <__malloc_lock+0x8>)
 80095ea:	f7ff b8a4 	b.w	8008736 <__retarget_lock_acquire_recursive>
 80095ee:	bf00      	nop
 80095f0:	200051a8 	.word	0x200051a8

080095f4 <__malloc_unlock>:
 80095f4:	4801      	ldr	r0, [pc, #4]	@ (80095fc <__malloc_unlock+0x8>)
 80095f6:	f7ff b89f 	b.w	8008738 <__retarget_lock_release_recursive>
 80095fa:	bf00      	nop
 80095fc:	200051a8 	.word	0x200051a8

08009600 <_Balloc>:
 8009600:	b570      	push	{r4, r5, r6, lr}
 8009602:	69c6      	ldr	r6, [r0, #28]
 8009604:	4604      	mov	r4, r0
 8009606:	460d      	mov	r5, r1
 8009608:	b976      	cbnz	r6, 8009628 <_Balloc+0x28>
 800960a:	2010      	movs	r0, #16
 800960c:	f7ff ff42 	bl	8009494 <malloc>
 8009610:	4602      	mov	r2, r0
 8009612:	61e0      	str	r0, [r4, #28]
 8009614:	b920      	cbnz	r0, 8009620 <_Balloc+0x20>
 8009616:	4b18      	ldr	r3, [pc, #96]	@ (8009678 <_Balloc+0x78>)
 8009618:	4818      	ldr	r0, [pc, #96]	@ (800967c <_Balloc+0x7c>)
 800961a:	216b      	movs	r1, #107	@ 0x6b
 800961c:	f001 fd70 	bl	800b100 <__assert_func>
 8009620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009624:	6006      	str	r6, [r0, #0]
 8009626:	60c6      	str	r6, [r0, #12]
 8009628:	69e6      	ldr	r6, [r4, #28]
 800962a:	68f3      	ldr	r3, [r6, #12]
 800962c:	b183      	cbz	r3, 8009650 <_Balloc+0x50>
 800962e:	69e3      	ldr	r3, [r4, #28]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009636:	b9b8      	cbnz	r0, 8009668 <_Balloc+0x68>
 8009638:	2101      	movs	r1, #1
 800963a:	fa01 f605 	lsl.w	r6, r1, r5
 800963e:	1d72      	adds	r2, r6, #5
 8009640:	0092      	lsls	r2, r2, #2
 8009642:	4620      	mov	r0, r4
 8009644:	f001 fd7a 	bl	800b13c <_calloc_r>
 8009648:	b160      	cbz	r0, 8009664 <_Balloc+0x64>
 800964a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800964e:	e00e      	b.n	800966e <_Balloc+0x6e>
 8009650:	2221      	movs	r2, #33	@ 0x21
 8009652:	2104      	movs	r1, #4
 8009654:	4620      	mov	r0, r4
 8009656:	f001 fd71 	bl	800b13c <_calloc_r>
 800965a:	69e3      	ldr	r3, [r4, #28]
 800965c:	60f0      	str	r0, [r6, #12]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1e4      	bne.n	800962e <_Balloc+0x2e>
 8009664:	2000      	movs	r0, #0
 8009666:	bd70      	pop	{r4, r5, r6, pc}
 8009668:	6802      	ldr	r2, [r0, #0]
 800966a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800966e:	2300      	movs	r3, #0
 8009670:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009674:	e7f7      	b.n	8009666 <_Balloc+0x66>
 8009676:	bf00      	nop
 8009678:	0800ccda 	.word	0x0800ccda
 800967c:	0800cd5a 	.word	0x0800cd5a

08009680 <_Bfree>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	69c6      	ldr	r6, [r0, #28]
 8009684:	4605      	mov	r5, r0
 8009686:	460c      	mov	r4, r1
 8009688:	b976      	cbnz	r6, 80096a8 <_Bfree+0x28>
 800968a:	2010      	movs	r0, #16
 800968c:	f7ff ff02 	bl	8009494 <malloc>
 8009690:	4602      	mov	r2, r0
 8009692:	61e8      	str	r0, [r5, #28]
 8009694:	b920      	cbnz	r0, 80096a0 <_Bfree+0x20>
 8009696:	4b09      	ldr	r3, [pc, #36]	@ (80096bc <_Bfree+0x3c>)
 8009698:	4809      	ldr	r0, [pc, #36]	@ (80096c0 <_Bfree+0x40>)
 800969a:	218f      	movs	r1, #143	@ 0x8f
 800969c:	f001 fd30 	bl	800b100 <__assert_func>
 80096a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096a4:	6006      	str	r6, [r0, #0]
 80096a6:	60c6      	str	r6, [r0, #12]
 80096a8:	b13c      	cbz	r4, 80096ba <_Bfree+0x3a>
 80096aa:	69eb      	ldr	r3, [r5, #28]
 80096ac:	6862      	ldr	r2, [r4, #4]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096b4:	6021      	str	r1, [r4, #0]
 80096b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096ba:	bd70      	pop	{r4, r5, r6, pc}
 80096bc:	0800ccda 	.word	0x0800ccda
 80096c0:	0800cd5a 	.word	0x0800cd5a

080096c4 <__multadd>:
 80096c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c8:	690d      	ldr	r5, [r1, #16]
 80096ca:	4607      	mov	r7, r0
 80096cc:	460c      	mov	r4, r1
 80096ce:	461e      	mov	r6, r3
 80096d0:	f101 0c14 	add.w	ip, r1, #20
 80096d4:	2000      	movs	r0, #0
 80096d6:	f8dc 3000 	ldr.w	r3, [ip]
 80096da:	b299      	uxth	r1, r3
 80096dc:	fb02 6101 	mla	r1, r2, r1, r6
 80096e0:	0c1e      	lsrs	r6, r3, #16
 80096e2:	0c0b      	lsrs	r3, r1, #16
 80096e4:	fb02 3306 	mla	r3, r2, r6, r3
 80096e8:	b289      	uxth	r1, r1
 80096ea:	3001      	adds	r0, #1
 80096ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096f0:	4285      	cmp	r5, r0
 80096f2:	f84c 1b04 	str.w	r1, [ip], #4
 80096f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096fa:	dcec      	bgt.n	80096d6 <__multadd+0x12>
 80096fc:	b30e      	cbz	r6, 8009742 <__multadd+0x7e>
 80096fe:	68a3      	ldr	r3, [r4, #8]
 8009700:	42ab      	cmp	r3, r5
 8009702:	dc19      	bgt.n	8009738 <__multadd+0x74>
 8009704:	6861      	ldr	r1, [r4, #4]
 8009706:	4638      	mov	r0, r7
 8009708:	3101      	adds	r1, #1
 800970a:	f7ff ff79 	bl	8009600 <_Balloc>
 800970e:	4680      	mov	r8, r0
 8009710:	b928      	cbnz	r0, 800971e <__multadd+0x5a>
 8009712:	4602      	mov	r2, r0
 8009714:	4b0c      	ldr	r3, [pc, #48]	@ (8009748 <__multadd+0x84>)
 8009716:	480d      	ldr	r0, [pc, #52]	@ (800974c <__multadd+0x88>)
 8009718:	21ba      	movs	r1, #186	@ 0xba
 800971a:	f001 fcf1 	bl	800b100 <__assert_func>
 800971e:	6922      	ldr	r2, [r4, #16]
 8009720:	3202      	adds	r2, #2
 8009722:	f104 010c 	add.w	r1, r4, #12
 8009726:	0092      	lsls	r2, r2, #2
 8009728:	300c      	adds	r0, #12
 800972a:	f7ff f806 	bl	800873a <memcpy>
 800972e:	4621      	mov	r1, r4
 8009730:	4638      	mov	r0, r7
 8009732:	f7ff ffa5 	bl	8009680 <_Bfree>
 8009736:	4644      	mov	r4, r8
 8009738:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800973c:	3501      	adds	r5, #1
 800973e:	615e      	str	r6, [r3, #20]
 8009740:	6125      	str	r5, [r4, #16]
 8009742:	4620      	mov	r0, r4
 8009744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009748:	0800cd49 	.word	0x0800cd49
 800974c:	0800cd5a 	.word	0x0800cd5a

08009750 <__s2b>:
 8009750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009754:	460c      	mov	r4, r1
 8009756:	4615      	mov	r5, r2
 8009758:	461f      	mov	r7, r3
 800975a:	2209      	movs	r2, #9
 800975c:	3308      	adds	r3, #8
 800975e:	4606      	mov	r6, r0
 8009760:	fb93 f3f2 	sdiv	r3, r3, r2
 8009764:	2100      	movs	r1, #0
 8009766:	2201      	movs	r2, #1
 8009768:	429a      	cmp	r2, r3
 800976a:	db09      	blt.n	8009780 <__s2b+0x30>
 800976c:	4630      	mov	r0, r6
 800976e:	f7ff ff47 	bl	8009600 <_Balloc>
 8009772:	b940      	cbnz	r0, 8009786 <__s2b+0x36>
 8009774:	4602      	mov	r2, r0
 8009776:	4b19      	ldr	r3, [pc, #100]	@ (80097dc <__s2b+0x8c>)
 8009778:	4819      	ldr	r0, [pc, #100]	@ (80097e0 <__s2b+0x90>)
 800977a:	21d3      	movs	r1, #211	@ 0xd3
 800977c:	f001 fcc0 	bl	800b100 <__assert_func>
 8009780:	0052      	lsls	r2, r2, #1
 8009782:	3101      	adds	r1, #1
 8009784:	e7f0      	b.n	8009768 <__s2b+0x18>
 8009786:	9b08      	ldr	r3, [sp, #32]
 8009788:	6143      	str	r3, [r0, #20]
 800978a:	2d09      	cmp	r5, #9
 800978c:	f04f 0301 	mov.w	r3, #1
 8009790:	6103      	str	r3, [r0, #16]
 8009792:	dd16      	ble.n	80097c2 <__s2b+0x72>
 8009794:	f104 0909 	add.w	r9, r4, #9
 8009798:	46c8      	mov	r8, r9
 800979a:	442c      	add	r4, r5
 800979c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80097a0:	4601      	mov	r1, r0
 80097a2:	3b30      	subs	r3, #48	@ 0x30
 80097a4:	220a      	movs	r2, #10
 80097a6:	4630      	mov	r0, r6
 80097a8:	f7ff ff8c 	bl	80096c4 <__multadd>
 80097ac:	45a0      	cmp	r8, r4
 80097ae:	d1f5      	bne.n	800979c <__s2b+0x4c>
 80097b0:	f1a5 0408 	sub.w	r4, r5, #8
 80097b4:	444c      	add	r4, r9
 80097b6:	1b2d      	subs	r5, r5, r4
 80097b8:	1963      	adds	r3, r4, r5
 80097ba:	42bb      	cmp	r3, r7
 80097bc:	db04      	blt.n	80097c8 <__s2b+0x78>
 80097be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097c2:	340a      	adds	r4, #10
 80097c4:	2509      	movs	r5, #9
 80097c6:	e7f6      	b.n	80097b6 <__s2b+0x66>
 80097c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80097cc:	4601      	mov	r1, r0
 80097ce:	3b30      	subs	r3, #48	@ 0x30
 80097d0:	220a      	movs	r2, #10
 80097d2:	4630      	mov	r0, r6
 80097d4:	f7ff ff76 	bl	80096c4 <__multadd>
 80097d8:	e7ee      	b.n	80097b8 <__s2b+0x68>
 80097da:	bf00      	nop
 80097dc:	0800cd49 	.word	0x0800cd49
 80097e0:	0800cd5a 	.word	0x0800cd5a

080097e4 <__hi0bits>:
 80097e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80097e8:	4603      	mov	r3, r0
 80097ea:	bf36      	itet	cc
 80097ec:	0403      	lslcc	r3, r0, #16
 80097ee:	2000      	movcs	r0, #0
 80097f0:	2010      	movcc	r0, #16
 80097f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097f6:	bf3c      	itt	cc
 80097f8:	021b      	lslcc	r3, r3, #8
 80097fa:	3008      	addcc	r0, #8
 80097fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009800:	bf3c      	itt	cc
 8009802:	011b      	lslcc	r3, r3, #4
 8009804:	3004      	addcc	r0, #4
 8009806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800980a:	bf3c      	itt	cc
 800980c:	009b      	lslcc	r3, r3, #2
 800980e:	3002      	addcc	r0, #2
 8009810:	2b00      	cmp	r3, #0
 8009812:	db05      	blt.n	8009820 <__hi0bits+0x3c>
 8009814:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009818:	f100 0001 	add.w	r0, r0, #1
 800981c:	bf08      	it	eq
 800981e:	2020      	moveq	r0, #32
 8009820:	4770      	bx	lr

08009822 <__lo0bits>:
 8009822:	6803      	ldr	r3, [r0, #0]
 8009824:	4602      	mov	r2, r0
 8009826:	f013 0007 	ands.w	r0, r3, #7
 800982a:	d00b      	beq.n	8009844 <__lo0bits+0x22>
 800982c:	07d9      	lsls	r1, r3, #31
 800982e:	d421      	bmi.n	8009874 <__lo0bits+0x52>
 8009830:	0798      	lsls	r0, r3, #30
 8009832:	bf49      	itett	mi
 8009834:	085b      	lsrmi	r3, r3, #1
 8009836:	089b      	lsrpl	r3, r3, #2
 8009838:	2001      	movmi	r0, #1
 800983a:	6013      	strmi	r3, [r2, #0]
 800983c:	bf5c      	itt	pl
 800983e:	6013      	strpl	r3, [r2, #0]
 8009840:	2002      	movpl	r0, #2
 8009842:	4770      	bx	lr
 8009844:	b299      	uxth	r1, r3
 8009846:	b909      	cbnz	r1, 800984c <__lo0bits+0x2a>
 8009848:	0c1b      	lsrs	r3, r3, #16
 800984a:	2010      	movs	r0, #16
 800984c:	b2d9      	uxtb	r1, r3
 800984e:	b909      	cbnz	r1, 8009854 <__lo0bits+0x32>
 8009850:	3008      	adds	r0, #8
 8009852:	0a1b      	lsrs	r3, r3, #8
 8009854:	0719      	lsls	r1, r3, #28
 8009856:	bf04      	itt	eq
 8009858:	091b      	lsreq	r3, r3, #4
 800985a:	3004      	addeq	r0, #4
 800985c:	0799      	lsls	r1, r3, #30
 800985e:	bf04      	itt	eq
 8009860:	089b      	lsreq	r3, r3, #2
 8009862:	3002      	addeq	r0, #2
 8009864:	07d9      	lsls	r1, r3, #31
 8009866:	d403      	bmi.n	8009870 <__lo0bits+0x4e>
 8009868:	085b      	lsrs	r3, r3, #1
 800986a:	f100 0001 	add.w	r0, r0, #1
 800986e:	d003      	beq.n	8009878 <__lo0bits+0x56>
 8009870:	6013      	str	r3, [r2, #0]
 8009872:	4770      	bx	lr
 8009874:	2000      	movs	r0, #0
 8009876:	4770      	bx	lr
 8009878:	2020      	movs	r0, #32
 800987a:	4770      	bx	lr

0800987c <__i2b>:
 800987c:	b510      	push	{r4, lr}
 800987e:	460c      	mov	r4, r1
 8009880:	2101      	movs	r1, #1
 8009882:	f7ff febd 	bl	8009600 <_Balloc>
 8009886:	4602      	mov	r2, r0
 8009888:	b928      	cbnz	r0, 8009896 <__i2b+0x1a>
 800988a:	4b05      	ldr	r3, [pc, #20]	@ (80098a0 <__i2b+0x24>)
 800988c:	4805      	ldr	r0, [pc, #20]	@ (80098a4 <__i2b+0x28>)
 800988e:	f240 1145 	movw	r1, #325	@ 0x145
 8009892:	f001 fc35 	bl	800b100 <__assert_func>
 8009896:	2301      	movs	r3, #1
 8009898:	6144      	str	r4, [r0, #20]
 800989a:	6103      	str	r3, [r0, #16]
 800989c:	bd10      	pop	{r4, pc}
 800989e:	bf00      	nop
 80098a0:	0800cd49 	.word	0x0800cd49
 80098a4:	0800cd5a 	.word	0x0800cd5a

080098a8 <__multiply>:
 80098a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ac:	4614      	mov	r4, r2
 80098ae:	690a      	ldr	r2, [r1, #16]
 80098b0:	6923      	ldr	r3, [r4, #16]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	bfa8      	it	ge
 80098b6:	4623      	movge	r3, r4
 80098b8:	460f      	mov	r7, r1
 80098ba:	bfa4      	itt	ge
 80098bc:	460c      	movge	r4, r1
 80098be:	461f      	movge	r7, r3
 80098c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80098c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80098c8:	68a3      	ldr	r3, [r4, #8]
 80098ca:	6861      	ldr	r1, [r4, #4]
 80098cc:	eb0a 0609 	add.w	r6, sl, r9
 80098d0:	42b3      	cmp	r3, r6
 80098d2:	b085      	sub	sp, #20
 80098d4:	bfb8      	it	lt
 80098d6:	3101      	addlt	r1, #1
 80098d8:	f7ff fe92 	bl	8009600 <_Balloc>
 80098dc:	b930      	cbnz	r0, 80098ec <__multiply+0x44>
 80098de:	4602      	mov	r2, r0
 80098e0:	4b44      	ldr	r3, [pc, #272]	@ (80099f4 <__multiply+0x14c>)
 80098e2:	4845      	ldr	r0, [pc, #276]	@ (80099f8 <__multiply+0x150>)
 80098e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80098e8:	f001 fc0a 	bl	800b100 <__assert_func>
 80098ec:	f100 0514 	add.w	r5, r0, #20
 80098f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098f4:	462b      	mov	r3, r5
 80098f6:	2200      	movs	r2, #0
 80098f8:	4543      	cmp	r3, r8
 80098fa:	d321      	bcc.n	8009940 <__multiply+0x98>
 80098fc:	f107 0114 	add.w	r1, r7, #20
 8009900:	f104 0214 	add.w	r2, r4, #20
 8009904:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009908:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800990c:	9302      	str	r3, [sp, #8]
 800990e:	1b13      	subs	r3, r2, r4
 8009910:	3b15      	subs	r3, #21
 8009912:	f023 0303 	bic.w	r3, r3, #3
 8009916:	3304      	adds	r3, #4
 8009918:	f104 0715 	add.w	r7, r4, #21
 800991c:	42ba      	cmp	r2, r7
 800991e:	bf38      	it	cc
 8009920:	2304      	movcc	r3, #4
 8009922:	9301      	str	r3, [sp, #4]
 8009924:	9b02      	ldr	r3, [sp, #8]
 8009926:	9103      	str	r1, [sp, #12]
 8009928:	428b      	cmp	r3, r1
 800992a:	d80c      	bhi.n	8009946 <__multiply+0x9e>
 800992c:	2e00      	cmp	r6, #0
 800992e:	dd03      	ble.n	8009938 <__multiply+0x90>
 8009930:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009934:	2b00      	cmp	r3, #0
 8009936:	d05b      	beq.n	80099f0 <__multiply+0x148>
 8009938:	6106      	str	r6, [r0, #16]
 800993a:	b005      	add	sp, #20
 800993c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009940:	f843 2b04 	str.w	r2, [r3], #4
 8009944:	e7d8      	b.n	80098f8 <__multiply+0x50>
 8009946:	f8b1 a000 	ldrh.w	sl, [r1]
 800994a:	f1ba 0f00 	cmp.w	sl, #0
 800994e:	d024      	beq.n	800999a <__multiply+0xf2>
 8009950:	f104 0e14 	add.w	lr, r4, #20
 8009954:	46a9      	mov	r9, r5
 8009956:	f04f 0c00 	mov.w	ip, #0
 800995a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800995e:	f8d9 3000 	ldr.w	r3, [r9]
 8009962:	fa1f fb87 	uxth.w	fp, r7
 8009966:	b29b      	uxth	r3, r3
 8009968:	fb0a 330b 	mla	r3, sl, fp, r3
 800996c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009970:	f8d9 7000 	ldr.w	r7, [r9]
 8009974:	4463      	add	r3, ip
 8009976:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800997a:	fb0a c70b 	mla	r7, sl, fp, ip
 800997e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009982:	b29b      	uxth	r3, r3
 8009984:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009988:	4572      	cmp	r2, lr
 800998a:	f849 3b04 	str.w	r3, [r9], #4
 800998e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009992:	d8e2      	bhi.n	800995a <__multiply+0xb2>
 8009994:	9b01      	ldr	r3, [sp, #4]
 8009996:	f845 c003 	str.w	ip, [r5, r3]
 800999a:	9b03      	ldr	r3, [sp, #12]
 800999c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80099a0:	3104      	adds	r1, #4
 80099a2:	f1b9 0f00 	cmp.w	r9, #0
 80099a6:	d021      	beq.n	80099ec <__multiply+0x144>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	f104 0c14 	add.w	ip, r4, #20
 80099ae:	46ae      	mov	lr, r5
 80099b0:	f04f 0a00 	mov.w	sl, #0
 80099b4:	f8bc b000 	ldrh.w	fp, [ip]
 80099b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80099bc:	fb09 770b 	mla	r7, r9, fp, r7
 80099c0:	4457      	add	r7, sl
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80099c8:	f84e 3b04 	str.w	r3, [lr], #4
 80099cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80099d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099d4:	f8be 3000 	ldrh.w	r3, [lr]
 80099d8:	fb09 330a 	mla	r3, r9, sl, r3
 80099dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80099e0:	4562      	cmp	r2, ip
 80099e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099e6:	d8e5      	bhi.n	80099b4 <__multiply+0x10c>
 80099e8:	9f01      	ldr	r7, [sp, #4]
 80099ea:	51eb      	str	r3, [r5, r7]
 80099ec:	3504      	adds	r5, #4
 80099ee:	e799      	b.n	8009924 <__multiply+0x7c>
 80099f0:	3e01      	subs	r6, #1
 80099f2:	e79b      	b.n	800992c <__multiply+0x84>
 80099f4:	0800cd49 	.word	0x0800cd49
 80099f8:	0800cd5a 	.word	0x0800cd5a

080099fc <__pow5mult>:
 80099fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a00:	4615      	mov	r5, r2
 8009a02:	f012 0203 	ands.w	r2, r2, #3
 8009a06:	4607      	mov	r7, r0
 8009a08:	460e      	mov	r6, r1
 8009a0a:	d007      	beq.n	8009a1c <__pow5mult+0x20>
 8009a0c:	4c25      	ldr	r4, [pc, #148]	@ (8009aa4 <__pow5mult+0xa8>)
 8009a0e:	3a01      	subs	r2, #1
 8009a10:	2300      	movs	r3, #0
 8009a12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a16:	f7ff fe55 	bl	80096c4 <__multadd>
 8009a1a:	4606      	mov	r6, r0
 8009a1c:	10ad      	asrs	r5, r5, #2
 8009a1e:	d03d      	beq.n	8009a9c <__pow5mult+0xa0>
 8009a20:	69fc      	ldr	r4, [r7, #28]
 8009a22:	b97c      	cbnz	r4, 8009a44 <__pow5mult+0x48>
 8009a24:	2010      	movs	r0, #16
 8009a26:	f7ff fd35 	bl	8009494 <malloc>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	61f8      	str	r0, [r7, #28]
 8009a2e:	b928      	cbnz	r0, 8009a3c <__pow5mult+0x40>
 8009a30:	4b1d      	ldr	r3, [pc, #116]	@ (8009aa8 <__pow5mult+0xac>)
 8009a32:	481e      	ldr	r0, [pc, #120]	@ (8009aac <__pow5mult+0xb0>)
 8009a34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009a38:	f001 fb62 	bl	800b100 <__assert_func>
 8009a3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a40:	6004      	str	r4, [r0, #0]
 8009a42:	60c4      	str	r4, [r0, #12]
 8009a44:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a4c:	b94c      	cbnz	r4, 8009a62 <__pow5mult+0x66>
 8009a4e:	f240 2171 	movw	r1, #625	@ 0x271
 8009a52:	4638      	mov	r0, r7
 8009a54:	f7ff ff12 	bl	800987c <__i2b>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a5e:	4604      	mov	r4, r0
 8009a60:	6003      	str	r3, [r0, #0]
 8009a62:	f04f 0900 	mov.w	r9, #0
 8009a66:	07eb      	lsls	r3, r5, #31
 8009a68:	d50a      	bpl.n	8009a80 <__pow5mult+0x84>
 8009a6a:	4631      	mov	r1, r6
 8009a6c:	4622      	mov	r2, r4
 8009a6e:	4638      	mov	r0, r7
 8009a70:	f7ff ff1a 	bl	80098a8 <__multiply>
 8009a74:	4631      	mov	r1, r6
 8009a76:	4680      	mov	r8, r0
 8009a78:	4638      	mov	r0, r7
 8009a7a:	f7ff fe01 	bl	8009680 <_Bfree>
 8009a7e:	4646      	mov	r6, r8
 8009a80:	106d      	asrs	r5, r5, #1
 8009a82:	d00b      	beq.n	8009a9c <__pow5mult+0xa0>
 8009a84:	6820      	ldr	r0, [r4, #0]
 8009a86:	b938      	cbnz	r0, 8009a98 <__pow5mult+0x9c>
 8009a88:	4622      	mov	r2, r4
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4638      	mov	r0, r7
 8009a8e:	f7ff ff0b 	bl	80098a8 <__multiply>
 8009a92:	6020      	str	r0, [r4, #0]
 8009a94:	f8c0 9000 	str.w	r9, [r0]
 8009a98:	4604      	mov	r4, r0
 8009a9a:	e7e4      	b.n	8009a66 <__pow5mult+0x6a>
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aa2:	bf00      	nop
 8009aa4:	0800cdb4 	.word	0x0800cdb4
 8009aa8:	0800ccda 	.word	0x0800ccda
 8009aac:	0800cd5a 	.word	0x0800cd5a

08009ab0 <__lshift>:
 8009ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	6849      	ldr	r1, [r1, #4]
 8009ab8:	6923      	ldr	r3, [r4, #16]
 8009aba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009abe:	68a3      	ldr	r3, [r4, #8]
 8009ac0:	4607      	mov	r7, r0
 8009ac2:	4691      	mov	r9, r2
 8009ac4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ac8:	f108 0601 	add.w	r6, r8, #1
 8009acc:	42b3      	cmp	r3, r6
 8009ace:	db0b      	blt.n	8009ae8 <__lshift+0x38>
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	f7ff fd95 	bl	8009600 <_Balloc>
 8009ad6:	4605      	mov	r5, r0
 8009ad8:	b948      	cbnz	r0, 8009aee <__lshift+0x3e>
 8009ada:	4602      	mov	r2, r0
 8009adc:	4b28      	ldr	r3, [pc, #160]	@ (8009b80 <__lshift+0xd0>)
 8009ade:	4829      	ldr	r0, [pc, #164]	@ (8009b84 <__lshift+0xd4>)
 8009ae0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009ae4:	f001 fb0c 	bl	800b100 <__assert_func>
 8009ae8:	3101      	adds	r1, #1
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	e7ee      	b.n	8009acc <__lshift+0x1c>
 8009aee:	2300      	movs	r3, #0
 8009af0:	f100 0114 	add.w	r1, r0, #20
 8009af4:	f100 0210 	add.w	r2, r0, #16
 8009af8:	4618      	mov	r0, r3
 8009afa:	4553      	cmp	r3, sl
 8009afc:	db33      	blt.n	8009b66 <__lshift+0xb6>
 8009afe:	6920      	ldr	r0, [r4, #16]
 8009b00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b04:	f104 0314 	add.w	r3, r4, #20
 8009b08:	f019 091f 	ands.w	r9, r9, #31
 8009b0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b14:	d02b      	beq.n	8009b6e <__lshift+0xbe>
 8009b16:	f1c9 0e20 	rsb	lr, r9, #32
 8009b1a:	468a      	mov	sl, r1
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	6818      	ldr	r0, [r3, #0]
 8009b20:	fa00 f009 	lsl.w	r0, r0, r9
 8009b24:	4310      	orrs	r0, r2
 8009b26:	f84a 0b04 	str.w	r0, [sl], #4
 8009b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b2e:	459c      	cmp	ip, r3
 8009b30:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b34:	d8f3      	bhi.n	8009b1e <__lshift+0x6e>
 8009b36:	ebac 0304 	sub.w	r3, ip, r4
 8009b3a:	3b15      	subs	r3, #21
 8009b3c:	f023 0303 	bic.w	r3, r3, #3
 8009b40:	3304      	adds	r3, #4
 8009b42:	f104 0015 	add.w	r0, r4, #21
 8009b46:	4584      	cmp	ip, r0
 8009b48:	bf38      	it	cc
 8009b4a:	2304      	movcc	r3, #4
 8009b4c:	50ca      	str	r2, [r1, r3]
 8009b4e:	b10a      	cbz	r2, 8009b54 <__lshift+0xa4>
 8009b50:	f108 0602 	add.w	r6, r8, #2
 8009b54:	3e01      	subs	r6, #1
 8009b56:	4638      	mov	r0, r7
 8009b58:	612e      	str	r6, [r5, #16]
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	f7ff fd90 	bl	8009680 <_Bfree>
 8009b60:	4628      	mov	r0, r5
 8009b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b66:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	e7c5      	b.n	8009afa <__lshift+0x4a>
 8009b6e:	3904      	subs	r1, #4
 8009b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b74:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b78:	459c      	cmp	ip, r3
 8009b7a:	d8f9      	bhi.n	8009b70 <__lshift+0xc0>
 8009b7c:	e7ea      	b.n	8009b54 <__lshift+0xa4>
 8009b7e:	bf00      	nop
 8009b80:	0800cd49 	.word	0x0800cd49
 8009b84:	0800cd5a 	.word	0x0800cd5a

08009b88 <__mcmp>:
 8009b88:	690a      	ldr	r2, [r1, #16]
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	6900      	ldr	r0, [r0, #16]
 8009b8e:	1a80      	subs	r0, r0, r2
 8009b90:	b530      	push	{r4, r5, lr}
 8009b92:	d10e      	bne.n	8009bb2 <__mcmp+0x2a>
 8009b94:	3314      	adds	r3, #20
 8009b96:	3114      	adds	r1, #20
 8009b98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ba0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ba4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ba8:	4295      	cmp	r5, r2
 8009baa:	d003      	beq.n	8009bb4 <__mcmp+0x2c>
 8009bac:	d205      	bcs.n	8009bba <__mcmp+0x32>
 8009bae:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb2:	bd30      	pop	{r4, r5, pc}
 8009bb4:	42a3      	cmp	r3, r4
 8009bb6:	d3f3      	bcc.n	8009ba0 <__mcmp+0x18>
 8009bb8:	e7fb      	b.n	8009bb2 <__mcmp+0x2a>
 8009bba:	2001      	movs	r0, #1
 8009bbc:	e7f9      	b.n	8009bb2 <__mcmp+0x2a>
	...

08009bc0 <__mdiff>:
 8009bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc4:	4689      	mov	r9, r1
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	4611      	mov	r1, r2
 8009bca:	4648      	mov	r0, r9
 8009bcc:	4614      	mov	r4, r2
 8009bce:	f7ff ffdb 	bl	8009b88 <__mcmp>
 8009bd2:	1e05      	subs	r5, r0, #0
 8009bd4:	d112      	bne.n	8009bfc <__mdiff+0x3c>
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	4630      	mov	r0, r6
 8009bda:	f7ff fd11 	bl	8009600 <_Balloc>
 8009bde:	4602      	mov	r2, r0
 8009be0:	b928      	cbnz	r0, 8009bee <__mdiff+0x2e>
 8009be2:	4b3f      	ldr	r3, [pc, #252]	@ (8009ce0 <__mdiff+0x120>)
 8009be4:	f240 2137 	movw	r1, #567	@ 0x237
 8009be8:	483e      	ldr	r0, [pc, #248]	@ (8009ce4 <__mdiff+0x124>)
 8009bea:	f001 fa89 	bl	800b100 <__assert_func>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	b003      	add	sp, #12
 8009bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfc:	bfbc      	itt	lt
 8009bfe:	464b      	movlt	r3, r9
 8009c00:	46a1      	movlt	r9, r4
 8009c02:	4630      	mov	r0, r6
 8009c04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009c08:	bfba      	itte	lt
 8009c0a:	461c      	movlt	r4, r3
 8009c0c:	2501      	movlt	r5, #1
 8009c0e:	2500      	movge	r5, #0
 8009c10:	f7ff fcf6 	bl	8009600 <_Balloc>
 8009c14:	4602      	mov	r2, r0
 8009c16:	b918      	cbnz	r0, 8009c20 <__mdiff+0x60>
 8009c18:	4b31      	ldr	r3, [pc, #196]	@ (8009ce0 <__mdiff+0x120>)
 8009c1a:	f240 2145 	movw	r1, #581	@ 0x245
 8009c1e:	e7e3      	b.n	8009be8 <__mdiff+0x28>
 8009c20:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009c24:	6926      	ldr	r6, [r4, #16]
 8009c26:	60c5      	str	r5, [r0, #12]
 8009c28:	f109 0310 	add.w	r3, r9, #16
 8009c2c:	f109 0514 	add.w	r5, r9, #20
 8009c30:	f104 0e14 	add.w	lr, r4, #20
 8009c34:	f100 0b14 	add.w	fp, r0, #20
 8009c38:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009c3c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	46d9      	mov	r9, fp
 8009c44:	f04f 0c00 	mov.w	ip, #0
 8009c48:	9b01      	ldr	r3, [sp, #4]
 8009c4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	fa1f f38a 	uxth.w	r3, sl
 8009c58:	4619      	mov	r1, r3
 8009c5a:	b283      	uxth	r3, r0
 8009c5c:	1acb      	subs	r3, r1, r3
 8009c5e:	0c00      	lsrs	r0, r0, #16
 8009c60:	4463      	add	r3, ip
 8009c62:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c66:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c70:	4576      	cmp	r6, lr
 8009c72:	f849 3b04 	str.w	r3, [r9], #4
 8009c76:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c7a:	d8e5      	bhi.n	8009c48 <__mdiff+0x88>
 8009c7c:	1b33      	subs	r3, r6, r4
 8009c7e:	3b15      	subs	r3, #21
 8009c80:	f023 0303 	bic.w	r3, r3, #3
 8009c84:	3415      	adds	r4, #21
 8009c86:	3304      	adds	r3, #4
 8009c88:	42a6      	cmp	r6, r4
 8009c8a:	bf38      	it	cc
 8009c8c:	2304      	movcc	r3, #4
 8009c8e:	441d      	add	r5, r3
 8009c90:	445b      	add	r3, fp
 8009c92:	461e      	mov	r6, r3
 8009c94:	462c      	mov	r4, r5
 8009c96:	4544      	cmp	r4, r8
 8009c98:	d30e      	bcc.n	8009cb8 <__mdiff+0xf8>
 8009c9a:	f108 0103 	add.w	r1, r8, #3
 8009c9e:	1b49      	subs	r1, r1, r5
 8009ca0:	f021 0103 	bic.w	r1, r1, #3
 8009ca4:	3d03      	subs	r5, #3
 8009ca6:	45a8      	cmp	r8, r5
 8009ca8:	bf38      	it	cc
 8009caa:	2100      	movcc	r1, #0
 8009cac:	440b      	add	r3, r1
 8009cae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009cb2:	b191      	cbz	r1, 8009cda <__mdiff+0x11a>
 8009cb4:	6117      	str	r7, [r2, #16]
 8009cb6:	e79d      	b.n	8009bf4 <__mdiff+0x34>
 8009cb8:	f854 1b04 	ldr.w	r1, [r4], #4
 8009cbc:	46e6      	mov	lr, ip
 8009cbe:	0c08      	lsrs	r0, r1, #16
 8009cc0:	fa1c fc81 	uxtah	ip, ip, r1
 8009cc4:	4471      	add	r1, lr
 8009cc6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009cca:	b289      	uxth	r1, r1
 8009ccc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009cd0:	f846 1b04 	str.w	r1, [r6], #4
 8009cd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009cd8:	e7dd      	b.n	8009c96 <__mdiff+0xd6>
 8009cda:	3f01      	subs	r7, #1
 8009cdc:	e7e7      	b.n	8009cae <__mdiff+0xee>
 8009cde:	bf00      	nop
 8009ce0:	0800cd49 	.word	0x0800cd49
 8009ce4:	0800cd5a 	.word	0x0800cd5a

08009ce8 <__ulp>:
 8009ce8:	b082      	sub	sp, #8
 8009cea:	ed8d 0b00 	vstr	d0, [sp]
 8009cee:	9a01      	ldr	r2, [sp, #4]
 8009cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8009d30 <__ulp+0x48>)
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	dc08      	bgt.n	8009d0e <__ulp+0x26>
 8009cfc:	425b      	negs	r3, r3
 8009cfe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009d02:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009d06:	da04      	bge.n	8009d12 <__ulp+0x2a>
 8009d08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009d0c:	4113      	asrs	r3, r2
 8009d0e:	2200      	movs	r2, #0
 8009d10:	e008      	b.n	8009d24 <__ulp+0x3c>
 8009d12:	f1a2 0314 	sub.w	r3, r2, #20
 8009d16:	2b1e      	cmp	r3, #30
 8009d18:	bfda      	itte	le
 8009d1a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009d1e:	40da      	lsrle	r2, r3
 8009d20:	2201      	movgt	r2, #1
 8009d22:	2300      	movs	r3, #0
 8009d24:	4619      	mov	r1, r3
 8009d26:	4610      	mov	r0, r2
 8009d28:	ec41 0b10 	vmov	d0, r0, r1
 8009d2c:	b002      	add	sp, #8
 8009d2e:	4770      	bx	lr
 8009d30:	7ff00000 	.word	0x7ff00000

08009d34 <__b2d>:
 8009d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d38:	6906      	ldr	r6, [r0, #16]
 8009d3a:	f100 0814 	add.w	r8, r0, #20
 8009d3e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009d42:	1f37      	subs	r7, r6, #4
 8009d44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d48:	4610      	mov	r0, r2
 8009d4a:	f7ff fd4b 	bl	80097e4 <__hi0bits>
 8009d4e:	f1c0 0320 	rsb	r3, r0, #32
 8009d52:	280a      	cmp	r0, #10
 8009d54:	600b      	str	r3, [r1, #0]
 8009d56:	491b      	ldr	r1, [pc, #108]	@ (8009dc4 <__b2d+0x90>)
 8009d58:	dc15      	bgt.n	8009d86 <__b2d+0x52>
 8009d5a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009d5e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009d62:	45b8      	cmp	r8, r7
 8009d64:	ea43 0501 	orr.w	r5, r3, r1
 8009d68:	bf34      	ite	cc
 8009d6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d6e:	2300      	movcs	r3, #0
 8009d70:	3015      	adds	r0, #21
 8009d72:	fa02 f000 	lsl.w	r0, r2, r0
 8009d76:	fa23 f30c 	lsr.w	r3, r3, ip
 8009d7a:	4303      	orrs	r3, r0
 8009d7c:	461c      	mov	r4, r3
 8009d7e:	ec45 4b10 	vmov	d0, r4, r5
 8009d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d86:	45b8      	cmp	r8, r7
 8009d88:	bf3a      	itte	cc
 8009d8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d8e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009d92:	2300      	movcs	r3, #0
 8009d94:	380b      	subs	r0, #11
 8009d96:	d012      	beq.n	8009dbe <__b2d+0x8a>
 8009d98:	f1c0 0120 	rsb	r1, r0, #32
 8009d9c:	fa23 f401 	lsr.w	r4, r3, r1
 8009da0:	4082      	lsls	r2, r0
 8009da2:	4322      	orrs	r2, r4
 8009da4:	4547      	cmp	r7, r8
 8009da6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009daa:	bf8c      	ite	hi
 8009dac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009db0:	2200      	movls	r2, #0
 8009db2:	4083      	lsls	r3, r0
 8009db4:	40ca      	lsrs	r2, r1
 8009db6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	e7de      	b.n	8009d7c <__b2d+0x48>
 8009dbe:	ea42 0501 	orr.w	r5, r2, r1
 8009dc2:	e7db      	b.n	8009d7c <__b2d+0x48>
 8009dc4:	3ff00000 	.word	0x3ff00000

08009dc8 <__d2b>:
 8009dc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009dcc:	460f      	mov	r7, r1
 8009dce:	2101      	movs	r1, #1
 8009dd0:	ec59 8b10 	vmov	r8, r9, d0
 8009dd4:	4616      	mov	r6, r2
 8009dd6:	f7ff fc13 	bl	8009600 <_Balloc>
 8009dda:	4604      	mov	r4, r0
 8009ddc:	b930      	cbnz	r0, 8009dec <__d2b+0x24>
 8009dde:	4602      	mov	r2, r0
 8009de0:	4b23      	ldr	r3, [pc, #140]	@ (8009e70 <__d2b+0xa8>)
 8009de2:	4824      	ldr	r0, [pc, #144]	@ (8009e74 <__d2b+0xac>)
 8009de4:	f240 310f 	movw	r1, #783	@ 0x30f
 8009de8:	f001 f98a 	bl	800b100 <__assert_func>
 8009dec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009df0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009df4:	b10d      	cbz	r5, 8009dfa <__d2b+0x32>
 8009df6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dfa:	9301      	str	r3, [sp, #4]
 8009dfc:	f1b8 0300 	subs.w	r3, r8, #0
 8009e00:	d023      	beq.n	8009e4a <__d2b+0x82>
 8009e02:	4668      	mov	r0, sp
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	f7ff fd0c 	bl	8009822 <__lo0bits>
 8009e0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009e0e:	b1d0      	cbz	r0, 8009e46 <__d2b+0x7e>
 8009e10:	f1c0 0320 	rsb	r3, r0, #32
 8009e14:	fa02 f303 	lsl.w	r3, r2, r3
 8009e18:	430b      	orrs	r3, r1
 8009e1a:	40c2      	lsrs	r2, r0
 8009e1c:	6163      	str	r3, [r4, #20]
 8009e1e:	9201      	str	r2, [sp, #4]
 8009e20:	9b01      	ldr	r3, [sp, #4]
 8009e22:	61a3      	str	r3, [r4, #24]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	bf0c      	ite	eq
 8009e28:	2201      	moveq	r2, #1
 8009e2a:	2202      	movne	r2, #2
 8009e2c:	6122      	str	r2, [r4, #16]
 8009e2e:	b1a5      	cbz	r5, 8009e5a <__d2b+0x92>
 8009e30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009e34:	4405      	add	r5, r0
 8009e36:	603d      	str	r5, [r7, #0]
 8009e38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009e3c:	6030      	str	r0, [r6, #0]
 8009e3e:	4620      	mov	r0, r4
 8009e40:	b003      	add	sp, #12
 8009e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e46:	6161      	str	r1, [r4, #20]
 8009e48:	e7ea      	b.n	8009e20 <__d2b+0x58>
 8009e4a:	a801      	add	r0, sp, #4
 8009e4c:	f7ff fce9 	bl	8009822 <__lo0bits>
 8009e50:	9b01      	ldr	r3, [sp, #4]
 8009e52:	6163      	str	r3, [r4, #20]
 8009e54:	3020      	adds	r0, #32
 8009e56:	2201      	movs	r2, #1
 8009e58:	e7e8      	b.n	8009e2c <__d2b+0x64>
 8009e5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009e62:	6038      	str	r0, [r7, #0]
 8009e64:	6918      	ldr	r0, [r3, #16]
 8009e66:	f7ff fcbd 	bl	80097e4 <__hi0bits>
 8009e6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e6e:	e7e5      	b.n	8009e3c <__d2b+0x74>
 8009e70:	0800cd49 	.word	0x0800cd49
 8009e74:	0800cd5a 	.word	0x0800cd5a

08009e78 <__ratio>:
 8009e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	b085      	sub	sp, #20
 8009e7e:	e9cd 1000 	strd	r1, r0, [sp]
 8009e82:	a902      	add	r1, sp, #8
 8009e84:	f7ff ff56 	bl	8009d34 <__b2d>
 8009e88:	9800      	ldr	r0, [sp, #0]
 8009e8a:	a903      	add	r1, sp, #12
 8009e8c:	ec55 4b10 	vmov	r4, r5, d0
 8009e90:	f7ff ff50 	bl	8009d34 <__b2d>
 8009e94:	9b01      	ldr	r3, [sp, #4]
 8009e96:	6919      	ldr	r1, [r3, #16]
 8009e98:	9b00      	ldr	r3, [sp, #0]
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	1ac9      	subs	r1, r1, r3
 8009e9e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009ea2:	1a9b      	subs	r3, r3, r2
 8009ea4:	ec5b ab10 	vmov	sl, fp, d0
 8009ea8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	bfce      	itee	gt
 8009eb0:	462a      	movgt	r2, r5
 8009eb2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009eb6:	465a      	movle	r2, fp
 8009eb8:	462f      	mov	r7, r5
 8009eba:	46d9      	mov	r9, fp
 8009ebc:	bfcc      	ite	gt
 8009ebe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ec2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009ec6:	464b      	mov	r3, r9
 8009ec8:	4652      	mov	r2, sl
 8009eca:	4620      	mov	r0, r4
 8009ecc:	4639      	mov	r1, r7
 8009ece:	f7f6 fcdd 	bl	800088c <__aeabi_ddiv>
 8009ed2:	ec41 0b10 	vmov	d0, r0, r1
 8009ed6:	b005      	add	sp, #20
 8009ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009edc <__copybits>:
 8009edc:	3901      	subs	r1, #1
 8009ede:	b570      	push	{r4, r5, r6, lr}
 8009ee0:	1149      	asrs	r1, r1, #5
 8009ee2:	6914      	ldr	r4, [r2, #16]
 8009ee4:	3101      	adds	r1, #1
 8009ee6:	f102 0314 	add.w	r3, r2, #20
 8009eea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009eee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ef2:	1f05      	subs	r5, r0, #4
 8009ef4:	42a3      	cmp	r3, r4
 8009ef6:	d30c      	bcc.n	8009f12 <__copybits+0x36>
 8009ef8:	1aa3      	subs	r3, r4, r2
 8009efa:	3b11      	subs	r3, #17
 8009efc:	f023 0303 	bic.w	r3, r3, #3
 8009f00:	3211      	adds	r2, #17
 8009f02:	42a2      	cmp	r2, r4
 8009f04:	bf88      	it	hi
 8009f06:	2300      	movhi	r3, #0
 8009f08:	4418      	add	r0, r3
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	4288      	cmp	r0, r1
 8009f0e:	d305      	bcc.n	8009f1c <__copybits+0x40>
 8009f10:	bd70      	pop	{r4, r5, r6, pc}
 8009f12:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f16:	f845 6f04 	str.w	r6, [r5, #4]!
 8009f1a:	e7eb      	b.n	8009ef4 <__copybits+0x18>
 8009f1c:	f840 3b04 	str.w	r3, [r0], #4
 8009f20:	e7f4      	b.n	8009f0c <__copybits+0x30>

08009f22 <__any_on>:
 8009f22:	f100 0214 	add.w	r2, r0, #20
 8009f26:	6900      	ldr	r0, [r0, #16]
 8009f28:	114b      	asrs	r3, r1, #5
 8009f2a:	4298      	cmp	r0, r3
 8009f2c:	b510      	push	{r4, lr}
 8009f2e:	db11      	blt.n	8009f54 <__any_on+0x32>
 8009f30:	dd0a      	ble.n	8009f48 <__any_on+0x26>
 8009f32:	f011 011f 	ands.w	r1, r1, #31
 8009f36:	d007      	beq.n	8009f48 <__any_on+0x26>
 8009f38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f3c:	fa24 f001 	lsr.w	r0, r4, r1
 8009f40:	fa00 f101 	lsl.w	r1, r0, r1
 8009f44:	428c      	cmp	r4, r1
 8009f46:	d10b      	bne.n	8009f60 <__any_on+0x3e>
 8009f48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d803      	bhi.n	8009f58 <__any_on+0x36>
 8009f50:	2000      	movs	r0, #0
 8009f52:	bd10      	pop	{r4, pc}
 8009f54:	4603      	mov	r3, r0
 8009f56:	e7f7      	b.n	8009f48 <__any_on+0x26>
 8009f58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f5c:	2900      	cmp	r1, #0
 8009f5e:	d0f5      	beq.n	8009f4c <__any_on+0x2a>
 8009f60:	2001      	movs	r0, #1
 8009f62:	e7f6      	b.n	8009f52 <__any_on+0x30>

08009f64 <sulp>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	4604      	mov	r4, r0
 8009f68:	460d      	mov	r5, r1
 8009f6a:	ec45 4b10 	vmov	d0, r4, r5
 8009f6e:	4616      	mov	r6, r2
 8009f70:	f7ff feba 	bl	8009ce8 <__ulp>
 8009f74:	ec51 0b10 	vmov	r0, r1, d0
 8009f78:	b17e      	cbz	r6, 8009f9a <sulp+0x36>
 8009f7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009f7e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	dd09      	ble.n	8009f9a <sulp+0x36>
 8009f86:	051b      	lsls	r3, r3, #20
 8009f88:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009f8c:	2400      	movs	r4, #0
 8009f8e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009f92:	4622      	mov	r2, r4
 8009f94:	462b      	mov	r3, r5
 8009f96:	f7f6 fb4f 	bl	8000638 <__aeabi_dmul>
 8009f9a:	ec41 0b10 	vmov	d0, r0, r1
 8009f9e:	bd70      	pop	{r4, r5, r6, pc}

08009fa0 <_strtod_l>:
 8009fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa4:	b09f      	sub	sp, #124	@ 0x7c
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009faa:	2200      	movs	r2, #0
 8009fac:	921a      	str	r2, [sp, #104]	@ 0x68
 8009fae:	9005      	str	r0, [sp, #20]
 8009fb0:	f04f 0a00 	mov.w	sl, #0
 8009fb4:	f04f 0b00 	mov.w	fp, #0
 8009fb8:	460a      	mov	r2, r1
 8009fba:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fbc:	7811      	ldrb	r1, [r2, #0]
 8009fbe:	292b      	cmp	r1, #43	@ 0x2b
 8009fc0:	d04a      	beq.n	800a058 <_strtod_l+0xb8>
 8009fc2:	d838      	bhi.n	800a036 <_strtod_l+0x96>
 8009fc4:	290d      	cmp	r1, #13
 8009fc6:	d832      	bhi.n	800a02e <_strtod_l+0x8e>
 8009fc8:	2908      	cmp	r1, #8
 8009fca:	d832      	bhi.n	800a032 <_strtod_l+0x92>
 8009fcc:	2900      	cmp	r1, #0
 8009fce:	d03b      	beq.n	800a048 <_strtod_l+0xa8>
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009fd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009fd6:	782a      	ldrb	r2, [r5, #0]
 8009fd8:	2a30      	cmp	r2, #48	@ 0x30
 8009fda:	f040 80b3 	bne.w	800a144 <_strtod_l+0x1a4>
 8009fde:	786a      	ldrb	r2, [r5, #1]
 8009fe0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009fe4:	2a58      	cmp	r2, #88	@ 0x58
 8009fe6:	d16e      	bne.n	800a0c6 <_strtod_l+0x126>
 8009fe8:	9302      	str	r3, [sp, #8]
 8009fea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fec:	9301      	str	r3, [sp, #4]
 8009fee:	ab1a      	add	r3, sp, #104	@ 0x68
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	4a8e      	ldr	r2, [pc, #568]	@ (800a22c <_strtod_l+0x28c>)
 8009ff4:	9805      	ldr	r0, [sp, #20]
 8009ff6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009ff8:	a919      	add	r1, sp, #100	@ 0x64
 8009ffa:	f001 f91b 	bl	800b234 <__gethex>
 8009ffe:	f010 060f 	ands.w	r6, r0, #15
 800a002:	4604      	mov	r4, r0
 800a004:	d005      	beq.n	800a012 <_strtod_l+0x72>
 800a006:	2e06      	cmp	r6, #6
 800a008:	d128      	bne.n	800a05c <_strtod_l+0xbc>
 800a00a:	3501      	adds	r5, #1
 800a00c:	2300      	movs	r3, #0
 800a00e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a010:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a012:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a014:	2b00      	cmp	r3, #0
 800a016:	f040 858e 	bne.w	800ab36 <_strtod_l+0xb96>
 800a01a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a01c:	b1cb      	cbz	r3, 800a052 <_strtod_l+0xb2>
 800a01e:	4652      	mov	r2, sl
 800a020:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a024:	ec43 2b10 	vmov	d0, r2, r3
 800a028:	b01f      	add	sp, #124	@ 0x7c
 800a02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02e:	2920      	cmp	r1, #32
 800a030:	d1ce      	bne.n	8009fd0 <_strtod_l+0x30>
 800a032:	3201      	adds	r2, #1
 800a034:	e7c1      	b.n	8009fba <_strtod_l+0x1a>
 800a036:	292d      	cmp	r1, #45	@ 0x2d
 800a038:	d1ca      	bne.n	8009fd0 <_strtod_l+0x30>
 800a03a:	2101      	movs	r1, #1
 800a03c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a03e:	1c51      	adds	r1, r2, #1
 800a040:	9119      	str	r1, [sp, #100]	@ 0x64
 800a042:	7852      	ldrb	r2, [r2, #1]
 800a044:	2a00      	cmp	r2, #0
 800a046:	d1c5      	bne.n	8009fd4 <_strtod_l+0x34>
 800a048:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a04a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f040 8570 	bne.w	800ab32 <_strtod_l+0xb92>
 800a052:	4652      	mov	r2, sl
 800a054:	465b      	mov	r3, fp
 800a056:	e7e5      	b.n	800a024 <_strtod_l+0x84>
 800a058:	2100      	movs	r1, #0
 800a05a:	e7ef      	b.n	800a03c <_strtod_l+0x9c>
 800a05c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a05e:	b13a      	cbz	r2, 800a070 <_strtod_l+0xd0>
 800a060:	2135      	movs	r1, #53	@ 0x35
 800a062:	a81c      	add	r0, sp, #112	@ 0x70
 800a064:	f7ff ff3a 	bl	8009edc <__copybits>
 800a068:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a06a:	9805      	ldr	r0, [sp, #20]
 800a06c:	f7ff fb08 	bl	8009680 <_Bfree>
 800a070:	3e01      	subs	r6, #1
 800a072:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a074:	2e04      	cmp	r6, #4
 800a076:	d806      	bhi.n	800a086 <_strtod_l+0xe6>
 800a078:	e8df f006 	tbb	[pc, r6]
 800a07c:	201d0314 	.word	0x201d0314
 800a080:	14          	.byte	0x14
 800a081:	00          	.byte	0x00
 800a082:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a086:	05e1      	lsls	r1, r4, #23
 800a088:	bf48      	it	mi
 800a08a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a08e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a092:	0d1b      	lsrs	r3, r3, #20
 800a094:	051b      	lsls	r3, r3, #20
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1bb      	bne.n	800a012 <_strtod_l+0x72>
 800a09a:	f7fe fb21 	bl	80086e0 <__errno>
 800a09e:	2322      	movs	r3, #34	@ 0x22
 800a0a0:	6003      	str	r3, [r0, #0]
 800a0a2:	e7b6      	b.n	800a012 <_strtod_l+0x72>
 800a0a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a0a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a0ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a0b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a0b4:	e7e7      	b.n	800a086 <_strtod_l+0xe6>
 800a0b6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a234 <_strtod_l+0x294>
 800a0ba:	e7e4      	b.n	800a086 <_strtod_l+0xe6>
 800a0bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a0c0:	f04f 3aff 	mov.w	sl, #4294967295
 800a0c4:	e7df      	b.n	800a086 <_strtod_l+0xe6>
 800a0c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0c8:	1c5a      	adds	r2, r3, #1
 800a0ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0cc:	785b      	ldrb	r3, [r3, #1]
 800a0ce:	2b30      	cmp	r3, #48	@ 0x30
 800a0d0:	d0f9      	beq.n	800a0c6 <_strtod_l+0x126>
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d09d      	beq.n	800a012 <_strtod_l+0x72>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a0de:	2300      	movs	r3, #0
 800a0e0:	9308      	str	r3, [sp, #32]
 800a0e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0e4:	461f      	mov	r7, r3
 800a0e6:	220a      	movs	r2, #10
 800a0e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a0ea:	7805      	ldrb	r5, [r0, #0]
 800a0ec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a0f0:	b2d9      	uxtb	r1, r3
 800a0f2:	2909      	cmp	r1, #9
 800a0f4:	d928      	bls.n	800a148 <_strtod_l+0x1a8>
 800a0f6:	494e      	ldr	r1, [pc, #312]	@ (800a230 <_strtod_l+0x290>)
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f000 ffd5 	bl	800b0a8 <strncmp>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d032      	beq.n	800a168 <_strtod_l+0x1c8>
 800a102:	2000      	movs	r0, #0
 800a104:	462a      	mov	r2, r5
 800a106:	4681      	mov	r9, r0
 800a108:	463d      	mov	r5, r7
 800a10a:	4603      	mov	r3, r0
 800a10c:	2a65      	cmp	r2, #101	@ 0x65
 800a10e:	d001      	beq.n	800a114 <_strtod_l+0x174>
 800a110:	2a45      	cmp	r2, #69	@ 0x45
 800a112:	d114      	bne.n	800a13e <_strtod_l+0x19e>
 800a114:	b91d      	cbnz	r5, 800a11e <_strtod_l+0x17e>
 800a116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a118:	4302      	orrs	r2, r0
 800a11a:	d095      	beq.n	800a048 <_strtod_l+0xa8>
 800a11c:	2500      	movs	r5, #0
 800a11e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a120:	1c62      	adds	r2, r4, #1
 800a122:	9219      	str	r2, [sp, #100]	@ 0x64
 800a124:	7862      	ldrb	r2, [r4, #1]
 800a126:	2a2b      	cmp	r2, #43	@ 0x2b
 800a128:	d077      	beq.n	800a21a <_strtod_l+0x27a>
 800a12a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a12c:	d07b      	beq.n	800a226 <_strtod_l+0x286>
 800a12e:	f04f 0c00 	mov.w	ip, #0
 800a132:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a136:	2909      	cmp	r1, #9
 800a138:	f240 8082 	bls.w	800a240 <_strtod_l+0x2a0>
 800a13c:	9419      	str	r4, [sp, #100]	@ 0x64
 800a13e:	f04f 0800 	mov.w	r8, #0
 800a142:	e0a2      	b.n	800a28a <_strtod_l+0x2ea>
 800a144:	2300      	movs	r3, #0
 800a146:	e7c7      	b.n	800a0d8 <_strtod_l+0x138>
 800a148:	2f08      	cmp	r7, #8
 800a14a:	bfd5      	itete	le
 800a14c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a14e:	9908      	ldrgt	r1, [sp, #32]
 800a150:	fb02 3301 	mlale	r3, r2, r1, r3
 800a154:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a158:	f100 0001 	add.w	r0, r0, #1
 800a15c:	bfd4      	ite	le
 800a15e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a160:	9308      	strgt	r3, [sp, #32]
 800a162:	3701      	adds	r7, #1
 800a164:	9019      	str	r0, [sp, #100]	@ 0x64
 800a166:	e7bf      	b.n	800a0e8 <_strtod_l+0x148>
 800a168:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a16a:	1c5a      	adds	r2, r3, #1
 800a16c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a16e:	785a      	ldrb	r2, [r3, #1]
 800a170:	b37f      	cbz	r7, 800a1d2 <_strtod_l+0x232>
 800a172:	4681      	mov	r9, r0
 800a174:	463d      	mov	r5, r7
 800a176:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a17a:	2b09      	cmp	r3, #9
 800a17c:	d912      	bls.n	800a1a4 <_strtod_l+0x204>
 800a17e:	2301      	movs	r3, #1
 800a180:	e7c4      	b.n	800a10c <_strtod_l+0x16c>
 800a182:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a184:	1c5a      	adds	r2, r3, #1
 800a186:	9219      	str	r2, [sp, #100]	@ 0x64
 800a188:	785a      	ldrb	r2, [r3, #1]
 800a18a:	3001      	adds	r0, #1
 800a18c:	2a30      	cmp	r2, #48	@ 0x30
 800a18e:	d0f8      	beq.n	800a182 <_strtod_l+0x1e2>
 800a190:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a194:	2b08      	cmp	r3, #8
 800a196:	f200 84d3 	bhi.w	800ab40 <_strtod_l+0xba0>
 800a19a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a19c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a19e:	4681      	mov	r9, r0
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	3a30      	subs	r2, #48	@ 0x30
 800a1a6:	f100 0301 	add.w	r3, r0, #1
 800a1aa:	d02a      	beq.n	800a202 <_strtod_l+0x262>
 800a1ac:	4499      	add	r9, r3
 800a1ae:	eb00 0c05 	add.w	ip, r0, r5
 800a1b2:	462b      	mov	r3, r5
 800a1b4:	210a      	movs	r1, #10
 800a1b6:	4563      	cmp	r3, ip
 800a1b8:	d10d      	bne.n	800a1d6 <_strtod_l+0x236>
 800a1ba:	1c69      	adds	r1, r5, #1
 800a1bc:	4401      	add	r1, r0
 800a1be:	4428      	add	r0, r5
 800a1c0:	2808      	cmp	r0, #8
 800a1c2:	dc16      	bgt.n	800a1f2 <_strtod_l+0x252>
 800a1c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a1c6:	230a      	movs	r3, #10
 800a1c8:	fb03 2300 	mla	r3, r3, r0, r2
 800a1cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	e018      	b.n	800a204 <_strtod_l+0x264>
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	e7da      	b.n	800a18c <_strtod_l+0x1ec>
 800a1d6:	2b08      	cmp	r3, #8
 800a1d8:	f103 0301 	add.w	r3, r3, #1
 800a1dc:	dc03      	bgt.n	800a1e6 <_strtod_l+0x246>
 800a1de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a1e0:	434e      	muls	r6, r1
 800a1e2:	960a      	str	r6, [sp, #40]	@ 0x28
 800a1e4:	e7e7      	b.n	800a1b6 <_strtod_l+0x216>
 800a1e6:	2b10      	cmp	r3, #16
 800a1e8:	bfde      	ittt	le
 800a1ea:	9e08      	ldrle	r6, [sp, #32]
 800a1ec:	434e      	mulle	r6, r1
 800a1ee:	9608      	strle	r6, [sp, #32]
 800a1f0:	e7e1      	b.n	800a1b6 <_strtod_l+0x216>
 800a1f2:	280f      	cmp	r0, #15
 800a1f4:	dceb      	bgt.n	800a1ce <_strtod_l+0x22e>
 800a1f6:	9808      	ldr	r0, [sp, #32]
 800a1f8:	230a      	movs	r3, #10
 800a1fa:	fb03 2300 	mla	r3, r3, r0, r2
 800a1fe:	9308      	str	r3, [sp, #32]
 800a200:	e7e5      	b.n	800a1ce <_strtod_l+0x22e>
 800a202:	4629      	mov	r1, r5
 800a204:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a206:	1c50      	adds	r0, r2, #1
 800a208:	9019      	str	r0, [sp, #100]	@ 0x64
 800a20a:	7852      	ldrb	r2, [r2, #1]
 800a20c:	4618      	mov	r0, r3
 800a20e:	460d      	mov	r5, r1
 800a210:	e7b1      	b.n	800a176 <_strtod_l+0x1d6>
 800a212:	f04f 0900 	mov.w	r9, #0
 800a216:	2301      	movs	r3, #1
 800a218:	e77d      	b.n	800a116 <_strtod_l+0x176>
 800a21a:	f04f 0c00 	mov.w	ip, #0
 800a21e:	1ca2      	adds	r2, r4, #2
 800a220:	9219      	str	r2, [sp, #100]	@ 0x64
 800a222:	78a2      	ldrb	r2, [r4, #2]
 800a224:	e785      	b.n	800a132 <_strtod_l+0x192>
 800a226:	f04f 0c01 	mov.w	ip, #1
 800a22a:	e7f8      	b.n	800a21e <_strtod_l+0x27e>
 800a22c:	0800cec8 	.word	0x0800cec8
 800a230:	0800ceb0 	.word	0x0800ceb0
 800a234:	7ff00000 	.word	0x7ff00000
 800a238:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a23a:	1c51      	adds	r1, r2, #1
 800a23c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a23e:	7852      	ldrb	r2, [r2, #1]
 800a240:	2a30      	cmp	r2, #48	@ 0x30
 800a242:	d0f9      	beq.n	800a238 <_strtod_l+0x298>
 800a244:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a248:	2908      	cmp	r1, #8
 800a24a:	f63f af78 	bhi.w	800a13e <_strtod_l+0x19e>
 800a24e:	3a30      	subs	r2, #48	@ 0x30
 800a250:	920e      	str	r2, [sp, #56]	@ 0x38
 800a252:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a254:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a256:	f04f 080a 	mov.w	r8, #10
 800a25a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a25c:	1c56      	adds	r6, r2, #1
 800a25e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a260:	7852      	ldrb	r2, [r2, #1]
 800a262:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a266:	f1be 0f09 	cmp.w	lr, #9
 800a26a:	d939      	bls.n	800a2e0 <_strtod_l+0x340>
 800a26c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a26e:	1a76      	subs	r6, r6, r1
 800a270:	2e08      	cmp	r6, #8
 800a272:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a276:	dc03      	bgt.n	800a280 <_strtod_l+0x2e0>
 800a278:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a27a:	4588      	cmp	r8, r1
 800a27c:	bfa8      	it	ge
 800a27e:	4688      	movge	r8, r1
 800a280:	f1bc 0f00 	cmp.w	ip, #0
 800a284:	d001      	beq.n	800a28a <_strtod_l+0x2ea>
 800a286:	f1c8 0800 	rsb	r8, r8, #0
 800a28a:	2d00      	cmp	r5, #0
 800a28c:	d14e      	bne.n	800a32c <_strtod_l+0x38c>
 800a28e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a290:	4308      	orrs	r0, r1
 800a292:	f47f aebe 	bne.w	800a012 <_strtod_l+0x72>
 800a296:	2b00      	cmp	r3, #0
 800a298:	f47f aed6 	bne.w	800a048 <_strtod_l+0xa8>
 800a29c:	2a69      	cmp	r2, #105	@ 0x69
 800a29e:	d028      	beq.n	800a2f2 <_strtod_l+0x352>
 800a2a0:	dc25      	bgt.n	800a2ee <_strtod_l+0x34e>
 800a2a2:	2a49      	cmp	r2, #73	@ 0x49
 800a2a4:	d025      	beq.n	800a2f2 <_strtod_l+0x352>
 800a2a6:	2a4e      	cmp	r2, #78	@ 0x4e
 800a2a8:	f47f aece 	bne.w	800a048 <_strtod_l+0xa8>
 800a2ac:	499b      	ldr	r1, [pc, #620]	@ (800a51c <_strtod_l+0x57c>)
 800a2ae:	a819      	add	r0, sp, #100	@ 0x64
 800a2b0:	f001 f9e2 	bl	800b678 <__match>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	f43f aec7 	beq.w	800a048 <_strtod_l+0xa8>
 800a2ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b28      	cmp	r3, #40	@ 0x28
 800a2c0:	d12e      	bne.n	800a320 <_strtod_l+0x380>
 800a2c2:	4997      	ldr	r1, [pc, #604]	@ (800a520 <_strtod_l+0x580>)
 800a2c4:	aa1c      	add	r2, sp, #112	@ 0x70
 800a2c6:	a819      	add	r0, sp, #100	@ 0x64
 800a2c8:	f001 f9ea 	bl	800b6a0 <__hexnan>
 800a2cc:	2805      	cmp	r0, #5
 800a2ce:	d127      	bne.n	800a320 <_strtod_l+0x380>
 800a2d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a2d2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a2d6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a2da:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a2de:	e698      	b.n	800a012 <_strtod_l+0x72>
 800a2e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a2e2:	fb08 2101 	mla	r1, r8, r1, r2
 800a2e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a2ea:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2ec:	e7b5      	b.n	800a25a <_strtod_l+0x2ba>
 800a2ee:	2a6e      	cmp	r2, #110	@ 0x6e
 800a2f0:	e7da      	b.n	800a2a8 <_strtod_l+0x308>
 800a2f2:	498c      	ldr	r1, [pc, #560]	@ (800a524 <_strtod_l+0x584>)
 800a2f4:	a819      	add	r0, sp, #100	@ 0x64
 800a2f6:	f001 f9bf 	bl	800b678 <__match>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	f43f aea4 	beq.w	800a048 <_strtod_l+0xa8>
 800a300:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a302:	4989      	ldr	r1, [pc, #548]	@ (800a528 <_strtod_l+0x588>)
 800a304:	3b01      	subs	r3, #1
 800a306:	a819      	add	r0, sp, #100	@ 0x64
 800a308:	9319      	str	r3, [sp, #100]	@ 0x64
 800a30a:	f001 f9b5 	bl	800b678 <__match>
 800a30e:	b910      	cbnz	r0, 800a316 <_strtod_l+0x376>
 800a310:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a312:	3301      	adds	r3, #1
 800a314:	9319      	str	r3, [sp, #100]	@ 0x64
 800a316:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a538 <_strtod_l+0x598>
 800a31a:	f04f 0a00 	mov.w	sl, #0
 800a31e:	e678      	b.n	800a012 <_strtod_l+0x72>
 800a320:	4882      	ldr	r0, [pc, #520]	@ (800a52c <_strtod_l+0x58c>)
 800a322:	f000 fee5 	bl	800b0f0 <nan>
 800a326:	ec5b ab10 	vmov	sl, fp, d0
 800a32a:	e672      	b.n	800a012 <_strtod_l+0x72>
 800a32c:	eba8 0309 	sub.w	r3, r8, r9
 800a330:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a332:	9309      	str	r3, [sp, #36]	@ 0x24
 800a334:	2f00      	cmp	r7, #0
 800a336:	bf08      	it	eq
 800a338:	462f      	moveq	r7, r5
 800a33a:	2d10      	cmp	r5, #16
 800a33c:	462c      	mov	r4, r5
 800a33e:	bfa8      	it	ge
 800a340:	2410      	movge	r4, #16
 800a342:	f7f6 f8ff 	bl	8000544 <__aeabi_ui2d>
 800a346:	2d09      	cmp	r5, #9
 800a348:	4682      	mov	sl, r0
 800a34a:	468b      	mov	fp, r1
 800a34c:	dc13      	bgt.n	800a376 <_strtod_l+0x3d6>
 800a34e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a350:	2b00      	cmp	r3, #0
 800a352:	f43f ae5e 	beq.w	800a012 <_strtod_l+0x72>
 800a356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a358:	dd78      	ble.n	800a44c <_strtod_l+0x4ac>
 800a35a:	2b16      	cmp	r3, #22
 800a35c:	dc5f      	bgt.n	800a41e <_strtod_l+0x47e>
 800a35e:	4974      	ldr	r1, [pc, #464]	@ (800a530 <_strtod_l+0x590>)
 800a360:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a364:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a368:	4652      	mov	r2, sl
 800a36a:	465b      	mov	r3, fp
 800a36c:	f7f6 f964 	bl	8000638 <__aeabi_dmul>
 800a370:	4682      	mov	sl, r0
 800a372:	468b      	mov	fp, r1
 800a374:	e64d      	b.n	800a012 <_strtod_l+0x72>
 800a376:	4b6e      	ldr	r3, [pc, #440]	@ (800a530 <_strtod_l+0x590>)
 800a378:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a37c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a380:	f7f6 f95a 	bl	8000638 <__aeabi_dmul>
 800a384:	4682      	mov	sl, r0
 800a386:	9808      	ldr	r0, [sp, #32]
 800a388:	468b      	mov	fp, r1
 800a38a:	f7f6 f8db 	bl	8000544 <__aeabi_ui2d>
 800a38e:	4602      	mov	r2, r0
 800a390:	460b      	mov	r3, r1
 800a392:	4650      	mov	r0, sl
 800a394:	4659      	mov	r1, fp
 800a396:	f7f5 ff99 	bl	80002cc <__adddf3>
 800a39a:	2d0f      	cmp	r5, #15
 800a39c:	4682      	mov	sl, r0
 800a39e:	468b      	mov	fp, r1
 800a3a0:	ddd5      	ble.n	800a34e <_strtod_l+0x3ae>
 800a3a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a4:	1b2c      	subs	r4, r5, r4
 800a3a6:	441c      	add	r4, r3
 800a3a8:	2c00      	cmp	r4, #0
 800a3aa:	f340 8096 	ble.w	800a4da <_strtod_l+0x53a>
 800a3ae:	f014 030f 	ands.w	r3, r4, #15
 800a3b2:	d00a      	beq.n	800a3ca <_strtod_l+0x42a>
 800a3b4:	495e      	ldr	r1, [pc, #376]	@ (800a530 <_strtod_l+0x590>)
 800a3b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a3ba:	4652      	mov	r2, sl
 800a3bc:	465b      	mov	r3, fp
 800a3be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3c2:	f7f6 f939 	bl	8000638 <__aeabi_dmul>
 800a3c6:	4682      	mov	sl, r0
 800a3c8:	468b      	mov	fp, r1
 800a3ca:	f034 040f 	bics.w	r4, r4, #15
 800a3ce:	d073      	beq.n	800a4b8 <_strtod_l+0x518>
 800a3d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a3d4:	dd48      	ble.n	800a468 <_strtod_l+0x4c8>
 800a3d6:	2400      	movs	r4, #0
 800a3d8:	46a0      	mov	r8, r4
 800a3da:	940a      	str	r4, [sp, #40]	@ 0x28
 800a3dc:	46a1      	mov	r9, r4
 800a3de:	9a05      	ldr	r2, [sp, #20]
 800a3e0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a538 <_strtod_l+0x598>
 800a3e4:	2322      	movs	r3, #34	@ 0x22
 800a3e6:	6013      	str	r3, [r2, #0]
 800a3e8:	f04f 0a00 	mov.w	sl, #0
 800a3ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f43f ae0f 	beq.w	800a012 <_strtod_l+0x72>
 800a3f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3f6:	9805      	ldr	r0, [sp, #20]
 800a3f8:	f7ff f942 	bl	8009680 <_Bfree>
 800a3fc:	9805      	ldr	r0, [sp, #20]
 800a3fe:	4649      	mov	r1, r9
 800a400:	f7ff f93e 	bl	8009680 <_Bfree>
 800a404:	9805      	ldr	r0, [sp, #20]
 800a406:	4641      	mov	r1, r8
 800a408:	f7ff f93a 	bl	8009680 <_Bfree>
 800a40c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a40e:	9805      	ldr	r0, [sp, #20]
 800a410:	f7ff f936 	bl	8009680 <_Bfree>
 800a414:	9805      	ldr	r0, [sp, #20]
 800a416:	4621      	mov	r1, r4
 800a418:	f7ff f932 	bl	8009680 <_Bfree>
 800a41c:	e5f9      	b.n	800a012 <_strtod_l+0x72>
 800a41e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a420:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a424:	4293      	cmp	r3, r2
 800a426:	dbbc      	blt.n	800a3a2 <_strtod_l+0x402>
 800a428:	4c41      	ldr	r4, [pc, #260]	@ (800a530 <_strtod_l+0x590>)
 800a42a:	f1c5 050f 	rsb	r5, r5, #15
 800a42e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a432:	4652      	mov	r2, sl
 800a434:	465b      	mov	r3, fp
 800a436:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a43a:	f7f6 f8fd 	bl	8000638 <__aeabi_dmul>
 800a43e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a440:	1b5d      	subs	r5, r3, r5
 800a442:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a446:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a44a:	e78f      	b.n	800a36c <_strtod_l+0x3cc>
 800a44c:	3316      	adds	r3, #22
 800a44e:	dba8      	blt.n	800a3a2 <_strtod_l+0x402>
 800a450:	4b37      	ldr	r3, [pc, #220]	@ (800a530 <_strtod_l+0x590>)
 800a452:	eba9 0808 	sub.w	r8, r9, r8
 800a456:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a45a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a45e:	4650      	mov	r0, sl
 800a460:	4659      	mov	r1, fp
 800a462:	f7f6 fa13 	bl	800088c <__aeabi_ddiv>
 800a466:	e783      	b.n	800a370 <_strtod_l+0x3d0>
 800a468:	4b32      	ldr	r3, [pc, #200]	@ (800a534 <_strtod_l+0x594>)
 800a46a:	9308      	str	r3, [sp, #32]
 800a46c:	2300      	movs	r3, #0
 800a46e:	1124      	asrs	r4, r4, #4
 800a470:	4650      	mov	r0, sl
 800a472:	4659      	mov	r1, fp
 800a474:	461e      	mov	r6, r3
 800a476:	2c01      	cmp	r4, #1
 800a478:	dc21      	bgt.n	800a4be <_strtod_l+0x51e>
 800a47a:	b10b      	cbz	r3, 800a480 <_strtod_l+0x4e0>
 800a47c:	4682      	mov	sl, r0
 800a47e:	468b      	mov	fp, r1
 800a480:	492c      	ldr	r1, [pc, #176]	@ (800a534 <_strtod_l+0x594>)
 800a482:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a486:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a48a:	4652      	mov	r2, sl
 800a48c:	465b      	mov	r3, fp
 800a48e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a492:	f7f6 f8d1 	bl	8000638 <__aeabi_dmul>
 800a496:	4b28      	ldr	r3, [pc, #160]	@ (800a538 <_strtod_l+0x598>)
 800a498:	460a      	mov	r2, r1
 800a49a:	400b      	ands	r3, r1
 800a49c:	4927      	ldr	r1, [pc, #156]	@ (800a53c <_strtod_l+0x59c>)
 800a49e:	428b      	cmp	r3, r1
 800a4a0:	4682      	mov	sl, r0
 800a4a2:	d898      	bhi.n	800a3d6 <_strtod_l+0x436>
 800a4a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a4a8:	428b      	cmp	r3, r1
 800a4aa:	bf86      	itte	hi
 800a4ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a540 <_strtod_l+0x5a0>
 800a4b0:	f04f 3aff 	movhi.w	sl, #4294967295
 800a4b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	9308      	str	r3, [sp, #32]
 800a4bc:	e07a      	b.n	800a5b4 <_strtod_l+0x614>
 800a4be:	07e2      	lsls	r2, r4, #31
 800a4c0:	d505      	bpl.n	800a4ce <_strtod_l+0x52e>
 800a4c2:	9b08      	ldr	r3, [sp, #32]
 800a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c8:	f7f6 f8b6 	bl	8000638 <__aeabi_dmul>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	9a08      	ldr	r2, [sp, #32]
 800a4d0:	3208      	adds	r2, #8
 800a4d2:	3601      	adds	r6, #1
 800a4d4:	1064      	asrs	r4, r4, #1
 800a4d6:	9208      	str	r2, [sp, #32]
 800a4d8:	e7cd      	b.n	800a476 <_strtod_l+0x4d6>
 800a4da:	d0ed      	beq.n	800a4b8 <_strtod_l+0x518>
 800a4dc:	4264      	negs	r4, r4
 800a4de:	f014 020f 	ands.w	r2, r4, #15
 800a4e2:	d00a      	beq.n	800a4fa <_strtod_l+0x55a>
 800a4e4:	4b12      	ldr	r3, [pc, #72]	@ (800a530 <_strtod_l+0x590>)
 800a4e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4ea:	4650      	mov	r0, sl
 800a4ec:	4659      	mov	r1, fp
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	f7f6 f9cb 	bl	800088c <__aeabi_ddiv>
 800a4f6:	4682      	mov	sl, r0
 800a4f8:	468b      	mov	fp, r1
 800a4fa:	1124      	asrs	r4, r4, #4
 800a4fc:	d0dc      	beq.n	800a4b8 <_strtod_l+0x518>
 800a4fe:	2c1f      	cmp	r4, #31
 800a500:	dd20      	ble.n	800a544 <_strtod_l+0x5a4>
 800a502:	2400      	movs	r4, #0
 800a504:	46a0      	mov	r8, r4
 800a506:	940a      	str	r4, [sp, #40]	@ 0x28
 800a508:	46a1      	mov	r9, r4
 800a50a:	9a05      	ldr	r2, [sp, #20]
 800a50c:	2322      	movs	r3, #34	@ 0x22
 800a50e:	f04f 0a00 	mov.w	sl, #0
 800a512:	f04f 0b00 	mov.w	fp, #0
 800a516:	6013      	str	r3, [r2, #0]
 800a518:	e768      	b.n	800a3ec <_strtod_l+0x44c>
 800a51a:	bf00      	nop
 800a51c:	0800cca1 	.word	0x0800cca1
 800a520:	0800ceb4 	.word	0x0800ceb4
 800a524:	0800cc99 	.word	0x0800cc99
 800a528:	0800ccd0 	.word	0x0800ccd0
 800a52c:	0800d05d 	.word	0x0800d05d
 800a530:	0800cde8 	.word	0x0800cde8
 800a534:	0800cdc0 	.word	0x0800cdc0
 800a538:	7ff00000 	.word	0x7ff00000
 800a53c:	7ca00000 	.word	0x7ca00000
 800a540:	7fefffff 	.word	0x7fefffff
 800a544:	f014 0310 	ands.w	r3, r4, #16
 800a548:	bf18      	it	ne
 800a54a:	236a      	movne	r3, #106	@ 0x6a
 800a54c:	4ea9      	ldr	r6, [pc, #676]	@ (800a7f4 <_strtod_l+0x854>)
 800a54e:	9308      	str	r3, [sp, #32]
 800a550:	4650      	mov	r0, sl
 800a552:	4659      	mov	r1, fp
 800a554:	2300      	movs	r3, #0
 800a556:	07e2      	lsls	r2, r4, #31
 800a558:	d504      	bpl.n	800a564 <_strtod_l+0x5c4>
 800a55a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a55e:	f7f6 f86b 	bl	8000638 <__aeabi_dmul>
 800a562:	2301      	movs	r3, #1
 800a564:	1064      	asrs	r4, r4, #1
 800a566:	f106 0608 	add.w	r6, r6, #8
 800a56a:	d1f4      	bne.n	800a556 <_strtod_l+0x5b6>
 800a56c:	b10b      	cbz	r3, 800a572 <_strtod_l+0x5d2>
 800a56e:	4682      	mov	sl, r0
 800a570:	468b      	mov	fp, r1
 800a572:	9b08      	ldr	r3, [sp, #32]
 800a574:	b1b3      	cbz	r3, 800a5a4 <_strtod_l+0x604>
 800a576:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a57a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a57e:	2b00      	cmp	r3, #0
 800a580:	4659      	mov	r1, fp
 800a582:	dd0f      	ble.n	800a5a4 <_strtod_l+0x604>
 800a584:	2b1f      	cmp	r3, #31
 800a586:	dd55      	ble.n	800a634 <_strtod_l+0x694>
 800a588:	2b34      	cmp	r3, #52	@ 0x34
 800a58a:	bfde      	ittt	le
 800a58c:	f04f 33ff 	movle.w	r3, #4294967295
 800a590:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a594:	4093      	lslle	r3, r2
 800a596:	f04f 0a00 	mov.w	sl, #0
 800a59a:	bfcc      	ite	gt
 800a59c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a5a0:	ea03 0b01 	andle.w	fp, r3, r1
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	4650      	mov	r0, sl
 800a5aa:	4659      	mov	r1, fp
 800a5ac:	f7f6 faac 	bl	8000b08 <__aeabi_dcmpeq>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d1a6      	bne.n	800a502 <_strtod_l+0x562>
 800a5b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a5ba:	9805      	ldr	r0, [sp, #20]
 800a5bc:	462b      	mov	r3, r5
 800a5be:	463a      	mov	r2, r7
 800a5c0:	f7ff f8c6 	bl	8009750 <__s2b>
 800a5c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	f43f af05 	beq.w	800a3d6 <_strtod_l+0x436>
 800a5cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5ce:	2a00      	cmp	r2, #0
 800a5d0:	eba9 0308 	sub.w	r3, r9, r8
 800a5d4:	bfa8      	it	ge
 800a5d6:	2300      	movge	r3, #0
 800a5d8:	9312      	str	r3, [sp, #72]	@ 0x48
 800a5da:	2400      	movs	r4, #0
 800a5dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a5e0:	9316      	str	r3, [sp, #88]	@ 0x58
 800a5e2:	46a0      	mov	r8, r4
 800a5e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5e6:	9805      	ldr	r0, [sp, #20]
 800a5e8:	6859      	ldr	r1, [r3, #4]
 800a5ea:	f7ff f809 	bl	8009600 <_Balloc>
 800a5ee:	4681      	mov	r9, r0
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	f43f aef4 	beq.w	800a3de <_strtod_l+0x43e>
 800a5f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5f8:	691a      	ldr	r2, [r3, #16]
 800a5fa:	3202      	adds	r2, #2
 800a5fc:	f103 010c 	add.w	r1, r3, #12
 800a600:	0092      	lsls	r2, r2, #2
 800a602:	300c      	adds	r0, #12
 800a604:	f7fe f899 	bl	800873a <memcpy>
 800a608:	ec4b ab10 	vmov	d0, sl, fp
 800a60c:	9805      	ldr	r0, [sp, #20]
 800a60e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a610:	a91b      	add	r1, sp, #108	@ 0x6c
 800a612:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a616:	f7ff fbd7 	bl	8009dc8 <__d2b>
 800a61a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a61c:	2800      	cmp	r0, #0
 800a61e:	f43f aede 	beq.w	800a3de <_strtod_l+0x43e>
 800a622:	9805      	ldr	r0, [sp, #20]
 800a624:	2101      	movs	r1, #1
 800a626:	f7ff f929 	bl	800987c <__i2b>
 800a62a:	4680      	mov	r8, r0
 800a62c:	b948      	cbnz	r0, 800a642 <_strtod_l+0x6a2>
 800a62e:	f04f 0800 	mov.w	r8, #0
 800a632:	e6d4      	b.n	800a3de <_strtod_l+0x43e>
 800a634:	f04f 32ff 	mov.w	r2, #4294967295
 800a638:	fa02 f303 	lsl.w	r3, r2, r3
 800a63c:	ea03 0a0a 	and.w	sl, r3, sl
 800a640:	e7b0      	b.n	800a5a4 <_strtod_l+0x604>
 800a642:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a644:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a646:	2d00      	cmp	r5, #0
 800a648:	bfab      	itete	ge
 800a64a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a64c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a64e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a650:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a652:	bfac      	ite	ge
 800a654:	18ef      	addge	r7, r5, r3
 800a656:	1b5e      	sublt	r6, r3, r5
 800a658:	9b08      	ldr	r3, [sp, #32]
 800a65a:	1aed      	subs	r5, r5, r3
 800a65c:	4415      	add	r5, r2
 800a65e:	4b66      	ldr	r3, [pc, #408]	@ (800a7f8 <_strtod_l+0x858>)
 800a660:	3d01      	subs	r5, #1
 800a662:	429d      	cmp	r5, r3
 800a664:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a668:	da50      	bge.n	800a70c <_strtod_l+0x76c>
 800a66a:	1b5b      	subs	r3, r3, r5
 800a66c:	2b1f      	cmp	r3, #31
 800a66e:	eba2 0203 	sub.w	r2, r2, r3
 800a672:	f04f 0101 	mov.w	r1, #1
 800a676:	dc3d      	bgt.n	800a6f4 <_strtod_l+0x754>
 800a678:	fa01 f303 	lsl.w	r3, r1, r3
 800a67c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a67e:	2300      	movs	r3, #0
 800a680:	9310      	str	r3, [sp, #64]	@ 0x40
 800a682:	18bd      	adds	r5, r7, r2
 800a684:	9b08      	ldr	r3, [sp, #32]
 800a686:	42af      	cmp	r7, r5
 800a688:	4416      	add	r6, r2
 800a68a:	441e      	add	r6, r3
 800a68c:	463b      	mov	r3, r7
 800a68e:	bfa8      	it	ge
 800a690:	462b      	movge	r3, r5
 800a692:	42b3      	cmp	r3, r6
 800a694:	bfa8      	it	ge
 800a696:	4633      	movge	r3, r6
 800a698:	2b00      	cmp	r3, #0
 800a69a:	bfc2      	ittt	gt
 800a69c:	1aed      	subgt	r5, r5, r3
 800a69e:	1af6      	subgt	r6, r6, r3
 800a6a0:	1aff      	subgt	r7, r7, r3
 800a6a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	dd16      	ble.n	800a6d6 <_strtod_l+0x736>
 800a6a8:	4641      	mov	r1, r8
 800a6aa:	9805      	ldr	r0, [sp, #20]
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	f7ff f9a5 	bl	80099fc <__pow5mult>
 800a6b2:	4680      	mov	r8, r0
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d0ba      	beq.n	800a62e <_strtod_l+0x68e>
 800a6b8:	4601      	mov	r1, r0
 800a6ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a6bc:	9805      	ldr	r0, [sp, #20]
 800a6be:	f7ff f8f3 	bl	80098a8 <__multiply>
 800a6c2:	900e      	str	r0, [sp, #56]	@ 0x38
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	f43f ae8a 	beq.w	800a3de <_strtod_l+0x43e>
 800a6ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6cc:	9805      	ldr	r0, [sp, #20]
 800a6ce:	f7fe ffd7 	bl	8009680 <_Bfree>
 800a6d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6d6:	2d00      	cmp	r5, #0
 800a6d8:	dc1d      	bgt.n	800a716 <_strtod_l+0x776>
 800a6da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	dd23      	ble.n	800a728 <_strtod_l+0x788>
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a6e4:	9805      	ldr	r0, [sp, #20]
 800a6e6:	f7ff f989 	bl	80099fc <__pow5mult>
 800a6ea:	4681      	mov	r9, r0
 800a6ec:	b9e0      	cbnz	r0, 800a728 <_strtod_l+0x788>
 800a6ee:	f04f 0900 	mov.w	r9, #0
 800a6f2:	e674      	b.n	800a3de <_strtod_l+0x43e>
 800a6f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a6f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a6fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a700:	35e2      	adds	r5, #226	@ 0xe2
 800a702:	fa01 f305 	lsl.w	r3, r1, r5
 800a706:	9310      	str	r3, [sp, #64]	@ 0x40
 800a708:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a70a:	e7ba      	b.n	800a682 <_strtod_l+0x6e2>
 800a70c:	2300      	movs	r3, #0
 800a70e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a710:	2301      	movs	r3, #1
 800a712:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a714:	e7b5      	b.n	800a682 <_strtod_l+0x6e2>
 800a716:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a718:	9805      	ldr	r0, [sp, #20]
 800a71a:	462a      	mov	r2, r5
 800a71c:	f7ff f9c8 	bl	8009ab0 <__lshift>
 800a720:	901a      	str	r0, [sp, #104]	@ 0x68
 800a722:	2800      	cmp	r0, #0
 800a724:	d1d9      	bne.n	800a6da <_strtod_l+0x73a>
 800a726:	e65a      	b.n	800a3de <_strtod_l+0x43e>
 800a728:	2e00      	cmp	r6, #0
 800a72a:	dd07      	ble.n	800a73c <_strtod_l+0x79c>
 800a72c:	4649      	mov	r1, r9
 800a72e:	9805      	ldr	r0, [sp, #20]
 800a730:	4632      	mov	r2, r6
 800a732:	f7ff f9bd 	bl	8009ab0 <__lshift>
 800a736:	4681      	mov	r9, r0
 800a738:	2800      	cmp	r0, #0
 800a73a:	d0d8      	beq.n	800a6ee <_strtod_l+0x74e>
 800a73c:	2f00      	cmp	r7, #0
 800a73e:	dd08      	ble.n	800a752 <_strtod_l+0x7b2>
 800a740:	4641      	mov	r1, r8
 800a742:	9805      	ldr	r0, [sp, #20]
 800a744:	463a      	mov	r2, r7
 800a746:	f7ff f9b3 	bl	8009ab0 <__lshift>
 800a74a:	4680      	mov	r8, r0
 800a74c:	2800      	cmp	r0, #0
 800a74e:	f43f ae46 	beq.w	800a3de <_strtod_l+0x43e>
 800a752:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a754:	9805      	ldr	r0, [sp, #20]
 800a756:	464a      	mov	r2, r9
 800a758:	f7ff fa32 	bl	8009bc0 <__mdiff>
 800a75c:	4604      	mov	r4, r0
 800a75e:	2800      	cmp	r0, #0
 800a760:	f43f ae3d 	beq.w	800a3de <_strtod_l+0x43e>
 800a764:	68c3      	ldr	r3, [r0, #12]
 800a766:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a768:	2300      	movs	r3, #0
 800a76a:	60c3      	str	r3, [r0, #12]
 800a76c:	4641      	mov	r1, r8
 800a76e:	f7ff fa0b 	bl	8009b88 <__mcmp>
 800a772:	2800      	cmp	r0, #0
 800a774:	da46      	bge.n	800a804 <_strtod_l+0x864>
 800a776:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a778:	ea53 030a 	orrs.w	r3, r3, sl
 800a77c:	d16c      	bne.n	800a858 <_strtod_l+0x8b8>
 800a77e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a782:	2b00      	cmp	r3, #0
 800a784:	d168      	bne.n	800a858 <_strtod_l+0x8b8>
 800a786:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a78a:	0d1b      	lsrs	r3, r3, #20
 800a78c:	051b      	lsls	r3, r3, #20
 800a78e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a792:	d961      	bls.n	800a858 <_strtod_l+0x8b8>
 800a794:	6963      	ldr	r3, [r4, #20]
 800a796:	b913      	cbnz	r3, 800a79e <_strtod_l+0x7fe>
 800a798:	6923      	ldr	r3, [r4, #16]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	dd5c      	ble.n	800a858 <_strtod_l+0x8b8>
 800a79e:	4621      	mov	r1, r4
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	9805      	ldr	r0, [sp, #20]
 800a7a4:	f7ff f984 	bl	8009ab0 <__lshift>
 800a7a8:	4641      	mov	r1, r8
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	f7ff f9ec 	bl	8009b88 <__mcmp>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	dd51      	ble.n	800a858 <_strtod_l+0x8b8>
 800a7b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a7b8:	9a08      	ldr	r2, [sp, #32]
 800a7ba:	0d1b      	lsrs	r3, r3, #20
 800a7bc:	051b      	lsls	r3, r3, #20
 800a7be:	2a00      	cmp	r2, #0
 800a7c0:	d06b      	beq.n	800a89a <_strtod_l+0x8fa>
 800a7c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a7c6:	d868      	bhi.n	800a89a <_strtod_l+0x8fa>
 800a7c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a7cc:	f67f ae9d 	bls.w	800a50a <_strtod_l+0x56a>
 800a7d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a7fc <_strtod_l+0x85c>)
 800a7d2:	4650      	mov	r0, sl
 800a7d4:	4659      	mov	r1, fp
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f7f5 ff2e 	bl	8000638 <__aeabi_dmul>
 800a7dc:	4b08      	ldr	r3, [pc, #32]	@ (800a800 <_strtod_l+0x860>)
 800a7de:	400b      	ands	r3, r1
 800a7e0:	4682      	mov	sl, r0
 800a7e2:	468b      	mov	fp, r1
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f47f ae05 	bne.w	800a3f4 <_strtod_l+0x454>
 800a7ea:	9a05      	ldr	r2, [sp, #20]
 800a7ec:	2322      	movs	r3, #34	@ 0x22
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	e600      	b.n	800a3f4 <_strtod_l+0x454>
 800a7f2:	bf00      	nop
 800a7f4:	0800cee0 	.word	0x0800cee0
 800a7f8:	fffffc02 	.word	0xfffffc02
 800a7fc:	39500000 	.word	0x39500000
 800a800:	7ff00000 	.word	0x7ff00000
 800a804:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a808:	d165      	bne.n	800a8d6 <_strtod_l+0x936>
 800a80a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a80c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a810:	b35a      	cbz	r2, 800a86a <_strtod_l+0x8ca>
 800a812:	4a9f      	ldr	r2, [pc, #636]	@ (800aa90 <_strtod_l+0xaf0>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d12b      	bne.n	800a870 <_strtod_l+0x8d0>
 800a818:	9b08      	ldr	r3, [sp, #32]
 800a81a:	4651      	mov	r1, sl
 800a81c:	b303      	cbz	r3, 800a860 <_strtod_l+0x8c0>
 800a81e:	4b9d      	ldr	r3, [pc, #628]	@ (800aa94 <_strtod_l+0xaf4>)
 800a820:	465a      	mov	r2, fp
 800a822:	4013      	ands	r3, r2
 800a824:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a828:	f04f 32ff 	mov.w	r2, #4294967295
 800a82c:	d81b      	bhi.n	800a866 <_strtod_l+0x8c6>
 800a82e:	0d1b      	lsrs	r3, r3, #20
 800a830:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a834:	fa02 f303 	lsl.w	r3, r2, r3
 800a838:	4299      	cmp	r1, r3
 800a83a:	d119      	bne.n	800a870 <_strtod_l+0x8d0>
 800a83c:	4b96      	ldr	r3, [pc, #600]	@ (800aa98 <_strtod_l+0xaf8>)
 800a83e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a840:	429a      	cmp	r2, r3
 800a842:	d102      	bne.n	800a84a <_strtod_l+0x8aa>
 800a844:	3101      	adds	r1, #1
 800a846:	f43f adca 	beq.w	800a3de <_strtod_l+0x43e>
 800a84a:	4b92      	ldr	r3, [pc, #584]	@ (800aa94 <_strtod_l+0xaf4>)
 800a84c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a84e:	401a      	ands	r2, r3
 800a850:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a854:	f04f 0a00 	mov.w	sl, #0
 800a858:	9b08      	ldr	r3, [sp, #32]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1b8      	bne.n	800a7d0 <_strtod_l+0x830>
 800a85e:	e5c9      	b.n	800a3f4 <_strtod_l+0x454>
 800a860:	f04f 33ff 	mov.w	r3, #4294967295
 800a864:	e7e8      	b.n	800a838 <_strtod_l+0x898>
 800a866:	4613      	mov	r3, r2
 800a868:	e7e6      	b.n	800a838 <_strtod_l+0x898>
 800a86a:	ea53 030a 	orrs.w	r3, r3, sl
 800a86e:	d0a1      	beq.n	800a7b4 <_strtod_l+0x814>
 800a870:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a872:	b1db      	cbz	r3, 800a8ac <_strtod_l+0x90c>
 800a874:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a876:	4213      	tst	r3, r2
 800a878:	d0ee      	beq.n	800a858 <_strtod_l+0x8b8>
 800a87a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a87c:	9a08      	ldr	r2, [sp, #32]
 800a87e:	4650      	mov	r0, sl
 800a880:	4659      	mov	r1, fp
 800a882:	b1bb      	cbz	r3, 800a8b4 <_strtod_l+0x914>
 800a884:	f7ff fb6e 	bl	8009f64 <sulp>
 800a888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a88c:	ec53 2b10 	vmov	r2, r3, d0
 800a890:	f7f5 fd1c 	bl	80002cc <__adddf3>
 800a894:	4682      	mov	sl, r0
 800a896:	468b      	mov	fp, r1
 800a898:	e7de      	b.n	800a858 <_strtod_l+0x8b8>
 800a89a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a89e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a8a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a8a6:	f04f 3aff 	mov.w	sl, #4294967295
 800a8aa:	e7d5      	b.n	800a858 <_strtod_l+0x8b8>
 800a8ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a8ae:	ea13 0f0a 	tst.w	r3, sl
 800a8b2:	e7e1      	b.n	800a878 <_strtod_l+0x8d8>
 800a8b4:	f7ff fb56 	bl	8009f64 <sulp>
 800a8b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8bc:	ec53 2b10 	vmov	r2, r3, d0
 800a8c0:	f7f5 fd02 	bl	80002c8 <__aeabi_dsub>
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	4682      	mov	sl, r0
 800a8ca:	468b      	mov	fp, r1
 800a8cc:	f7f6 f91c 	bl	8000b08 <__aeabi_dcmpeq>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d0c1      	beq.n	800a858 <_strtod_l+0x8b8>
 800a8d4:	e619      	b.n	800a50a <_strtod_l+0x56a>
 800a8d6:	4641      	mov	r1, r8
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f7ff facd 	bl	8009e78 <__ratio>
 800a8de:	ec57 6b10 	vmov	r6, r7, d0
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	f7f6 f920 	bl	8000b30 <__aeabi_dcmple>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d06f      	beq.n	800a9d4 <_strtod_l+0xa34>
 800a8f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d17a      	bne.n	800a9f0 <_strtod_l+0xa50>
 800a8fa:	f1ba 0f00 	cmp.w	sl, #0
 800a8fe:	d158      	bne.n	800a9b2 <_strtod_l+0xa12>
 800a900:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a902:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a906:	2b00      	cmp	r3, #0
 800a908:	d15a      	bne.n	800a9c0 <_strtod_l+0xa20>
 800a90a:	4b64      	ldr	r3, [pc, #400]	@ (800aa9c <_strtod_l+0xafc>)
 800a90c:	2200      	movs	r2, #0
 800a90e:	4630      	mov	r0, r6
 800a910:	4639      	mov	r1, r7
 800a912:	f7f6 f903 	bl	8000b1c <__aeabi_dcmplt>
 800a916:	2800      	cmp	r0, #0
 800a918:	d159      	bne.n	800a9ce <_strtod_l+0xa2e>
 800a91a:	4630      	mov	r0, r6
 800a91c:	4639      	mov	r1, r7
 800a91e:	4b60      	ldr	r3, [pc, #384]	@ (800aaa0 <_strtod_l+0xb00>)
 800a920:	2200      	movs	r2, #0
 800a922:	f7f5 fe89 	bl	8000638 <__aeabi_dmul>
 800a926:	4606      	mov	r6, r0
 800a928:	460f      	mov	r7, r1
 800a92a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a92e:	9606      	str	r6, [sp, #24]
 800a930:	9307      	str	r3, [sp, #28]
 800a932:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a936:	4d57      	ldr	r5, [pc, #348]	@ (800aa94 <_strtod_l+0xaf4>)
 800a938:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a93c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a93e:	401d      	ands	r5, r3
 800a940:	4b58      	ldr	r3, [pc, #352]	@ (800aaa4 <_strtod_l+0xb04>)
 800a942:	429d      	cmp	r5, r3
 800a944:	f040 80b2 	bne.w	800aaac <_strtod_l+0xb0c>
 800a948:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a94a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a94e:	ec4b ab10 	vmov	d0, sl, fp
 800a952:	f7ff f9c9 	bl	8009ce8 <__ulp>
 800a956:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a95a:	ec51 0b10 	vmov	r0, r1, d0
 800a95e:	f7f5 fe6b 	bl	8000638 <__aeabi_dmul>
 800a962:	4652      	mov	r2, sl
 800a964:	465b      	mov	r3, fp
 800a966:	f7f5 fcb1 	bl	80002cc <__adddf3>
 800a96a:	460b      	mov	r3, r1
 800a96c:	4949      	ldr	r1, [pc, #292]	@ (800aa94 <_strtod_l+0xaf4>)
 800a96e:	4a4e      	ldr	r2, [pc, #312]	@ (800aaa8 <_strtod_l+0xb08>)
 800a970:	4019      	ands	r1, r3
 800a972:	4291      	cmp	r1, r2
 800a974:	4682      	mov	sl, r0
 800a976:	d942      	bls.n	800a9fe <_strtod_l+0xa5e>
 800a978:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a97a:	4b47      	ldr	r3, [pc, #284]	@ (800aa98 <_strtod_l+0xaf8>)
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d103      	bne.n	800a988 <_strtod_l+0x9e8>
 800a980:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a982:	3301      	adds	r3, #1
 800a984:	f43f ad2b 	beq.w	800a3de <_strtod_l+0x43e>
 800a988:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800aa98 <_strtod_l+0xaf8>
 800a98c:	f04f 3aff 	mov.w	sl, #4294967295
 800a990:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a992:	9805      	ldr	r0, [sp, #20]
 800a994:	f7fe fe74 	bl	8009680 <_Bfree>
 800a998:	9805      	ldr	r0, [sp, #20]
 800a99a:	4649      	mov	r1, r9
 800a99c:	f7fe fe70 	bl	8009680 <_Bfree>
 800a9a0:	9805      	ldr	r0, [sp, #20]
 800a9a2:	4641      	mov	r1, r8
 800a9a4:	f7fe fe6c 	bl	8009680 <_Bfree>
 800a9a8:	9805      	ldr	r0, [sp, #20]
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	f7fe fe68 	bl	8009680 <_Bfree>
 800a9b0:	e618      	b.n	800a5e4 <_strtod_l+0x644>
 800a9b2:	f1ba 0f01 	cmp.w	sl, #1
 800a9b6:	d103      	bne.n	800a9c0 <_strtod_l+0xa20>
 800a9b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f43f ada5 	beq.w	800a50a <_strtod_l+0x56a>
 800a9c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800aa70 <_strtod_l+0xad0>
 800a9c4:	4f35      	ldr	r7, [pc, #212]	@ (800aa9c <_strtod_l+0xafc>)
 800a9c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9ca:	2600      	movs	r6, #0
 800a9cc:	e7b1      	b.n	800a932 <_strtod_l+0x992>
 800a9ce:	4f34      	ldr	r7, [pc, #208]	@ (800aaa0 <_strtod_l+0xb00>)
 800a9d0:	2600      	movs	r6, #0
 800a9d2:	e7aa      	b.n	800a92a <_strtod_l+0x98a>
 800a9d4:	4b32      	ldr	r3, [pc, #200]	@ (800aaa0 <_strtod_l+0xb00>)
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	4639      	mov	r1, r7
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f7f5 fe2c 	bl	8000638 <__aeabi_dmul>
 800a9e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9e2:	4606      	mov	r6, r0
 800a9e4:	460f      	mov	r7, r1
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d09f      	beq.n	800a92a <_strtod_l+0x98a>
 800a9ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a9ee:	e7a0      	b.n	800a932 <_strtod_l+0x992>
 800a9f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800aa78 <_strtod_l+0xad8>
 800a9f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9f8:	ec57 6b17 	vmov	r6, r7, d7
 800a9fc:	e799      	b.n	800a932 <_strtod_l+0x992>
 800a9fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800aa02:	9b08      	ldr	r3, [sp, #32]
 800aa04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1c1      	bne.n	800a990 <_strtod_l+0x9f0>
 800aa0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa10:	0d1b      	lsrs	r3, r3, #20
 800aa12:	051b      	lsls	r3, r3, #20
 800aa14:	429d      	cmp	r5, r3
 800aa16:	d1bb      	bne.n	800a990 <_strtod_l+0x9f0>
 800aa18:	4630      	mov	r0, r6
 800aa1a:	4639      	mov	r1, r7
 800aa1c:	f7f6 f96c 	bl	8000cf8 <__aeabi_d2lz>
 800aa20:	f7f5 fddc 	bl	80005dc <__aeabi_l2d>
 800aa24:	4602      	mov	r2, r0
 800aa26:	460b      	mov	r3, r1
 800aa28:	4630      	mov	r0, r6
 800aa2a:	4639      	mov	r1, r7
 800aa2c:	f7f5 fc4c 	bl	80002c8 <__aeabi_dsub>
 800aa30:	460b      	mov	r3, r1
 800aa32:	4602      	mov	r2, r0
 800aa34:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800aa38:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800aa3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa3e:	ea46 060a 	orr.w	r6, r6, sl
 800aa42:	431e      	orrs	r6, r3
 800aa44:	d06f      	beq.n	800ab26 <_strtod_l+0xb86>
 800aa46:	a30e      	add	r3, pc, #56	@ (adr r3, 800aa80 <_strtod_l+0xae0>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f7f6 f866 	bl	8000b1c <__aeabi_dcmplt>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	f47f accf 	bne.w	800a3f4 <_strtod_l+0x454>
 800aa56:	a30c      	add	r3, pc, #48	@ (adr r3, 800aa88 <_strtod_l+0xae8>)
 800aa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa60:	f7f6 f87a 	bl	8000b58 <__aeabi_dcmpgt>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d093      	beq.n	800a990 <_strtod_l+0x9f0>
 800aa68:	e4c4      	b.n	800a3f4 <_strtod_l+0x454>
 800aa6a:	bf00      	nop
 800aa6c:	f3af 8000 	nop.w
 800aa70:	00000000 	.word	0x00000000
 800aa74:	bff00000 	.word	0xbff00000
 800aa78:	00000000 	.word	0x00000000
 800aa7c:	3ff00000 	.word	0x3ff00000
 800aa80:	94a03595 	.word	0x94a03595
 800aa84:	3fdfffff 	.word	0x3fdfffff
 800aa88:	35afe535 	.word	0x35afe535
 800aa8c:	3fe00000 	.word	0x3fe00000
 800aa90:	000fffff 	.word	0x000fffff
 800aa94:	7ff00000 	.word	0x7ff00000
 800aa98:	7fefffff 	.word	0x7fefffff
 800aa9c:	3ff00000 	.word	0x3ff00000
 800aaa0:	3fe00000 	.word	0x3fe00000
 800aaa4:	7fe00000 	.word	0x7fe00000
 800aaa8:	7c9fffff 	.word	0x7c9fffff
 800aaac:	9b08      	ldr	r3, [sp, #32]
 800aaae:	b323      	cbz	r3, 800aafa <_strtod_l+0xb5a>
 800aab0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aab4:	d821      	bhi.n	800aafa <_strtod_l+0xb5a>
 800aab6:	a328      	add	r3, pc, #160	@ (adr r3, 800ab58 <_strtod_l+0xbb8>)
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	4630      	mov	r0, r6
 800aabe:	4639      	mov	r1, r7
 800aac0:	f7f6 f836 	bl	8000b30 <__aeabi_dcmple>
 800aac4:	b1a0      	cbz	r0, 800aaf0 <_strtod_l+0xb50>
 800aac6:	4639      	mov	r1, r7
 800aac8:	4630      	mov	r0, r6
 800aaca:	f7f6 f88d 	bl	8000be8 <__aeabi_d2uiz>
 800aace:	2801      	cmp	r0, #1
 800aad0:	bf38      	it	cc
 800aad2:	2001      	movcc	r0, #1
 800aad4:	f7f5 fd36 	bl	8000544 <__aeabi_ui2d>
 800aad8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aada:	4606      	mov	r6, r0
 800aadc:	460f      	mov	r7, r1
 800aade:	b9fb      	cbnz	r3, 800ab20 <_strtod_l+0xb80>
 800aae0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aae4:	9014      	str	r0, [sp, #80]	@ 0x50
 800aae6:	9315      	str	r3, [sp, #84]	@ 0x54
 800aae8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800aaec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aaf0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aaf2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800aaf6:	1b5b      	subs	r3, r3, r5
 800aaf8:	9311      	str	r3, [sp, #68]	@ 0x44
 800aafa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aafe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ab02:	f7ff f8f1 	bl	8009ce8 <__ulp>
 800ab06:	4650      	mov	r0, sl
 800ab08:	ec53 2b10 	vmov	r2, r3, d0
 800ab0c:	4659      	mov	r1, fp
 800ab0e:	f7f5 fd93 	bl	8000638 <__aeabi_dmul>
 800ab12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ab16:	f7f5 fbd9 	bl	80002cc <__adddf3>
 800ab1a:	4682      	mov	sl, r0
 800ab1c:	468b      	mov	fp, r1
 800ab1e:	e770      	b.n	800aa02 <_strtod_l+0xa62>
 800ab20:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ab24:	e7e0      	b.n	800aae8 <_strtod_l+0xb48>
 800ab26:	a30e      	add	r3, pc, #56	@ (adr r3, 800ab60 <_strtod_l+0xbc0>)
 800ab28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2c:	f7f5 fff6 	bl	8000b1c <__aeabi_dcmplt>
 800ab30:	e798      	b.n	800aa64 <_strtod_l+0xac4>
 800ab32:	2300      	movs	r3, #0
 800ab34:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab36:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ab38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab3a:	6013      	str	r3, [r2, #0]
 800ab3c:	f7ff ba6d 	b.w	800a01a <_strtod_l+0x7a>
 800ab40:	2a65      	cmp	r2, #101	@ 0x65
 800ab42:	f43f ab66 	beq.w	800a212 <_strtod_l+0x272>
 800ab46:	2a45      	cmp	r2, #69	@ 0x45
 800ab48:	f43f ab63 	beq.w	800a212 <_strtod_l+0x272>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	f7ff bb9e 	b.w	800a28e <_strtod_l+0x2ee>
 800ab52:	bf00      	nop
 800ab54:	f3af 8000 	nop.w
 800ab58:	ffc00000 	.word	0xffc00000
 800ab5c:	41dfffff 	.word	0x41dfffff
 800ab60:	94a03595 	.word	0x94a03595
 800ab64:	3fcfffff 	.word	0x3fcfffff

0800ab68 <_strtod_r>:
 800ab68:	4b01      	ldr	r3, [pc, #4]	@ (800ab70 <_strtod_r+0x8>)
 800ab6a:	f7ff ba19 	b.w	8009fa0 <_strtod_l>
 800ab6e:	bf00      	nop
 800ab70:	2000007c 	.word	0x2000007c

0800ab74 <_strtol_l.constprop.0>:
 800ab74:	2b24      	cmp	r3, #36	@ 0x24
 800ab76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab7a:	4686      	mov	lr, r0
 800ab7c:	4690      	mov	r8, r2
 800ab7e:	d801      	bhi.n	800ab84 <_strtol_l.constprop.0+0x10>
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d106      	bne.n	800ab92 <_strtol_l.constprop.0+0x1e>
 800ab84:	f7fd fdac 	bl	80086e0 <__errno>
 800ab88:	2316      	movs	r3, #22
 800ab8a:	6003      	str	r3, [r0, #0]
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab92:	4834      	ldr	r0, [pc, #208]	@ (800ac64 <_strtol_l.constprop.0+0xf0>)
 800ab94:	460d      	mov	r5, r1
 800ab96:	462a      	mov	r2, r5
 800ab98:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab9c:	5d06      	ldrb	r6, [r0, r4]
 800ab9e:	f016 0608 	ands.w	r6, r6, #8
 800aba2:	d1f8      	bne.n	800ab96 <_strtol_l.constprop.0+0x22>
 800aba4:	2c2d      	cmp	r4, #45	@ 0x2d
 800aba6:	d12d      	bne.n	800ac04 <_strtol_l.constprop.0+0x90>
 800aba8:	782c      	ldrb	r4, [r5, #0]
 800abaa:	2601      	movs	r6, #1
 800abac:	1c95      	adds	r5, r2, #2
 800abae:	f033 0210 	bics.w	r2, r3, #16
 800abb2:	d109      	bne.n	800abc8 <_strtol_l.constprop.0+0x54>
 800abb4:	2c30      	cmp	r4, #48	@ 0x30
 800abb6:	d12a      	bne.n	800ac0e <_strtol_l.constprop.0+0x9a>
 800abb8:	782a      	ldrb	r2, [r5, #0]
 800abba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800abbe:	2a58      	cmp	r2, #88	@ 0x58
 800abc0:	d125      	bne.n	800ac0e <_strtol_l.constprop.0+0x9a>
 800abc2:	786c      	ldrb	r4, [r5, #1]
 800abc4:	2310      	movs	r3, #16
 800abc6:	3502      	adds	r5, #2
 800abc8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800abcc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800abd0:	2200      	movs	r2, #0
 800abd2:	fbbc f9f3 	udiv	r9, ip, r3
 800abd6:	4610      	mov	r0, r2
 800abd8:	fb03 ca19 	mls	sl, r3, r9, ip
 800abdc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800abe0:	2f09      	cmp	r7, #9
 800abe2:	d81b      	bhi.n	800ac1c <_strtol_l.constprop.0+0xa8>
 800abe4:	463c      	mov	r4, r7
 800abe6:	42a3      	cmp	r3, r4
 800abe8:	dd27      	ble.n	800ac3a <_strtol_l.constprop.0+0xc6>
 800abea:	1c57      	adds	r7, r2, #1
 800abec:	d007      	beq.n	800abfe <_strtol_l.constprop.0+0x8a>
 800abee:	4581      	cmp	r9, r0
 800abf0:	d320      	bcc.n	800ac34 <_strtol_l.constprop.0+0xc0>
 800abf2:	d101      	bne.n	800abf8 <_strtol_l.constprop.0+0x84>
 800abf4:	45a2      	cmp	sl, r4
 800abf6:	db1d      	blt.n	800ac34 <_strtol_l.constprop.0+0xc0>
 800abf8:	fb00 4003 	mla	r0, r0, r3, r4
 800abfc:	2201      	movs	r2, #1
 800abfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac02:	e7eb      	b.n	800abdc <_strtol_l.constprop.0+0x68>
 800ac04:	2c2b      	cmp	r4, #43	@ 0x2b
 800ac06:	bf04      	itt	eq
 800ac08:	782c      	ldrbeq	r4, [r5, #0]
 800ac0a:	1c95      	addeq	r5, r2, #2
 800ac0c:	e7cf      	b.n	800abae <_strtol_l.constprop.0+0x3a>
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1da      	bne.n	800abc8 <_strtol_l.constprop.0+0x54>
 800ac12:	2c30      	cmp	r4, #48	@ 0x30
 800ac14:	bf0c      	ite	eq
 800ac16:	2308      	moveq	r3, #8
 800ac18:	230a      	movne	r3, #10
 800ac1a:	e7d5      	b.n	800abc8 <_strtol_l.constprop.0+0x54>
 800ac1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ac20:	2f19      	cmp	r7, #25
 800ac22:	d801      	bhi.n	800ac28 <_strtol_l.constprop.0+0xb4>
 800ac24:	3c37      	subs	r4, #55	@ 0x37
 800ac26:	e7de      	b.n	800abe6 <_strtol_l.constprop.0+0x72>
 800ac28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ac2c:	2f19      	cmp	r7, #25
 800ac2e:	d804      	bhi.n	800ac3a <_strtol_l.constprop.0+0xc6>
 800ac30:	3c57      	subs	r4, #87	@ 0x57
 800ac32:	e7d8      	b.n	800abe6 <_strtol_l.constprop.0+0x72>
 800ac34:	f04f 32ff 	mov.w	r2, #4294967295
 800ac38:	e7e1      	b.n	800abfe <_strtol_l.constprop.0+0x8a>
 800ac3a:	1c53      	adds	r3, r2, #1
 800ac3c:	d108      	bne.n	800ac50 <_strtol_l.constprop.0+0xdc>
 800ac3e:	2322      	movs	r3, #34	@ 0x22
 800ac40:	f8ce 3000 	str.w	r3, [lr]
 800ac44:	4660      	mov	r0, ip
 800ac46:	f1b8 0f00 	cmp.w	r8, #0
 800ac4a:	d0a0      	beq.n	800ab8e <_strtol_l.constprop.0+0x1a>
 800ac4c:	1e69      	subs	r1, r5, #1
 800ac4e:	e006      	b.n	800ac5e <_strtol_l.constprop.0+0xea>
 800ac50:	b106      	cbz	r6, 800ac54 <_strtol_l.constprop.0+0xe0>
 800ac52:	4240      	negs	r0, r0
 800ac54:	f1b8 0f00 	cmp.w	r8, #0
 800ac58:	d099      	beq.n	800ab8e <_strtol_l.constprop.0+0x1a>
 800ac5a:	2a00      	cmp	r2, #0
 800ac5c:	d1f6      	bne.n	800ac4c <_strtol_l.constprop.0+0xd8>
 800ac5e:	f8c8 1000 	str.w	r1, [r8]
 800ac62:	e794      	b.n	800ab8e <_strtol_l.constprop.0+0x1a>
 800ac64:	0800cf09 	.word	0x0800cf09

0800ac68 <_strtol_r>:
 800ac68:	f7ff bf84 	b.w	800ab74 <_strtol_l.constprop.0>

0800ac6c <__ssputs_r>:
 800ac6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac70:	688e      	ldr	r6, [r1, #8]
 800ac72:	461f      	mov	r7, r3
 800ac74:	42be      	cmp	r6, r7
 800ac76:	680b      	ldr	r3, [r1, #0]
 800ac78:	4682      	mov	sl, r0
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	4690      	mov	r8, r2
 800ac7e:	d82d      	bhi.n	800acdc <__ssputs_r+0x70>
 800ac80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ac88:	d026      	beq.n	800acd8 <__ssputs_r+0x6c>
 800ac8a:	6965      	ldr	r5, [r4, #20]
 800ac8c:	6909      	ldr	r1, [r1, #16]
 800ac8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac92:	eba3 0901 	sub.w	r9, r3, r1
 800ac96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac9a:	1c7b      	adds	r3, r7, #1
 800ac9c:	444b      	add	r3, r9
 800ac9e:	106d      	asrs	r5, r5, #1
 800aca0:	429d      	cmp	r5, r3
 800aca2:	bf38      	it	cc
 800aca4:	461d      	movcc	r5, r3
 800aca6:	0553      	lsls	r3, r2, #21
 800aca8:	d527      	bpl.n	800acfa <__ssputs_r+0x8e>
 800acaa:	4629      	mov	r1, r5
 800acac:	f7fe fc1c 	bl	80094e8 <_malloc_r>
 800acb0:	4606      	mov	r6, r0
 800acb2:	b360      	cbz	r0, 800ad0e <__ssputs_r+0xa2>
 800acb4:	6921      	ldr	r1, [r4, #16]
 800acb6:	464a      	mov	r2, r9
 800acb8:	f7fd fd3f 	bl	800873a <memcpy>
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800acc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acc6:	81a3      	strh	r3, [r4, #12]
 800acc8:	6126      	str	r6, [r4, #16]
 800acca:	6165      	str	r5, [r4, #20]
 800accc:	444e      	add	r6, r9
 800acce:	eba5 0509 	sub.w	r5, r5, r9
 800acd2:	6026      	str	r6, [r4, #0]
 800acd4:	60a5      	str	r5, [r4, #8]
 800acd6:	463e      	mov	r6, r7
 800acd8:	42be      	cmp	r6, r7
 800acda:	d900      	bls.n	800acde <__ssputs_r+0x72>
 800acdc:	463e      	mov	r6, r7
 800acde:	6820      	ldr	r0, [r4, #0]
 800ace0:	4632      	mov	r2, r6
 800ace2:	4641      	mov	r1, r8
 800ace4:	f000 f9c6 	bl	800b074 <memmove>
 800ace8:	68a3      	ldr	r3, [r4, #8]
 800acea:	1b9b      	subs	r3, r3, r6
 800acec:	60a3      	str	r3, [r4, #8]
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	4433      	add	r3, r6
 800acf2:	6023      	str	r3, [r4, #0]
 800acf4:	2000      	movs	r0, #0
 800acf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acfa:	462a      	mov	r2, r5
 800acfc:	f000 fd7d 	bl	800b7fa <_realloc_r>
 800ad00:	4606      	mov	r6, r0
 800ad02:	2800      	cmp	r0, #0
 800ad04:	d1e0      	bne.n	800acc8 <__ssputs_r+0x5c>
 800ad06:	6921      	ldr	r1, [r4, #16]
 800ad08:	4650      	mov	r0, sl
 800ad0a:	f7fe fb79 	bl	8009400 <_free_r>
 800ad0e:	230c      	movs	r3, #12
 800ad10:	f8ca 3000 	str.w	r3, [sl]
 800ad14:	89a3      	ldrh	r3, [r4, #12]
 800ad16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad1a:	81a3      	strh	r3, [r4, #12]
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad20:	e7e9      	b.n	800acf6 <__ssputs_r+0x8a>
	...

0800ad24 <_svfiprintf_r>:
 800ad24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad28:	4698      	mov	r8, r3
 800ad2a:	898b      	ldrh	r3, [r1, #12]
 800ad2c:	061b      	lsls	r3, r3, #24
 800ad2e:	b09d      	sub	sp, #116	@ 0x74
 800ad30:	4607      	mov	r7, r0
 800ad32:	460d      	mov	r5, r1
 800ad34:	4614      	mov	r4, r2
 800ad36:	d510      	bpl.n	800ad5a <_svfiprintf_r+0x36>
 800ad38:	690b      	ldr	r3, [r1, #16]
 800ad3a:	b973      	cbnz	r3, 800ad5a <_svfiprintf_r+0x36>
 800ad3c:	2140      	movs	r1, #64	@ 0x40
 800ad3e:	f7fe fbd3 	bl	80094e8 <_malloc_r>
 800ad42:	6028      	str	r0, [r5, #0]
 800ad44:	6128      	str	r0, [r5, #16]
 800ad46:	b930      	cbnz	r0, 800ad56 <_svfiprintf_r+0x32>
 800ad48:	230c      	movs	r3, #12
 800ad4a:	603b      	str	r3, [r7, #0]
 800ad4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad50:	b01d      	add	sp, #116	@ 0x74
 800ad52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad56:	2340      	movs	r3, #64	@ 0x40
 800ad58:	616b      	str	r3, [r5, #20]
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad5e:	2320      	movs	r3, #32
 800ad60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad68:	2330      	movs	r3, #48	@ 0x30
 800ad6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af08 <_svfiprintf_r+0x1e4>
 800ad6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad72:	f04f 0901 	mov.w	r9, #1
 800ad76:	4623      	mov	r3, r4
 800ad78:	469a      	mov	sl, r3
 800ad7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad7e:	b10a      	cbz	r2, 800ad84 <_svfiprintf_r+0x60>
 800ad80:	2a25      	cmp	r2, #37	@ 0x25
 800ad82:	d1f9      	bne.n	800ad78 <_svfiprintf_r+0x54>
 800ad84:	ebba 0b04 	subs.w	fp, sl, r4
 800ad88:	d00b      	beq.n	800ada2 <_svfiprintf_r+0x7e>
 800ad8a:	465b      	mov	r3, fp
 800ad8c:	4622      	mov	r2, r4
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4638      	mov	r0, r7
 800ad92:	f7ff ff6b 	bl	800ac6c <__ssputs_r>
 800ad96:	3001      	adds	r0, #1
 800ad98:	f000 80a7 	beq.w	800aeea <_svfiprintf_r+0x1c6>
 800ad9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad9e:	445a      	add	r2, fp
 800ada0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ada2:	f89a 3000 	ldrb.w	r3, [sl]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f000 809f 	beq.w	800aeea <_svfiprintf_r+0x1c6>
 800adac:	2300      	movs	r3, #0
 800adae:	f04f 32ff 	mov.w	r2, #4294967295
 800adb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adb6:	f10a 0a01 	add.w	sl, sl, #1
 800adba:	9304      	str	r3, [sp, #16]
 800adbc:	9307      	str	r3, [sp, #28]
 800adbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800adc2:	931a      	str	r3, [sp, #104]	@ 0x68
 800adc4:	4654      	mov	r4, sl
 800adc6:	2205      	movs	r2, #5
 800adc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adcc:	484e      	ldr	r0, [pc, #312]	@ (800af08 <_svfiprintf_r+0x1e4>)
 800adce:	f7f5 fa1f 	bl	8000210 <memchr>
 800add2:	9a04      	ldr	r2, [sp, #16]
 800add4:	b9d8      	cbnz	r0, 800ae0e <_svfiprintf_r+0xea>
 800add6:	06d0      	lsls	r0, r2, #27
 800add8:	bf44      	itt	mi
 800adda:	2320      	movmi	r3, #32
 800addc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ade0:	0711      	lsls	r1, r2, #28
 800ade2:	bf44      	itt	mi
 800ade4:	232b      	movmi	r3, #43	@ 0x2b
 800ade6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adea:	f89a 3000 	ldrb.w	r3, [sl]
 800adee:	2b2a      	cmp	r3, #42	@ 0x2a
 800adf0:	d015      	beq.n	800ae1e <_svfiprintf_r+0xfa>
 800adf2:	9a07      	ldr	r2, [sp, #28]
 800adf4:	4654      	mov	r4, sl
 800adf6:	2000      	movs	r0, #0
 800adf8:	f04f 0c0a 	mov.w	ip, #10
 800adfc:	4621      	mov	r1, r4
 800adfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae02:	3b30      	subs	r3, #48	@ 0x30
 800ae04:	2b09      	cmp	r3, #9
 800ae06:	d94b      	bls.n	800aea0 <_svfiprintf_r+0x17c>
 800ae08:	b1b0      	cbz	r0, 800ae38 <_svfiprintf_r+0x114>
 800ae0a:	9207      	str	r2, [sp, #28]
 800ae0c:	e014      	b.n	800ae38 <_svfiprintf_r+0x114>
 800ae0e:	eba0 0308 	sub.w	r3, r0, r8
 800ae12:	fa09 f303 	lsl.w	r3, r9, r3
 800ae16:	4313      	orrs	r3, r2
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	46a2      	mov	sl, r4
 800ae1c:	e7d2      	b.n	800adc4 <_svfiprintf_r+0xa0>
 800ae1e:	9b03      	ldr	r3, [sp, #12]
 800ae20:	1d19      	adds	r1, r3, #4
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	9103      	str	r1, [sp, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	bfbb      	ittet	lt
 800ae2a:	425b      	neglt	r3, r3
 800ae2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae30:	9307      	strge	r3, [sp, #28]
 800ae32:	9307      	strlt	r3, [sp, #28]
 800ae34:	bfb8      	it	lt
 800ae36:	9204      	strlt	r2, [sp, #16]
 800ae38:	7823      	ldrb	r3, [r4, #0]
 800ae3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae3c:	d10a      	bne.n	800ae54 <_svfiprintf_r+0x130>
 800ae3e:	7863      	ldrb	r3, [r4, #1]
 800ae40:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae42:	d132      	bne.n	800aeaa <_svfiprintf_r+0x186>
 800ae44:	9b03      	ldr	r3, [sp, #12]
 800ae46:	1d1a      	adds	r2, r3, #4
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	9203      	str	r2, [sp, #12]
 800ae4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae50:	3402      	adds	r4, #2
 800ae52:	9305      	str	r3, [sp, #20]
 800ae54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af18 <_svfiprintf_r+0x1f4>
 800ae58:	7821      	ldrb	r1, [r4, #0]
 800ae5a:	2203      	movs	r2, #3
 800ae5c:	4650      	mov	r0, sl
 800ae5e:	f7f5 f9d7 	bl	8000210 <memchr>
 800ae62:	b138      	cbz	r0, 800ae74 <_svfiprintf_r+0x150>
 800ae64:	9b04      	ldr	r3, [sp, #16]
 800ae66:	eba0 000a 	sub.w	r0, r0, sl
 800ae6a:	2240      	movs	r2, #64	@ 0x40
 800ae6c:	4082      	lsls	r2, r0
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	3401      	adds	r4, #1
 800ae72:	9304      	str	r3, [sp, #16]
 800ae74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae78:	4824      	ldr	r0, [pc, #144]	@ (800af0c <_svfiprintf_r+0x1e8>)
 800ae7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae7e:	2206      	movs	r2, #6
 800ae80:	f7f5 f9c6 	bl	8000210 <memchr>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d036      	beq.n	800aef6 <_svfiprintf_r+0x1d2>
 800ae88:	4b21      	ldr	r3, [pc, #132]	@ (800af10 <_svfiprintf_r+0x1ec>)
 800ae8a:	bb1b      	cbnz	r3, 800aed4 <_svfiprintf_r+0x1b0>
 800ae8c:	9b03      	ldr	r3, [sp, #12]
 800ae8e:	3307      	adds	r3, #7
 800ae90:	f023 0307 	bic.w	r3, r3, #7
 800ae94:	3308      	adds	r3, #8
 800ae96:	9303      	str	r3, [sp, #12]
 800ae98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae9a:	4433      	add	r3, r6
 800ae9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae9e:	e76a      	b.n	800ad76 <_svfiprintf_r+0x52>
 800aea0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aea4:	460c      	mov	r4, r1
 800aea6:	2001      	movs	r0, #1
 800aea8:	e7a8      	b.n	800adfc <_svfiprintf_r+0xd8>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	3401      	adds	r4, #1
 800aeae:	9305      	str	r3, [sp, #20]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	f04f 0c0a 	mov.w	ip, #10
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aebc:	3a30      	subs	r2, #48	@ 0x30
 800aebe:	2a09      	cmp	r2, #9
 800aec0:	d903      	bls.n	800aeca <_svfiprintf_r+0x1a6>
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d0c6      	beq.n	800ae54 <_svfiprintf_r+0x130>
 800aec6:	9105      	str	r1, [sp, #20]
 800aec8:	e7c4      	b.n	800ae54 <_svfiprintf_r+0x130>
 800aeca:	fb0c 2101 	mla	r1, ip, r1, r2
 800aece:	4604      	mov	r4, r0
 800aed0:	2301      	movs	r3, #1
 800aed2:	e7f0      	b.n	800aeb6 <_svfiprintf_r+0x192>
 800aed4:	ab03      	add	r3, sp, #12
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	462a      	mov	r2, r5
 800aeda:	4b0e      	ldr	r3, [pc, #56]	@ (800af14 <_svfiprintf_r+0x1f0>)
 800aedc:	a904      	add	r1, sp, #16
 800aede:	4638      	mov	r0, r7
 800aee0:	f7fc fcba 	bl	8007858 <_printf_float>
 800aee4:	1c42      	adds	r2, r0, #1
 800aee6:	4606      	mov	r6, r0
 800aee8:	d1d6      	bne.n	800ae98 <_svfiprintf_r+0x174>
 800aeea:	89ab      	ldrh	r3, [r5, #12]
 800aeec:	065b      	lsls	r3, r3, #25
 800aeee:	f53f af2d 	bmi.w	800ad4c <_svfiprintf_r+0x28>
 800aef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aef4:	e72c      	b.n	800ad50 <_svfiprintf_r+0x2c>
 800aef6:	ab03      	add	r3, sp, #12
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	462a      	mov	r2, r5
 800aefc:	4b05      	ldr	r3, [pc, #20]	@ (800af14 <_svfiprintf_r+0x1f0>)
 800aefe:	a904      	add	r1, sp, #16
 800af00:	4638      	mov	r0, r7
 800af02:	f7fc ff41 	bl	8007d88 <_printf_i>
 800af06:	e7ed      	b.n	800aee4 <_svfiprintf_r+0x1c0>
 800af08:	0800d009 	.word	0x0800d009
 800af0c:	0800d013 	.word	0x0800d013
 800af10:	08007859 	.word	0x08007859
 800af14:	0800ac6d 	.word	0x0800ac6d
 800af18:	0800d00f 	.word	0x0800d00f

0800af1c <__sflush_r>:
 800af1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af24:	0716      	lsls	r6, r2, #28
 800af26:	4605      	mov	r5, r0
 800af28:	460c      	mov	r4, r1
 800af2a:	d454      	bmi.n	800afd6 <__sflush_r+0xba>
 800af2c:	684b      	ldr	r3, [r1, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	dc02      	bgt.n	800af38 <__sflush_r+0x1c>
 800af32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af34:	2b00      	cmp	r3, #0
 800af36:	dd48      	ble.n	800afca <__sflush_r+0xae>
 800af38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af3a:	2e00      	cmp	r6, #0
 800af3c:	d045      	beq.n	800afca <__sflush_r+0xae>
 800af3e:	2300      	movs	r3, #0
 800af40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af44:	682f      	ldr	r7, [r5, #0]
 800af46:	6a21      	ldr	r1, [r4, #32]
 800af48:	602b      	str	r3, [r5, #0]
 800af4a:	d030      	beq.n	800afae <__sflush_r+0x92>
 800af4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af4e:	89a3      	ldrh	r3, [r4, #12]
 800af50:	0759      	lsls	r1, r3, #29
 800af52:	d505      	bpl.n	800af60 <__sflush_r+0x44>
 800af54:	6863      	ldr	r3, [r4, #4]
 800af56:	1ad2      	subs	r2, r2, r3
 800af58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af5a:	b10b      	cbz	r3, 800af60 <__sflush_r+0x44>
 800af5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af5e:	1ad2      	subs	r2, r2, r3
 800af60:	2300      	movs	r3, #0
 800af62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af64:	6a21      	ldr	r1, [r4, #32]
 800af66:	4628      	mov	r0, r5
 800af68:	47b0      	blx	r6
 800af6a:	1c43      	adds	r3, r0, #1
 800af6c:	89a3      	ldrh	r3, [r4, #12]
 800af6e:	d106      	bne.n	800af7e <__sflush_r+0x62>
 800af70:	6829      	ldr	r1, [r5, #0]
 800af72:	291d      	cmp	r1, #29
 800af74:	d82b      	bhi.n	800afce <__sflush_r+0xb2>
 800af76:	4a2a      	ldr	r2, [pc, #168]	@ (800b020 <__sflush_r+0x104>)
 800af78:	410a      	asrs	r2, r1
 800af7a:	07d6      	lsls	r6, r2, #31
 800af7c:	d427      	bmi.n	800afce <__sflush_r+0xb2>
 800af7e:	2200      	movs	r2, #0
 800af80:	6062      	str	r2, [r4, #4]
 800af82:	04d9      	lsls	r1, r3, #19
 800af84:	6922      	ldr	r2, [r4, #16]
 800af86:	6022      	str	r2, [r4, #0]
 800af88:	d504      	bpl.n	800af94 <__sflush_r+0x78>
 800af8a:	1c42      	adds	r2, r0, #1
 800af8c:	d101      	bne.n	800af92 <__sflush_r+0x76>
 800af8e:	682b      	ldr	r3, [r5, #0]
 800af90:	b903      	cbnz	r3, 800af94 <__sflush_r+0x78>
 800af92:	6560      	str	r0, [r4, #84]	@ 0x54
 800af94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af96:	602f      	str	r7, [r5, #0]
 800af98:	b1b9      	cbz	r1, 800afca <__sflush_r+0xae>
 800af9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af9e:	4299      	cmp	r1, r3
 800afa0:	d002      	beq.n	800afa8 <__sflush_r+0x8c>
 800afa2:	4628      	mov	r0, r5
 800afa4:	f7fe fa2c 	bl	8009400 <_free_r>
 800afa8:	2300      	movs	r3, #0
 800afaa:	6363      	str	r3, [r4, #52]	@ 0x34
 800afac:	e00d      	b.n	800afca <__sflush_r+0xae>
 800afae:	2301      	movs	r3, #1
 800afb0:	4628      	mov	r0, r5
 800afb2:	47b0      	blx	r6
 800afb4:	4602      	mov	r2, r0
 800afb6:	1c50      	adds	r0, r2, #1
 800afb8:	d1c9      	bne.n	800af4e <__sflush_r+0x32>
 800afba:	682b      	ldr	r3, [r5, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d0c6      	beq.n	800af4e <__sflush_r+0x32>
 800afc0:	2b1d      	cmp	r3, #29
 800afc2:	d001      	beq.n	800afc8 <__sflush_r+0xac>
 800afc4:	2b16      	cmp	r3, #22
 800afc6:	d11e      	bne.n	800b006 <__sflush_r+0xea>
 800afc8:	602f      	str	r7, [r5, #0]
 800afca:	2000      	movs	r0, #0
 800afcc:	e022      	b.n	800b014 <__sflush_r+0xf8>
 800afce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afd2:	b21b      	sxth	r3, r3
 800afd4:	e01b      	b.n	800b00e <__sflush_r+0xf2>
 800afd6:	690f      	ldr	r7, [r1, #16]
 800afd8:	2f00      	cmp	r7, #0
 800afda:	d0f6      	beq.n	800afca <__sflush_r+0xae>
 800afdc:	0793      	lsls	r3, r2, #30
 800afde:	680e      	ldr	r6, [r1, #0]
 800afe0:	bf08      	it	eq
 800afe2:	694b      	ldreq	r3, [r1, #20]
 800afe4:	600f      	str	r7, [r1, #0]
 800afe6:	bf18      	it	ne
 800afe8:	2300      	movne	r3, #0
 800afea:	eba6 0807 	sub.w	r8, r6, r7
 800afee:	608b      	str	r3, [r1, #8]
 800aff0:	f1b8 0f00 	cmp.w	r8, #0
 800aff4:	dde9      	ble.n	800afca <__sflush_r+0xae>
 800aff6:	6a21      	ldr	r1, [r4, #32]
 800aff8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800affa:	4643      	mov	r3, r8
 800affc:	463a      	mov	r2, r7
 800affe:	4628      	mov	r0, r5
 800b000:	47b0      	blx	r6
 800b002:	2800      	cmp	r0, #0
 800b004:	dc08      	bgt.n	800b018 <__sflush_r+0xfc>
 800b006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b00a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b00e:	81a3      	strh	r3, [r4, #12]
 800b010:	f04f 30ff 	mov.w	r0, #4294967295
 800b014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b018:	4407      	add	r7, r0
 800b01a:	eba8 0800 	sub.w	r8, r8, r0
 800b01e:	e7e7      	b.n	800aff0 <__sflush_r+0xd4>
 800b020:	dfbffffe 	.word	0xdfbffffe

0800b024 <_fflush_r>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	690b      	ldr	r3, [r1, #16]
 800b028:	4605      	mov	r5, r0
 800b02a:	460c      	mov	r4, r1
 800b02c:	b913      	cbnz	r3, 800b034 <_fflush_r+0x10>
 800b02e:	2500      	movs	r5, #0
 800b030:	4628      	mov	r0, r5
 800b032:	bd38      	pop	{r3, r4, r5, pc}
 800b034:	b118      	cbz	r0, 800b03e <_fflush_r+0x1a>
 800b036:	6a03      	ldr	r3, [r0, #32]
 800b038:	b90b      	cbnz	r3, 800b03e <_fflush_r+0x1a>
 800b03a:	f7fd fa65 	bl	8008508 <__sinit>
 800b03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d0f3      	beq.n	800b02e <_fflush_r+0xa>
 800b046:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b048:	07d0      	lsls	r0, r2, #31
 800b04a:	d404      	bmi.n	800b056 <_fflush_r+0x32>
 800b04c:	0599      	lsls	r1, r3, #22
 800b04e:	d402      	bmi.n	800b056 <_fflush_r+0x32>
 800b050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b052:	f7fd fb70 	bl	8008736 <__retarget_lock_acquire_recursive>
 800b056:	4628      	mov	r0, r5
 800b058:	4621      	mov	r1, r4
 800b05a:	f7ff ff5f 	bl	800af1c <__sflush_r>
 800b05e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b060:	07da      	lsls	r2, r3, #31
 800b062:	4605      	mov	r5, r0
 800b064:	d4e4      	bmi.n	800b030 <_fflush_r+0xc>
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	059b      	lsls	r3, r3, #22
 800b06a:	d4e1      	bmi.n	800b030 <_fflush_r+0xc>
 800b06c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b06e:	f7fd fb63 	bl	8008738 <__retarget_lock_release_recursive>
 800b072:	e7dd      	b.n	800b030 <_fflush_r+0xc>

0800b074 <memmove>:
 800b074:	4288      	cmp	r0, r1
 800b076:	b510      	push	{r4, lr}
 800b078:	eb01 0402 	add.w	r4, r1, r2
 800b07c:	d902      	bls.n	800b084 <memmove+0x10>
 800b07e:	4284      	cmp	r4, r0
 800b080:	4623      	mov	r3, r4
 800b082:	d807      	bhi.n	800b094 <memmove+0x20>
 800b084:	1e43      	subs	r3, r0, #1
 800b086:	42a1      	cmp	r1, r4
 800b088:	d008      	beq.n	800b09c <memmove+0x28>
 800b08a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b08e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b092:	e7f8      	b.n	800b086 <memmove+0x12>
 800b094:	4402      	add	r2, r0
 800b096:	4601      	mov	r1, r0
 800b098:	428a      	cmp	r2, r1
 800b09a:	d100      	bne.n	800b09e <memmove+0x2a>
 800b09c:	bd10      	pop	{r4, pc}
 800b09e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0a6:	e7f7      	b.n	800b098 <memmove+0x24>

0800b0a8 <strncmp>:
 800b0a8:	b510      	push	{r4, lr}
 800b0aa:	b16a      	cbz	r2, 800b0c8 <strncmp+0x20>
 800b0ac:	3901      	subs	r1, #1
 800b0ae:	1884      	adds	r4, r0, r2
 800b0b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d103      	bne.n	800b0c4 <strncmp+0x1c>
 800b0bc:	42a0      	cmp	r0, r4
 800b0be:	d001      	beq.n	800b0c4 <strncmp+0x1c>
 800b0c0:	2a00      	cmp	r2, #0
 800b0c2:	d1f5      	bne.n	800b0b0 <strncmp+0x8>
 800b0c4:	1ad0      	subs	r0, r2, r3
 800b0c6:	bd10      	pop	{r4, pc}
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	e7fc      	b.n	800b0c6 <strncmp+0x1e>

0800b0cc <_sbrk_r>:
 800b0cc:	b538      	push	{r3, r4, r5, lr}
 800b0ce:	4d06      	ldr	r5, [pc, #24]	@ (800b0e8 <_sbrk_r+0x1c>)
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	4608      	mov	r0, r1
 800b0d6:	602b      	str	r3, [r5, #0]
 800b0d8:	f7f7 f8c2 	bl	8002260 <_sbrk>
 800b0dc:	1c43      	adds	r3, r0, #1
 800b0de:	d102      	bne.n	800b0e6 <_sbrk_r+0x1a>
 800b0e0:	682b      	ldr	r3, [r5, #0]
 800b0e2:	b103      	cbz	r3, 800b0e6 <_sbrk_r+0x1a>
 800b0e4:	6023      	str	r3, [r4, #0]
 800b0e6:	bd38      	pop	{r3, r4, r5, pc}
 800b0e8:	200051a4 	.word	0x200051a4
 800b0ec:	00000000 	.word	0x00000000

0800b0f0 <nan>:
 800b0f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b0f8 <nan+0x8>
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	00000000 	.word	0x00000000
 800b0fc:	7ff80000 	.word	0x7ff80000

0800b100 <__assert_func>:
 800b100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b102:	4614      	mov	r4, r2
 800b104:	461a      	mov	r2, r3
 800b106:	4b09      	ldr	r3, [pc, #36]	@ (800b12c <__assert_func+0x2c>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4605      	mov	r5, r0
 800b10c:	68d8      	ldr	r0, [r3, #12]
 800b10e:	b954      	cbnz	r4, 800b126 <__assert_func+0x26>
 800b110:	4b07      	ldr	r3, [pc, #28]	@ (800b130 <__assert_func+0x30>)
 800b112:	461c      	mov	r4, r3
 800b114:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b118:	9100      	str	r1, [sp, #0]
 800b11a:	462b      	mov	r3, r5
 800b11c:	4905      	ldr	r1, [pc, #20]	@ (800b134 <__assert_func+0x34>)
 800b11e:	f000 fba7 	bl	800b870 <fiprintf>
 800b122:	f000 fbb7 	bl	800b894 <abort>
 800b126:	4b04      	ldr	r3, [pc, #16]	@ (800b138 <__assert_func+0x38>)
 800b128:	e7f4      	b.n	800b114 <__assert_func+0x14>
 800b12a:	bf00      	nop
 800b12c:	2000002c 	.word	0x2000002c
 800b130:	0800d05d 	.word	0x0800d05d
 800b134:	0800d02f 	.word	0x0800d02f
 800b138:	0800d022 	.word	0x0800d022

0800b13c <_calloc_r>:
 800b13c:	b570      	push	{r4, r5, r6, lr}
 800b13e:	fba1 5402 	umull	r5, r4, r1, r2
 800b142:	b93c      	cbnz	r4, 800b154 <_calloc_r+0x18>
 800b144:	4629      	mov	r1, r5
 800b146:	f7fe f9cf 	bl	80094e8 <_malloc_r>
 800b14a:	4606      	mov	r6, r0
 800b14c:	b928      	cbnz	r0, 800b15a <_calloc_r+0x1e>
 800b14e:	2600      	movs	r6, #0
 800b150:	4630      	mov	r0, r6
 800b152:	bd70      	pop	{r4, r5, r6, pc}
 800b154:	220c      	movs	r2, #12
 800b156:	6002      	str	r2, [r0, #0]
 800b158:	e7f9      	b.n	800b14e <_calloc_r+0x12>
 800b15a:	462a      	mov	r2, r5
 800b15c:	4621      	mov	r1, r4
 800b15e:	f7fd fa6c 	bl	800863a <memset>
 800b162:	e7f5      	b.n	800b150 <_calloc_r+0x14>

0800b164 <rshift>:
 800b164:	6903      	ldr	r3, [r0, #16]
 800b166:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b16a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b16e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b172:	f100 0414 	add.w	r4, r0, #20
 800b176:	dd45      	ble.n	800b204 <rshift+0xa0>
 800b178:	f011 011f 	ands.w	r1, r1, #31
 800b17c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b180:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b184:	d10c      	bne.n	800b1a0 <rshift+0x3c>
 800b186:	f100 0710 	add.w	r7, r0, #16
 800b18a:	4629      	mov	r1, r5
 800b18c:	42b1      	cmp	r1, r6
 800b18e:	d334      	bcc.n	800b1fa <rshift+0x96>
 800b190:	1a9b      	subs	r3, r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	1eea      	subs	r2, r5, #3
 800b196:	4296      	cmp	r6, r2
 800b198:	bf38      	it	cc
 800b19a:	2300      	movcc	r3, #0
 800b19c:	4423      	add	r3, r4
 800b19e:	e015      	b.n	800b1cc <rshift+0x68>
 800b1a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b1a4:	f1c1 0820 	rsb	r8, r1, #32
 800b1a8:	40cf      	lsrs	r7, r1
 800b1aa:	f105 0e04 	add.w	lr, r5, #4
 800b1ae:	46a1      	mov	r9, r4
 800b1b0:	4576      	cmp	r6, lr
 800b1b2:	46f4      	mov	ip, lr
 800b1b4:	d815      	bhi.n	800b1e2 <rshift+0x7e>
 800b1b6:	1a9a      	subs	r2, r3, r2
 800b1b8:	0092      	lsls	r2, r2, #2
 800b1ba:	3a04      	subs	r2, #4
 800b1bc:	3501      	adds	r5, #1
 800b1be:	42ae      	cmp	r6, r5
 800b1c0:	bf38      	it	cc
 800b1c2:	2200      	movcc	r2, #0
 800b1c4:	18a3      	adds	r3, r4, r2
 800b1c6:	50a7      	str	r7, [r4, r2]
 800b1c8:	b107      	cbz	r7, 800b1cc <rshift+0x68>
 800b1ca:	3304      	adds	r3, #4
 800b1cc:	1b1a      	subs	r2, r3, r4
 800b1ce:	42a3      	cmp	r3, r4
 800b1d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1d4:	bf08      	it	eq
 800b1d6:	2300      	moveq	r3, #0
 800b1d8:	6102      	str	r2, [r0, #16]
 800b1da:	bf08      	it	eq
 800b1dc:	6143      	streq	r3, [r0, #20]
 800b1de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1e2:	f8dc c000 	ldr.w	ip, [ip]
 800b1e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b1ea:	ea4c 0707 	orr.w	r7, ip, r7
 800b1ee:	f849 7b04 	str.w	r7, [r9], #4
 800b1f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1f6:	40cf      	lsrs	r7, r1
 800b1f8:	e7da      	b.n	800b1b0 <rshift+0x4c>
 800b1fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800b1fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800b202:	e7c3      	b.n	800b18c <rshift+0x28>
 800b204:	4623      	mov	r3, r4
 800b206:	e7e1      	b.n	800b1cc <rshift+0x68>

0800b208 <__hexdig_fun>:
 800b208:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b20c:	2b09      	cmp	r3, #9
 800b20e:	d802      	bhi.n	800b216 <__hexdig_fun+0xe>
 800b210:	3820      	subs	r0, #32
 800b212:	b2c0      	uxtb	r0, r0
 800b214:	4770      	bx	lr
 800b216:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b21a:	2b05      	cmp	r3, #5
 800b21c:	d801      	bhi.n	800b222 <__hexdig_fun+0x1a>
 800b21e:	3847      	subs	r0, #71	@ 0x47
 800b220:	e7f7      	b.n	800b212 <__hexdig_fun+0xa>
 800b222:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b226:	2b05      	cmp	r3, #5
 800b228:	d801      	bhi.n	800b22e <__hexdig_fun+0x26>
 800b22a:	3827      	subs	r0, #39	@ 0x27
 800b22c:	e7f1      	b.n	800b212 <__hexdig_fun+0xa>
 800b22e:	2000      	movs	r0, #0
 800b230:	4770      	bx	lr
	...

0800b234 <__gethex>:
 800b234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b238:	b085      	sub	sp, #20
 800b23a:	468a      	mov	sl, r1
 800b23c:	9302      	str	r3, [sp, #8]
 800b23e:	680b      	ldr	r3, [r1, #0]
 800b240:	9001      	str	r0, [sp, #4]
 800b242:	4690      	mov	r8, r2
 800b244:	1c9c      	adds	r4, r3, #2
 800b246:	46a1      	mov	r9, r4
 800b248:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b24c:	2830      	cmp	r0, #48	@ 0x30
 800b24e:	d0fa      	beq.n	800b246 <__gethex+0x12>
 800b250:	eba9 0303 	sub.w	r3, r9, r3
 800b254:	f1a3 0b02 	sub.w	fp, r3, #2
 800b258:	f7ff ffd6 	bl	800b208 <__hexdig_fun>
 800b25c:	4605      	mov	r5, r0
 800b25e:	2800      	cmp	r0, #0
 800b260:	d168      	bne.n	800b334 <__gethex+0x100>
 800b262:	49a0      	ldr	r1, [pc, #640]	@ (800b4e4 <__gethex+0x2b0>)
 800b264:	2201      	movs	r2, #1
 800b266:	4648      	mov	r0, r9
 800b268:	f7ff ff1e 	bl	800b0a8 <strncmp>
 800b26c:	4607      	mov	r7, r0
 800b26e:	2800      	cmp	r0, #0
 800b270:	d167      	bne.n	800b342 <__gethex+0x10e>
 800b272:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b276:	4626      	mov	r6, r4
 800b278:	f7ff ffc6 	bl	800b208 <__hexdig_fun>
 800b27c:	2800      	cmp	r0, #0
 800b27e:	d062      	beq.n	800b346 <__gethex+0x112>
 800b280:	4623      	mov	r3, r4
 800b282:	7818      	ldrb	r0, [r3, #0]
 800b284:	2830      	cmp	r0, #48	@ 0x30
 800b286:	4699      	mov	r9, r3
 800b288:	f103 0301 	add.w	r3, r3, #1
 800b28c:	d0f9      	beq.n	800b282 <__gethex+0x4e>
 800b28e:	f7ff ffbb 	bl	800b208 <__hexdig_fun>
 800b292:	fab0 f580 	clz	r5, r0
 800b296:	096d      	lsrs	r5, r5, #5
 800b298:	f04f 0b01 	mov.w	fp, #1
 800b29c:	464a      	mov	r2, r9
 800b29e:	4616      	mov	r6, r2
 800b2a0:	3201      	adds	r2, #1
 800b2a2:	7830      	ldrb	r0, [r6, #0]
 800b2a4:	f7ff ffb0 	bl	800b208 <__hexdig_fun>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d1f8      	bne.n	800b29e <__gethex+0x6a>
 800b2ac:	498d      	ldr	r1, [pc, #564]	@ (800b4e4 <__gethex+0x2b0>)
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	f7ff fef9 	bl	800b0a8 <strncmp>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d13f      	bne.n	800b33a <__gethex+0x106>
 800b2ba:	b944      	cbnz	r4, 800b2ce <__gethex+0x9a>
 800b2bc:	1c74      	adds	r4, r6, #1
 800b2be:	4622      	mov	r2, r4
 800b2c0:	4616      	mov	r6, r2
 800b2c2:	3201      	adds	r2, #1
 800b2c4:	7830      	ldrb	r0, [r6, #0]
 800b2c6:	f7ff ff9f 	bl	800b208 <__hexdig_fun>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d1f8      	bne.n	800b2c0 <__gethex+0x8c>
 800b2ce:	1ba4      	subs	r4, r4, r6
 800b2d0:	00a7      	lsls	r7, r4, #2
 800b2d2:	7833      	ldrb	r3, [r6, #0]
 800b2d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b2d8:	2b50      	cmp	r3, #80	@ 0x50
 800b2da:	d13e      	bne.n	800b35a <__gethex+0x126>
 800b2dc:	7873      	ldrb	r3, [r6, #1]
 800b2de:	2b2b      	cmp	r3, #43	@ 0x2b
 800b2e0:	d033      	beq.n	800b34a <__gethex+0x116>
 800b2e2:	2b2d      	cmp	r3, #45	@ 0x2d
 800b2e4:	d034      	beq.n	800b350 <__gethex+0x11c>
 800b2e6:	1c71      	adds	r1, r6, #1
 800b2e8:	2400      	movs	r4, #0
 800b2ea:	7808      	ldrb	r0, [r1, #0]
 800b2ec:	f7ff ff8c 	bl	800b208 <__hexdig_fun>
 800b2f0:	1e43      	subs	r3, r0, #1
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	2b18      	cmp	r3, #24
 800b2f6:	d830      	bhi.n	800b35a <__gethex+0x126>
 800b2f8:	f1a0 0210 	sub.w	r2, r0, #16
 800b2fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b300:	f7ff ff82 	bl	800b208 <__hexdig_fun>
 800b304:	f100 3cff 	add.w	ip, r0, #4294967295
 800b308:	fa5f fc8c 	uxtb.w	ip, ip
 800b30c:	f1bc 0f18 	cmp.w	ip, #24
 800b310:	f04f 030a 	mov.w	r3, #10
 800b314:	d91e      	bls.n	800b354 <__gethex+0x120>
 800b316:	b104      	cbz	r4, 800b31a <__gethex+0xe6>
 800b318:	4252      	negs	r2, r2
 800b31a:	4417      	add	r7, r2
 800b31c:	f8ca 1000 	str.w	r1, [sl]
 800b320:	b1ed      	cbz	r5, 800b35e <__gethex+0x12a>
 800b322:	f1bb 0f00 	cmp.w	fp, #0
 800b326:	bf0c      	ite	eq
 800b328:	2506      	moveq	r5, #6
 800b32a:	2500      	movne	r5, #0
 800b32c:	4628      	mov	r0, r5
 800b32e:	b005      	add	sp, #20
 800b330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b334:	2500      	movs	r5, #0
 800b336:	462c      	mov	r4, r5
 800b338:	e7b0      	b.n	800b29c <__gethex+0x68>
 800b33a:	2c00      	cmp	r4, #0
 800b33c:	d1c7      	bne.n	800b2ce <__gethex+0x9a>
 800b33e:	4627      	mov	r7, r4
 800b340:	e7c7      	b.n	800b2d2 <__gethex+0x9e>
 800b342:	464e      	mov	r6, r9
 800b344:	462f      	mov	r7, r5
 800b346:	2501      	movs	r5, #1
 800b348:	e7c3      	b.n	800b2d2 <__gethex+0x9e>
 800b34a:	2400      	movs	r4, #0
 800b34c:	1cb1      	adds	r1, r6, #2
 800b34e:	e7cc      	b.n	800b2ea <__gethex+0xb6>
 800b350:	2401      	movs	r4, #1
 800b352:	e7fb      	b.n	800b34c <__gethex+0x118>
 800b354:	fb03 0002 	mla	r0, r3, r2, r0
 800b358:	e7ce      	b.n	800b2f8 <__gethex+0xc4>
 800b35a:	4631      	mov	r1, r6
 800b35c:	e7de      	b.n	800b31c <__gethex+0xe8>
 800b35e:	eba6 0309 	sub.w	r3, r6, r9
 800b362:	3b01      	subs	r3, #1
 800b364:	4629      	mov	r1, r5
 800b366:	2b07      	cmp	r3, #7
 800b368:	dc0a      	bgt.n	800b380 <__gethex+0x14c>
 800b36a:	9801      	ldr	r0, [sp, #4]
 800b36c:	f7fe f948 	bl	8009600 <_Balloc>
 800b370:	4604      	mov	r4, r0
 800b372:	b940      	cbnz	r0, 800b386 <__gethex+0x152>
 800b374:	4b5c      	ldr	r3, [pc, #368]	@ (800b4e8 <__gethex+0x2b4>)
 800b376:	4602      	mov	r2, r0
 800b378:	21e4      	movs	r1, #228	@ 0xe4
 800b37a:	485c      	ldr	r0, [pc, #368]	@ (800b4ec <__gethex+0x2b8>)
 800b37c:	f7ff fec0 	bl	800b100 <__assert_func>
 800b380:	3101      	adds	r1, #1
 800b382:	105b      	asrs	r3, r3, #1
 800b384:	e7ef      	b.n	800b366 <__gethex+0x132>
 800b386:	f100 0a14 	add.w	sl, r0, #20
 800b38a:	2300      	movs	r3, #0
 800b38c:	4655      	mov	r5, sl
 800b38e:	469b      	mov	fp, r3
 800b390:	45b1      	cmp	r9, r6
 800b392:	d337      	bcc.n	800b404 <__gethex+0x1d0>
 800b394:	f845 bb04 	str.w	fp, [r5], #4
 800b398:	eba5 050a 	sub.w	r5, r5, sl
 800b39c:	10ad      	asrs	r5, r5, #2
 800b39e:	6125      	str	r5, [r4, #16]
 800b3a0:	4658      	mov	r0, fp
 800b3a2:	f7fe fa1f 	bl	80097e4 <__hi0bits>
 800b3a6:	016d      	lsls	r5, r5, #5
 800b3a8:	f8d8 6000 	ldr.w	r6, [r8]
 800b3ac:	1a2d      	subs	r5, r5, r0
 800b3ae:	42b5      	cmp	r5, r6
 800b3b0:	dd54      	ble.n	800b45c <__gethex+0x228>
 800b3b2:	1bad      	subs	r5, r5, r6
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f7fe fdb3 	bl	8009f22 <__any_on>
 800b3bc:	4681      	mov	r9, r0
 800b3be:	b178      	cbz	r0, 800b3e0 <__gethex+0x1ac>
 800b3c0:	1e6b      	subs	r3, r5, #1
 800b3c2:	1159      	asrs	r1, r3, #5
 800b3c4:	f003 021f 	and.w	r2, r3, #31
 800b3c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b3cc:	f04f 0901 	mov.w	r9, #1
 800b3d0:	fa09 f202 	lsl.w	r2, r9, r2
 800b3d4:	420a      	tst	r2, r1
 800b3d6:	d003      	beq.n	800b3e0 <__gethex+0x1ac>
 800b3d8:	454b      	cmp	r3, r9
 800b3da:	dc36      	bgt.n	800b44a <__gethex+0x216>
 800b3dc:	f04f 0902 	mov.w	r9, #2
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f7ff febe 	bl	800b164 <rshift>
 800b3e8:	442f      	add	r7, r5
 800b3ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3ee:	42bb      	cmp	r3, r7
 800b3f0:	da42      	bge.n	800b478 <__gethex+0x244>
 800b3f2:	9801      	ldr	r0, [sp, #4]
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	f7fe f943 	bl	8009680 <_Bfree>
 800b3fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	6013      	str	r3, [r2, #0]
 800b400:	25a3      	movs	r5, #163	@ 0xa3
 800b402:	e793      	b.n	800b32c <__gethex+0xf8>
 800b404:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b408:	2a2e      	cmp	r2, #46	@ 0x2e
 800b40a:	d012      	beq.n	800b432 <__gethex+0x1fe>
 800b40c:	2b20      	cmp	r3, #32
 800b40e:	d104      	bne.n	800b41a <__gethex+0x1e6>
 800b410:	f845 bb04 	str.w	fp, [r5], #4
 800b414:	f04f 0b00 	mov.w	fp, #0
 800b418:	465b      	mov	r3, fp
 800b41a:	7830      	ldrb	r0, [r6, #0]
 800b41c:	9303      	str	r3, [sp, #12]
 800b41e:	f7ff fef3 	bl	800b208 <__hexdig_fun>
 800b422:	9b03      	ldr	r3, [sp, #12]
 800b424:	f000 000f 	and.w	r0, r0, #15
 800b428:	4098      	lsls	r0, r3
 800b42a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b42e:	3304      	adds	r3, #4
 800b430:	e7ae      	b.n	800b390 <__gethex+0x15c>
 800b432:	45b1      	cmp	r9, r6
 800b434:	d8ea      	bhi.n	800b40c <__gethex+0x1d8>
 800b436:	492b      	ldr	r1, [pc, #172]	@ (800b4e4 <__gethex+0x2b0>)
 800b438:	9303      	str	r3, [sp, #12]
 800b43a:	2201      	movs	r2, #1
 800b43c:	4630      	mov	r0, r6
 800b43e:	f7ff fe33 	bl	800b0a8 <strncmp>
 800b442:	9b03      	ldr	r3, [sp, #12]
 800b444:	2800      	cmp	r0, #0
 800b446:	d1e1      	bne.n	800b40c <__gethex+0x1d8>
 800b448:	e7a2      	b.n	800b390 <__gethex+0x15c>
 800b44a:	1ea9      	subs	r1, r5, #2
 800b44c:	4620      	mov	r0, r4
 800b44e:	f7fe fd68 	bl	8009f22 <__any_on>
 800b452:	2800      	cmp	r0, #0
 800b454:	d0c2      	beq.n	800b3dc <__gethex+0x1a8>
 800b456:	f04f 0903 	mov.w	r9, #3
 800b45a:	e7c1      	b.n	800b3e0 <__gethex+0x1ac>
 800b45c:	da09      	bge.n	800b472 <__gethex+0x23e>
 800b45e:	1b75      	subs	r5, r6, r5
 800b460:	4621      	mov	r1, r4
 800b462:	9801      	ldr	r0, [sp, #4]
 800b464:	462a      	mov	r2, r5
 800b466:	f7fe fb23 	bl	8009ab0 <__lshift>
 800b46a:	1b7f      	subs	r7, r7, r5
 800b46c:	4604      	mov	r4, r0
 800b46e:	f100 0a14 	add.w	sl, r0, #20
 800b472:	f04f 0900 	mov.w	r9, #0
 800b476:	e7b8      	b.n	800b3ea <__gethex+0x1b6>
 800b478:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b47c:	42bd      	cmp	r5, r7
 800b47e:	dd6f      	ble.n	800b560 <__gethex+0x32c>
 800b480:	1bed      	subs	r5, r5, r7
 800b482:	42ae      	cmp	r6, r5
 800b484:	dc34      	bgt.n	800b4f0 <__gethex+0x2bc>
 800b486:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d022      	beq.n	800b4d4 <__gethex+0x2a0>
 800b48e:	2b03      	cmp	r3, #3
 800b490:	d024      	beq.n	800b4dc <__gethex+0x2a8>
 800b492:	2b01      	cmp	r3, #1
 800b494:	d115      	bne.n	800b4c2 <__gethex+0x28e>
 800b496:	42ae      	cmp	r6, r5
 800b498:	d113      	bne.n	800b4c2 <__gethex+0x28e>
 800b49a:	2e01      	cmp	r6, #1
 800b49c:	d10b      	bne.n	800b4b6 <__gethex+0x282>
 800b49e:	9a02      	ldr	r2, [sp, #8]
 800b4a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b4a4:	6013      	str	r3, [r2, #0]
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	6123      	str	r3, [r4, #16]
 800b4aa:	f8ca 3000 	str.w	r3, [sl]
 800b4ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4b0:	2562      	movs	r5, #98	@ 0x62
 800b4b2:	601c      	str	r4, [r3, #0]
 800b4b4:	e73a      	b.n	800b32c <__gethex+0xf8>
 800b4b6:	1e71      	subs	r1, r6, #1
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f7fe fd32 	bl	8009f22 <__any_on>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d1ed      	bne.n	800b49e <__gethex+0x26a>
 800b4c2:	9801      	ldr	r0, [sp, #4]
 800b4c4:	4621      	mov	r1, r4
 800b4c6:	f7fe f8db 	bl	8009680 <_Bfree>
 800b4ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	6013      	str	r3, [r2, #0]
 800b4d0:	2550      	movs	r5, #80	@ 0x50
 800b4d2:	e72b      	b.n	800b32c <__gethex+0xf8>
 800b4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1f3      	bne.n	800b4c2 <__gethex+0x28e>
 800b4da:	e7e0      	b.n	800b49e <__gethex+0x26a>
 800b4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1dd      	bne.n	800b49e <__gethex+0x26a>
 800b4e2:	e7ee      	b.n	800b4c2 <__gethex+0x28e>
 800b4e4:	0800ceb0 	.word	0x0800ceb0
 800b4e8:	0800cd49 	.word	0x0800cd49
 800b4ec:	0800d05e 	.word	0x0800d05e
 800b4f0:	1e6f      	subs	r7, r5, #1
 800b4f2:	f1b9 0f00 	cmp.w	r9, #0
 800b4f6:	d130      	bne.n	800b55a <__gethex+0x326>
 800b4f8:	b127      	cbz	r7, 800b504 <__gethex+0x2d0>
 800b4fa:	4639      	mov	r1, r7
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f7fe fd10 	bl	8009f22 <__any_on>
 800b502:	4681      	mov	r9, r0
 800b504:	117a      	asrs	r2, r7, #5
 800b506:	2301      	movs	r3, #1
 800b508:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b50c:	f007 071f 	and.w	r7, r7, #31
 800b510:	40bb      	lsls	r3, r7
 800b512:	4213      	tst	r3, r2
 800b514:	4629      	mov	r1, r5
 800b516:	4620      	mov	r0, r4
 800b518:	bf18      	it	ne
 800b51a:	f049 0902 	orrne.w	r9, r9, #2
 800b51e:	f7ff fe21 	bl	800b164 <rshift>
 800b522:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b526:	1b76      	subs	r6, r6, r5
 800b528:	2502      	movs	r5, #2
 800b52a:	f1b9 0f00 	cmp.w	r9, #0
 800b52e:	d047      	beq.n	800b5c0 <__gethex+0x38c>
 800b530:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b534:	2b02      	cmp	r3, #2
 800b536:	d015      	beq.n	800b564 <__gethex+0x330>
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d017      	beq.n	800b56c <__gethex+0x338>
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d109      	bne.n	800b554 <__gethex+0x320>
 800b540:	f019 0f02 	tst.w	r9, #2
 800b544:	d006      	beq.n	800b554 <__gethex+0x320>
 800b546:	f8da 3000 	ldr.w	r3, [sl]
 800b54a:	ea49 0903 	orr.w	r9, r9, r3
 800b54e:	f019 0f01 	tst.w	r9, #1
 800b552:	d10e      	bne.n	800b572 <__gethex+0x33e>
 800b554:	f045 0510 	orr.w	r5, r5, #16
 800b558:	e032      	b.n	800b5c0 <__gethex+0x38c>
 800b55a:	f04f 0901 	mov.w	r9, #1
 800b55e:	e7d1      	b.n	800b504 <__gethex+0x2d0>
 800b560:	2501      	movs	r5, #1
 800b562:	e7e2      	b.n	800b52a <__gethex+0x2f6>
 800b564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b566:	f1c3 0301 	rsb	r3, r3, #1
 800b56a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b56c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d0f0      	beq.n	800b554 <__gethex+0x320>
 800b572:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b576:	f104 0314 	add.w	r3, r4, #20
 800b57a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b57e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b582:	f04f 0c00 	mov.w	ip, #0
 800b586:	4618      	mov	r0, r3
 800b588:	f853 2b04 	ldr.w	r2, [r3], #4
 800b58c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b590:	d01b      	beq.n	800b5ca <__gethex+0x396>
 800b592:	3201      	adds	r2, #1
 800b594:	6002      	str	r2, [r0, #0]
 800b596:	2d02      	cmp	r5, #2
 800b598:	f104 0314 	add.w	r3, r4, #20
 800b59c:	d13c      	bne.n	800b618 <__gethex+0x3e4>
 800b59e:	f8d8 2000 	ldr.w	r2, [r8]
 800b5a2:	3a01      	subs	r2, #1
 800b5a4:	42b2      	cmp	r2, r6
 800b5a6:	d109      	bne.n	800b5bc <__gethex+0x388>
 800b5a8:	1171      	asrs	r1, r6, #5
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b5b0:	f006 061f 	and.w	r6, r6, #31
 800b5b4:	fa02 f606 	lsl.w	r6, r2, r6
 800b5b8:	421e      	tst	r6, r3
 800b5ba:	d13a      	bne.n	800b632 <__gethex+0x3fe>
 800b5bc:	f045 0520 	orr.w	r5, r5, #32
 800b5c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5c2:	601c      	str	r4, [r3, #0]
 800b5c4:	9b02      	ldr	r3, [sp, #8]
 800b5c6:	601f      	str	r7, [r3, #0]
 800b5c8:	e6b0      	b.n	800b32c <__gethex+0xf8>
 800b5ca:	4299      	cmp	r1, r3
 800b5cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b5d0:	d8d9      	bhi.n	800b586 <__gethex+0x352>
 800b5d2:	68a3      	ldr	r3, [r4, #8]
 800b5d4:	459b      	cmp	fp, r3
 800b5d6:	db17      	blt.n	800b608 <__gethex+0x3d4>
 800b5d8:	6861      	ldr	r1, [r4, #4]
 800b5da:	9801      	ldr	r0, [sp, #4]
 800b5dc:	3101      	adds	r1, #1
 800b5de:	f7fe f80f 	bl	8009600 <_Balloc>
 800b5e2:	4681      	mov	r9, r0
 800b5e4:	b918      	cbnz	r0, 800b5ee <__gethex+0x3ba>
 800b5e6:	4b1a      	ldr	r3, [pc, #104]	@ (800b650 <__gethex+0x41c>)
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	2184      	movs	r1, #132	@ 0x84
 800b5ec:	e6c5      	b.n	800b37a <__gethex+0x146>
 800b5ee:	6922      	ldr	r2, [r4, #16]
 800b5f0:	3202      	adds	r2, #2
 800b5f2:	f104 010c 	add.w	r1, r4, #12
 800b5f6:	0092      	lsls	r2, r2, #2
 800b5f8:	300c      	adds	r0, #12
 800b5fa:	f7fd f89e 	bl	800873a <memcpy>
 800b5fe:	4621      	mov	r1, r4
 800b600:	9801      	ldr	r0, [sp, #4]
 800b602:	f7fe f83d 	bl	8009680 <_Bfree>
 800b606:	464c      	mov	r4, r9
 800b608:	6923      	ldr	r3, [r4, #16]
 800b60a:	1c5a      	adds	r2, r3, #1
 800b60c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b610:	6122      	str	r2, [r4, #16]
 800b612:	2201      	movs	r2, #1
 800b614:	615a      	str	r2, [r3, #20]
 800b616:	e7be      	b.n	800b596 <__gethex+0x362>
 800b618:	6922      	ldr	r2, [r4, #16]
 800b61a:	455a      	cmp	r2, fp
 800b61c:	dd0b      	ble.n	800b636 <__gethex+0x402>
 800b61e:	2101      	movs	r1, #1
 800b620:	4620      	mov	r0, r4
 800b622:	f7ff fd9f 	bl	800b164 <rshift>
 800b626:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b62a:	3701      	adds	r7, #1
 800b62c:	42bb      	cmp	r3, r7
 800b62e:	f6ff aee0 	blt.w	800b3f2 <__gethex+0x1be>
 800b632:	2501      	movs	r5, #1
 800b634:	e7c2      	b.n	800b5bc <__gethex+0x388>
 800b636:	f016 061f 	ands.w	r6, r6, #31
 800b63a:	d0fa      	beq.n	800b632 <__gethex+0x3fe>
 800b63c:	4453      	add	r3, sl
 800b63e:	f1c6 0620 	rsb	r6, r6, #32
 800b642:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b646:	f7fe f8cd 	bl	80097e4 <__hi0bits>
 800b64a:	42b0      	cmp	r0, r6
 800b64c:	dbe7      	blt.n	800b61e <__gethex+0x3ea>
 800b64e:	e7f0      	b.n	800b632 <__gethex+0x3fe>
 800b650:	0800cd49 	.word	0x0800cd49

0800b654 <L_shift>:
 800b654:	f1c2 0208 	rsb	r2, r2, #8
 800b658:	0092      	lsls	r2, r2, #2
 800b65a:	b570      	push	{r4, r5, r6, lr}
 800b65c:	f1c2 0620 	rsb	r6, r2, #32
 800b660:	6843      	ldr	r3, [r0, #4]
 800b662:	6804      	ldr	r4, [r0, #0]
 800b664:	fa03 f506 	lsl.w	r5, r3, r6
 800b668:	432c      	orrs	r4, r5
 800b66a:	40d3      	lsrs	r3, r2
 800b66c:	6004      	str	r4, [r0, #0]
 800b66e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b672:	4288      	cmp	r0, r1
 800b674:	d3f4      	bcc.n	800b660 <L_shift+0xc>
 800b676:	bd70      	pop	{r4, r5, r6, pc}

0800b678 <__match>:
 800b678:	b530      	push	{r4, r5, lr}
 800b67a:	6803      	ldr	r3, [r0, #0]
 800b67c:	3301      	adds	r3, #1
 800b67e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b682:	b914      	cbnz	r4, 800b68a <__match+0x12>
 800b684:	6003      	str	r3, [r0, #0]
 800b686:	2001      	movs	r0, #1
 800b688:	bd30      	pop	{r4, r5, pc}
 800b68a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b68e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b692:	2d19      	cmp	r5, #25
 800b694:	bf98      	it	ls
 800b696:	3220      	addls	r2, #32
 800b698:	42a2      	cmp	r2, r4
 800b69a:	d0f0      	beq.n	800b67e <__match+0x6>
 800b69c:	2000      	movs	r0, #0
 800b69e:	e7f3      	b.n	800b688 <__match+0x10>

0800b6a0 <__hexnan>:
 800b6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a4:	680b      	ldr	r3, [r1, #0]
 800b6a6:	6801      	ldr	r1, [r0, #0]
 800b6a8:	115e      	asrs	r6, r3, #5
 800b6aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b6ae:	f013 031f 	ands.w	r3, r3, #31
 800b6b2:	b087      	sub	sp, #28
 800b6b4:	bf18      	it	ne
 800b6b6:	3604      	addne	r6, #4
 800b6b8:	2500      	movs	r5, #0
 800b6ba:	1f37      	subs	r7, r6, #4
 800b6bc:	4682      	mov	sl, r0
 800b6be:	4690      	mov	r8, r2
 800b6c0:	9301      	str	r3, [sp, #4]
 800b6c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b6c6:	46b9      	mov	r9, r7
 800b6c8:	463c      	mov	r4, r7
 800b6ca:	9502      	str	r5, [sp, #8]
 800b6cc:	46ab      	mov	fp, r5
 800b6ce:	784a      	ldrb	r2, [r1, #1]
 800b6d0:	1c4b      	adds	r3, r1, #1
 800b6d2:	9303      	str	r3, [sp, #12]
 800b6d4:	b342      	cbz	r2, 800b728 <__hexnan+0x88>
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	9105      	str	r1, [sp, #20]
 800b6da:	9204      	str	r2, [sp, #16]
 800b6dc:	f7ff fd94 	bl	800b208 <__hexdig_fun>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d151      	bne.n	800b788 <__hexnan+0xe8>
 800b6e4:	9a04      	ldr	r2, [sp, #16]
 800b6e6:	9905      	ldr	r1, [sp, #20]
 800b6e8:	2a20      	cmp	r2, #32
 800b6ea:	d818      	bhi.n	800b71e <__hexnan+0x7e>
 800b6ec:	9b02      	ldr	r3, [sp, #8]
 800b6ee:	459b      	cmp	fp, r3
 800b6f0:	dd13      	ble.n	800b71a <__hexnan+0x7a>
 800b6f2:	454c      	cmp	r4, r9
 800b6f4:	d206      	bcs.n	800b704 <__hexnan+0x64>
 800b6f6:	2d07      	cmp	r5, #7
 800b6f8:	dc04      	bgt.n	800b704 <__hexnan+0x64>
 800b6fa:	462a      	mov	r2, r5
 800b6fc:	4649      	mov	r1, r9
 800b6fe:	4620      	mov	r0, r4
 800b700:	f7ff ffa8 	bl	800b654 <L_shift>
 800b704:	4544      	cmp	r4, r8
 800b706:	d952      	bls.n	800b7ae <__hexnan+0x10e>
 800b708:	2300      	movs	r3, #0
 800b70a:	f1a4 0904 	sub.w	r9, r4, #4
 800b70e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b712:	f8cd b008 	str.w	fp, [sp, #8]
 800b716:	464c      	mov	r4, r9
 800b718:	461d      	mov	r5, r3
 800b71a:	9903      	ldr	r1, [sp, #12]
 800b71c:	e7d7      	b.n	800b6ce <__hexnan+0x2e>
 800b71e:	2a29      	cmp	r2, #41	@ 0x29
 800b720:	d157      	bne.n	800b7d2 <__hexnan+0x132>
 800b722:	3102      	adds	r1, #2
 800b724:	f8ca 1000 	str.w	r1, [sl]
 800b728:	f1bb 0f00 	cmp.w	fp, #0
 800b72c:	d051      	beq.n	800b7d2 <__hexnan+0x132>
 800b72e:	454c      	cmp	r4, r9
 800b730:	d206      	bcs.n	800b740 <__hexnan+0xa0>
 800b732:	2d07      	cmp	r5, #7
 800b734:	dc04      	bgt.n	800b740 <__hexnan+0xa0>
 800b736:	462a      	mov	r2, r5
 800b738:	4649      	mov	r1, r9
 800b73a:	4620      	mov	r0, r4
 800b73c:	f7ff ff8a 	bl	800b654 <L_shift>
 800b740:	4544      	cmp	r4, r8
 800b742:	d936      	bls.n	800b7b2 <__hexnan+0x112>
 800b744:	f1a8 0204 	sub.w	r2, r8, #4
 800b748:	4623      	mov	r3, r4
 800b74a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b74e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b752:	429f      	cmp	r7, r3
 800b754:	d2f9      	bcs.n	800b74a <__hexnan+0xaa>
 800b756:	1b3b      	subs	r3, r7, r4
 800b758:	f023 0303 	bic.w	r3, r3, #3
 800b75c:	3304      	adds	r3, #4
 800b75e:	3401      	adds	r4, #1
 800b760:	3e03      	subs	r6, #3
 800b762:	42b4      	cmp	r4, r6
 800b764:	bf88      	it	hi
 800b766:	2304      	movhi	r3, #4
 800b768:	4443      	add	r3, r8
 800b76a:	2200      	movs	r2, #0
 800b76c:	f843 2b04 	str.w	r2, [r3], #4
 800b770:	429f      	cmp	r7, r3
 800b772:	d2fb      	bcs.n	800b76c <__hexnan+0xcc>
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	b91b      	cbnz	r3, 800b780 <__hexnan+0xe0>
 800b778:	4547      	cmp	r7, r8
 800b77a:	d128      	bne.n	800b7ce <__hexnan+0x12e>
 800b77c:	2301      	movs	r3, #1
 800b77e:	603b      	str	r3, [r7, #0]
 800b780:	2005      	movs	r0, #5
 800b782:	b007      	add	sp, #28
 800b784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b788:	3501      	adds	r5, #1
 800b78a:	2d08      	cmp	r5, #8
 800b78c:	f10b 0b01 	add.w	fp, fp, #1
 800b790:	dd06      	ble.n	800b7a0 <__hexnan+0x100>
 800b792:	4544      	cmp	r4, r8
 800b794:	d9c1      	bls.n	800b71a <__hexnan+0x7a>
 800b796:	2300      	movs	r3, #0
 800b798:	f844 3c04 	str.w	r3, [r4, #-4]
 800b79c:	2501      	movs	r5, #1
 800b79e:	3c04      	subs	r4, #4
 800b7a0:	6822      	ldr	r2, [r4, #0]
 800b7a2:	f000 000f 	and.w	r0, r0, #15
 800b7a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b7aa:	6020      	str	r0, [r4, #0]
 800b7ac:	e7b5      	b.n	800b71a <__hexnan+0x7a>
 800b7ae:	2508      	movs	r5, #8
 800b7b0:	e7b3      	b.n	800b71a <__hexnan+0x7a>
 800b7b2:	9b01      	ldr	r3, [sp, #4]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d0dd      	beq.n	800b774 <__hexnan+0xd4>
 800b7b8:	f1c3 0320 	rsb	r3, r3, #32
 800b7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c0:	40da      	lsrs	r2, r3
 800b7c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b7cc:	e7d2      	b.n	800b774 <__hexnan+0xd4>
 800b7ce:	3f04      	subs	r7, #4
 800b7d0:	e7d0      	b.n	800b774 <__hexnan+0xd4>
 800b7d2:	2004      	movs	r0, #4
 800b7d4:	e7d5      	b.n	800b782 <__hexnan+0xe2>

0800b7d6 <__ascii_mbtowc>:
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	b901      	cbnz	r1, 800b7dc <__ascii_mbtowc+0x6>
 800b7da:	a901      	add	r1, sp, #4
 800b7dc:	b142      	cbz	r2, 800b7f0 <__ascii_mbtowc+0x1a>
 800b7de:	b14b      	cbz	r3, 800b7f4 <__ascii_mbtowc+0x1e>
 800b7e0:	7813      	ldrb	r3, [r2, #0]
 800b7e2:	600b      	str	r3, [r1, #0]
 800b7e4:	7812      	ldrb	r2, [r2, #0]
 800b7e6:	1e10      	subs	r0, r2, #0
 800b7e8:	bf18      	it	ne
 800b7ea:	2001      	movne	r0, #1
 800b7ec:	b002      	add	sp, #8
 800b7ee:	4770      	bx	lr
 800b7f0:	4610      	mov	r0, r2
 800b7f2:	e7fb      	b.n	800b7ec <__ascii_mbtowc+0x16>
 800b7f4:	f06f 0001 	mvn.w	r0, #1
 800b7f8:	e7f8      	b.n	800b7ec <__ascii_mbtowc+0x16>

0800b7fa <_realloc_r>:
 800b7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7fe:	4680      	mov	r8, r0
 800b800:	4615      	mov	r5, r2
 800b802:	460c      	mov	r4, r1
 800b804:	b921      	cbnz	r1, 800b810 <_realloc_r+0x16>
 800b806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b80a:	4611      	mov	r1, r2
 800b80c:	f7fd be6c 	b.w	80094e8 <_malloc_r>
 800b810:	b92a      	cbnz	r2, 800b81e <_realloc_r+0x24>
 800b812:	f7fd fdf5 	bl	8009400 <_free_r>
 800b816:	2400      	movs	r4, #0
 800b818:	4620      	mov	r0, r4
 800b81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b81e:	f000 f840 	bl	800b8a2 <_malloc_usable_size_r>
 800b822:	4285      	cmp	r5, r0
 800b824:	4606      	mov	r6, r0
 800b826:	d802      	bhi.n	800b82e <_realloc_r+0x34>
 800b828:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b82c:	d8f4      	bhi.n	800b818 <_realloc_r+0x1e>
 800b82e:	4629      	mov	r1, r5
 800b830:	4640      	mov	r0, r8
 800b832:	f7fd fe59 	bl	80094e8 <_malloc_r>
 800b836:	4607      	mov	r7, r0
 800b838:	2800      	cmp	r0, #0
 800b83a:	d0ec      	beq.n	800b816 <_realloc_r+0x1c>
 800b83c:	42b5      	cmp	r5, r6
 800b83e:	462a      	mov	r2, r5
 800b840:	4621      	mov	r1, r4
 800b842:	bf28      	it	cs
 800b844:	4632      	movcs	r2, r6
 800b846:	f7fc ff78 	bl	800873a <memcpy>
 800b84a:	4621      	mov	r1, r4
 800b84c:	4640      	mov	r0, r8
 800b84e:	f7fd fdd7 	bl	8009400 <_free_r>
 800b852:	463c      	mov	r4, r7
 800b854:	e7e0      	b.n	800b818 <_realloc_r+0x1e>

0800b856 <__ascii_wctomb>:
 800b856:	4603      	mov	r3, r0
 800b858:	4608      	mov	r0, r1
 800b85a:	b141      	cbz	r1, 800b86e <__ascii_wctomb+0x18>
 800b85c:	2aff      	cmp	r2, #255	@ 0xff
 800b85e:	d904      	bls.n	800b86a <__ascii_wctomb+0x14>
 800b860:	228a      	movs	r2, #138	@ 0x8a
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	f04f 30ff 	mov.w	r0, #4294967295
 800b868:	4770      	bx	lr
 800b86a:	700a      	strb	r2, [r1, #0]
 800b86c:	2001      	movs	r0, #1
 800b86e:	4770      	bx	lr

0800b870 <fiprintf>:
 800b870:	b40e      	push	{r1, r2, r3}
 800b872:	b503      	push	{r0, r1, lr}
 800b874:	4601      	mov	r1, r0
 800b876:	ab03      	add	r3, sp, #12
 800b878:	4805      	ldr	r0, [pc, #20]	@ (800b890 <fiprintf+0x20>)
 800b87a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b87e:	6800      	ldr	r0, [r0, #0]
 800b880:	9301      	str	r3, [sp, #4]
 800b882:	f000 f83f 	bl	800b904 <_vfiprintf_r>
 800b886:	b002      	add	sp, #8
 800b888:	f85d eb04 	ldr.w	lr, [sp], #4
 800b88c:	b003      	add	sp, #12
 800b88e:	4770      	bx	lr
 800b890:	2000002c 	.word	0x2000002c

0800b894 <abort>:
 800b894:	b508      	push	{r3, lr}
 800b896:	2006      	movs	r0, #6
 800b898:	f000 fa08 	bl	800bcac <raise>
 800b89c:	2001      	movs	r0, #1
 800b89e:	f7f6 fc67 	bl	8002170 <_exit>

0800b8a2 <_malloc_usable_size_r>:
 800b8a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8a6:	1f18      	subs	r0, r3, #4
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	bfbc      	itt	lt
 800b8ac:	580b      	ldrlt	r3, [r1, r0]
 800b8ae:	18c0      	addlt	r0, r0, r3
 800b8b0:	4770      	bx	lr

0800b8b2 <__sfputc_r>:
 800b8b2:	6893      	ldr	r3, [r2, #8]
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	b410      	push	{r4}
 800b8ba:	6093      	str	r3, [r2, #8]
 800b8bc:	da08      	bge.n	800b8d0 <__sfputc_r+0x1e>
 800b8be:	6994      	ldr	r4, [r2, #24]
 800b8c0:	42a3      	cmp	r3, r4
 800b8c2:	db01      	blt.n	800b8c8 <__sfputc_r+0x16>
 800b8c4:	290a      	cmp	r1, #10
 800b8c6:	d103      	bne.n	800b8d0 <__sfputc_r+0x1e>
 800b8c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8cc:	f000 b932 	b.w	800bb34 <__swbuf_r>
 800b8d0:	6813      	ldr	r3, [r2, #0]
 800b8d2:	1c58      	adds	r0, r3, #1
 800b8d4:	6010      	str	r0, [r2, #0]
 800b8d6:	7019      	strb	r1, [r3, #0]
 800b8d8:	4608      	mov	r0, r1
 800b8da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <__sfputs_r>:
 800b8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	460f      	mov	r7, r1
 800b8e6:	4614      	mov	r4, r2
 800b8e8:	18d5      	adds	r5, r2, r3
 800b8ea:	42ac      	cmp	r4, r5
 800b8ec:	d101      	bne.n	800b8f2 <__sfputs_r+0x12>
 800b8ee:	2000      	movs	r0, #0
 800b8f0:	e007      	b.n	800b902 <__sfputs_r+0x22>
 800b8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f6:	463a      	mov	r2, r7
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	f7ff ffda 	bl	800b8b2 <__sfputc_r>
 800b8fe:	1c43      	adds	r3, r0, #1
 800b900:	d1f3      	bne.n	800b8ea <__sfputs_r+0xa>
 800b902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b904 <_vfiprintf_r>:
 800b904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b908:	460d      	mov	r5, r1
 800b90a:	b09d      	sub	sp, #116	@ 0x74
 800b90c:	4614      	mov	r4, r2
 800b90e:	4698      	mov	r8, r3
 800b910:	4606      	mov	r6, r0
 800b912:	b118      	cbz	r0, 800b91c <_vfiprintf_r+0x18>
 800b914:	6a03      	ldr	r3, [r0, #32]
 800b916:	b90b      	cbnz	r3, 800b91c <_vfiprintf_r+0x18>
 800b918:	f7fc fdf6 	bl	8008508 <__sinit>
 800b91c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b91e:	07d9      	lsls	r1, r3, #31
 800b920:	d405      	bmi.n	800b92e <_vfiprintf_r+0x2a>
 800b922:	89ab      	ldrh	r3, [r5, #12]
 800b924:	059a      	lsls	r2, r3, #22
 800b926:	d402      	bmi.n	800b92e <_vfiprintf_r+0x2a>
 800b928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b92a:	f7fc ff04 	bl	8008736 <__retarget_lock_acquire_recursive>
 800b92e:	89ab      	ldrh	r3, [r5, #12]
 800b930:	071b      	lsls	r3, r3, #28
 800b932:	d501      	bpl.n	800b938 <_vfiprintf_r+0x34>
 800b934:	692b      	ldr	r3, [r5, #16]
 800b936:	b99b      	cbnz	r3, 800b960 <_vfiprintf_r+0x5c>
 800b938:	4629      	mov	r1, r5
 800b93a:	4630      	mov	r0, r6
 800b93c:	f000 f938 	bl	800bbb0 <__swsetup_r>
 800b940:	b170      	cbz	r0, 800b960 <_vfiprintf_r+0x5c>
 800b942:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b944:	07dc      	lsls	r4, r3, #31
 800b946:	d504      	bpl.n	800b952 <_vfiprintf_r+0x4e>
 800b948:	f04f 30ff 	mov.w	r0, #4294967295
 800b94c:	b01d      	add	sp, #116	@ 0x74
 800b94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b952:	89ab      	ldrh	r3, [r5, #12]
 800b954:	0598      	lsls	r0, r3, #22
 800b956:	d4f7      	bmi.n	800b948 <_vfiprintf_r+0x44>
 800b958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b95a:	f7fc feed 	bl	8008738 <__retarget_lock_release_recursive>
 800b95e:	e7f3      	b.n	800b948 <_vfiprintf_r+0x44>
 800b960:	2300      	movs	r3, #0
 800b962:	9309      	str	r3, [sp, #36]	@ 0x24
 800b964:	2320      	movs	r3, #32
 800b966:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b96a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b96e:	2330      	movs	r3, #48	@ 0x30
 800b970:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb20 <_vfiprintf_r+0x21c>
 800b974:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b978:	f04f 0901 	mov.w	r9, #1
 800b97c:	4623      	mov	r3, r4
 800b97e:	469a      	mov	sl, r3
 800b980:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b984:	b10a      	cbz	r2, 800b98a <_vfiprintf_r+0x86>
 800b986:	2a25      	cmp	r2, #37	@ 0x25
 800b988:	d1f9      	bne.n	800b97e <_vfiprintf_r+0x7a>
 800b98a:	ebba 0b04 	subs.w	fp, sl, r4
 800b98e:	d00b      	beq.n	800b9a8 <_vfiprintf_r+0xa4>
 800b990:	465b      	mov	r3, fp
 800b992:	4622      	mov	r2, r4
 800b994:	4629      	mov	r1, r5
 800b996:	4630      	mov	r0, r6
 800b998:	f7ff ffa2 	bl	800b8e0 <__sfputs_r>
 800b99c:	3001      	adds	r0, #1
 800b99e:	f000 80a7 	beq.w	800baf0 <_vfiprintf_r+0x1ec>
 800b9a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9a4:	445a      	add	r2, fp
 800b9a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 809f 	beq.w	800baf0 <_vfiprintf_r+0x1ec>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9bc:	f10a 0a01 	add.w	sl, sl, #1
 800b9c0:	9304      	str	r3, [sp, #16]
 800b9c2:	9307      	str	r3, [sp, #28]
 800b9c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9ca:	4654      	mov	r4, sl
 800b9cc:	2205      	movs	r2, #5
 800b9ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d2:	4853      	ldr	r0, [pc, #332]	@ (800bb20 <_vfiprintf_r+0x21c>)
 800b9d4:	f7f4 fc1c 	bl	8000210 <memchr>
 800b9d8:	9a04      	ldr	r2, [sp, #16]
 800b9da:	b9d8      	cbnz	r0, 800ba14 <_vfiprintf_r+0x110>
 800b9dc:	06d1      	lsls	r1, r2, #27
 800b9de:	bf44      	itt	mi
 800b9e0:	2320      	movmi	r3, #32
 800b9e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9e6:	0713      	lsls	r3, r2, #28
 800b9e8:	bf44      	itt	mi
 800b9ea:	232b      	movmi	r3, #43	@ 0x2b
 800b9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9f6:	d015      	beq.n	800ba24 <_vfiprintf_r+0x120>
 800b9f8:	9a07      	ldr	r2, [sp, #28]
 800b9fa:	4654      	mov	r4, sl
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	f04f 0c0a 	mov.w	ip, #10
 800ba02:	4621      	mov	r1, r4
 800ba04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba08:	3b30      	subs	r3, #48	@ 0x30
 800ba0a:	2b09      	cmp	r3, #9
 800ba0c:	d94b      	bls.n	800baa6 <_vfiprintf_r+0x1a2>
 800ba0e:	b1b0      	cbz	r0, 800ba3e <_vfiprintf_r+0x13a>
 800ba10:	9207      	str	r2, [sp, #28]
 800ba12:	e014      	b.n	800ba3e <_vfiprintf_r+0x13a>
 800ba14:	eba0 0308 	sub.w	r3, r0, r8
 800ba18:	fa09 f303 	lsl.w	r3, r9, r3
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	9304      	str	r3, [sp, #16]
 800ba20:	46a2      	mov	sl, r4
 800ba22:	e7d2      	b.n	800b9ca <_vfiprintf_r+0xc6>
 800ba24:	9b03      	ldr	r3, [sp, #12]
 800ba26:	1d19      	adds	r1, r3, #4
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	9103      	str	r1, [sp, #12]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	bfbb      	ittet	lt
 800ba30:	425b      	neglt	r3, r3
 800ba32:	f042 0202 	orrlt.w	r2, r2, #2
 800ba36:	9307      	strge	r3, [sp, #28]
 800ba38:	9307      	strlt	r3, [sp, #28]
 800ba3a:	bfb8      	it	lt
 800ba3c:	9204      	strlt	r2, [sp, #16]
 800ba3e:	7823      	ldrb	r3, [r4, #0]
 800ba40:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba42:	d10a      	bne.n	800ba5a <_vfiprintf_r+0x156>
 800ba44:	7863      	ldrb	r3, [r4, #1]
 800ba46:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba48:	d132      	bne.n	800bab0 <_vfiprintf_r+0x1ac>
 800ba4a:	9b03      	ldr	r3, [sp, #12]
 800ba4c:	1d1a      	adds	r2, r3, #4
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	9203      	str	r2, [sp, #12]
 800ba52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba56:	3402      	adds	r4, #2
 800ba58:	9305      	str	r3, [sp, #20]
 800ba5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb30 <_vfiprintf_r+0x22c>
 800ba5e:	7821      	ldrb	r1, [r4, #0]
 800ba60:	2203      	movs	r2, #3
 800ba62:	4650      	mov	r0, sl
 800ba64:	f7f4 fbd4 	bl	8000210 <memchr>
 800ba68:	b138      	cbz	r0, 800ba7a <_vfiprintf_r+0x176>
 800ba6a:	9b04      	ldr	r3, [sp, #16]
 800ba6c:	eba0 000a 	sub.w	r0, r0, sl
 800ba70:	2240      	movs	r2, #64	@ 0x40
 800ba72:	4082      	lsls	r2, r0
 800ba74:	4313      	orrs	r3, r2
 800ba76:	3401      	adds	r4, #1
 800ba78:	9304      	str	r3, [sp, #16]
 800ba7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba7e:	4829      	ldr	r0, [pc, #164]	@ (800bb24 <_vfiprintf_r+0x220>)
 800ba80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba84:	2206      	movs	r2, #6
 800ba86:	f7f4 fbc3 	bl	8000210 <memchr>
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	d03f      	beq.n	800bb0e <_vfiprintf_r+0x20a>
 800ba8e:	4b26      	ldr	r3, [pc, #152]	@ (800bb28 <_vfiprintf_r+0x224>)
 800ba90:	bb1b      	cbnz	r3, 800bada <_vfiprintf_r+0x1d6>
 800ba92:	9b03      	ldr	r3, [sp, #12]
 800ba94:	3307      	adds	r3, #7
 800ba96:	f023 0307 	bic.w	r3, r3, #7
 800ba9a:	3308      	adds	r3, #8
 800ba9c:	9303      	str	r3, [sp, #12]
 800ba9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baa0:	443b      	add	r3, r7
 800baa2:	9309      	str	r3, [sp, #36]	@ 0x24
 800baa4:	e76a      	b.n	800b97c <_vfiprintf_r+0x78>
 800baa6:	fb0c 3202 	mla	r2, ip, r2, r3
 800baaa:	460c      	mov	r4, r1
 800baac:	2001      	movs	r0, #1
 800baae:	e7a8      	b.n	800ba02 <_vfiprintf_r+0xfe>
 800bab0:	2300      	movs	r3, #0
 800bab2:	3401      	adds	r4, #1
 800bab4:	9305      	str	r3, [sp, #20]
 800bab6:	4619      	mov	r1, r3
 800bab8:	f04f 0c0a 	mov.w	ip, #10
 800babc:	4620      	mov	r0, r4
 800babe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bac2:	3a30      	subs	r2, #48	@ 0x30
 800bac4:	2a09      	cmp	r2, #9
 800bac6:	d903      	bls.n	800bad0 <_vfiprintf_r+0x1cc>
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d0c6      	beq.n	800ba5a <_vfiprintf_r+0x156>
 800bacc:	9105      	str	r1, [sp, #20]
 800bace:	e7c4      	b.n	800ba5a <_vfiprintf_r+0x156>
 800bad0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bad4:	4604      	mov	r4, r0
 800bad6:	2301      	movs	r3, #1
 800bad8:	e7f0      	b.n	800babc <_vfiprintf_r+0x1b8>
 800bada:	ab03      	add	r3, sp, #12
 800badc:	9300      	str	r3, [sp, #0]
 800bade:	462a      	mov	r2, r5
 800bae0:	4b12      	ldr	r3, [pc, #72]	@ (800bb2c <_vfiprintf_r+0x228>)
 800bae2:	a904      	add	r1, sp, #16
 800bae4:	4630      	mov	r0, r6
 800bae6:	f7fb feb7 	bl	8007858 <_printf_float>
 800baea:	4607      	mov	r7, r0
 800baec:	1c78      	adds	r0, r7, #1
 800baee:	d1d6      	bne.n	800ba9e <_vfiprintf_r+0x19a>
 800baf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800baf2:	07d9      	lsls	r1, r3, #31
 800baf4:	d405      	bmi.n	800bb02 <_vfiprintf_r+0x1fe>
 800baf6:	89ab      	ldrh	r3, [r5, #12]
 800baf8:	059a      	lsls	r2, r3, #22
 800bafa:	d402      	bmi.n	800bb02 <_vfiprintf_r+0x1fe>
 800bafc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bafe:	f7fc fe1b 	bl	8008738 <__retarget_lock_release_recursive>
 800bb02:	89ab      	ldrh	r3, [r5, #12]
 800bb04:	065b      	lsls	r3, r3, #25
 800bb06:	f53f af1f 	bmi.w	800b948 <_vfiprintf_r+0x44>
 800bb0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb0c:	e71e      	b.n	800b94c <_vfiprintf_r+0x48>
 800bb0e:	ab03      	add	r3, sp, #12
 800bb10:	9300      	str	r3, [sp, #0]
 800bb12:	462a      	mov	r2, r5
 800bb14:	4b05      	ldr	r3, [pc, #20]	@ (800bb2c <_vfiprintf_r+0x228>)
 800bb16:	a904      	add	r1, sp, #16
 800bb18:	4630      	mov	r0, r6
 800bb1a:	f7fc f935 	bl	8007d88 <_printf_i>
 800bb1e:	e7e4      	b.n	800baea <_vfiprintf_r+0x1e6>
 800bb20:	0800d009 	.word	0x0800d009
 800bb24:	0800d013 	.word	0x0800d013
 800bb28:	08007859 	.word	0x08007859
 800bb2c:	0800b8e1 	.word	0x0800b8e1
 800bb30:	0800d00f 	.word	0x0800d00f

0800bb34 <__swbuf_r>:
 800bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb36:	460e      	mov	r6, r1
 800bb38:	4614      	mov	r4, r2
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	b118      	cbz	r0, 800bb46 <__swbuf_r+0x12>
 800bb3e:	6a03      	ldr	r3, [r0, #32]
 800bb40:	b90b      	cbnz	r3, 800bb46 <__swbuf_r+0x12>
 800bb42:	f7fc fce1 	bl	8008508 <__sinit>
 800bb46:	69a3      	ldr	r3, [r4, #24]
 800bb48:	60a3      	str	r3, [r4, #8]
 800bb4a:	89a3      	ldrh	r3, [r4, #12]
 800bb4c:	071a      	lsls	r2, r3, #28
 800bb4e:	d501      	bpl.n	800bb54 <__swbuf_r+0x20>
 800bb50:	6923      	ldr	r3, [r4, #16]
 800bb52:	b943      	cbnz	r3, 800bb66 <__swbuf_r+0x32>
 800bb54:	4621      	mov	r1, r4
 800bb56:	4628      	mov	r0, r5
 800bb58:	f000 f82a 	bl	800bbb0 <__swsetup_r>
 800bb5c:	b118      	cbz	r0, 800bb66 <__swbuf_r+0x32>
 800bb5e:	f04f 37ff 	mov.w	r7, #4294967295
 800bb62:	4638      	mov	r0, r7
 800bb64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb66:	6823      	ldr	r3, [r4, #0]
 800bb68:	6922      	ldr	r2, [r4, #16]
 800bb6a:	1a98      	subs	r0, r3, r2
 800bb6c:	6963      	ldr	r3, [r4, #20]
 800bb6e:	b2f6      	uxtb	r6, r6
 800bb70:	4283      	cmp	r3, r0
 800bb72:	4637      	mov	r7, r6
 800bb74:	dc05      	bgt.n	800bb82 <__swbuf_r+0x4e>
 800bb76:	4621      	mov	r1, r4
 800bb78:	4628      	mov	r0, r5
 800bb7a:	f7ff fa53 	bl	800b024 <_fflush_r>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d1ed      	bne.n	800bb5e <__swbuf_r+0x2a>
 800bb82:	68a3      	ldr	r3, [r4, #8]
 800bb84:	3b01      	subs	r3, #1
 800bb86:	60a3      	str	r3, [r4, #8]
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	1c5a      	adds	r2, r3, #1
 800bb8c:	6022      	str	r2, [r4, #0]
 800bb8e:	701e      	strb	r6, [r3, #0]
 800bb90:	6962      	ldr	r2, [r4, #20]
 800bb92:	1c43      	adds	r3, r0, #1
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d004      	beq.n	800bba2 <__swbuf_r+0x6e>
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	07db      	lsls	r3, r3, #31
 800bb9c:	d5e1      	bpl.n	800bb62 <__swbuf_r+0x2e>
 800bb9e:	2e0a      	cmp	r6, #10
 800bba0:	d1df      	bne.n	800bb62 <__swbuf_r+0x2e>
 800bba2:	4621      	mov	r1, r4
 800bba4:	4628      	mov	r0, r5
 800bba6:	f7ff fa3d 	bl	800b024 <_fflush_r>
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d0d9      	beq.n	800bb62 <__swbuf_r+0x2e>
 800bbae:	e7d6      	b.n	800bb5e <__swbuf_r+0x2a>

0800bbb0 <__swsetup_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	4b29      	ldr	r3, [pc, #164]	@ (800bc58 <__swsetup_r+0xa8>)
 800bbb4:	4605      	mov	r5, r0
 800bbb6:	6818      	ldr	r0, [r3, #0]
 800bbb8:	460c      	mov	r4, r1
 800bbba:	b118      	cbz	r0, 800bbc4 <__swsetup_r+0x14>
 800bbbc:	6a03      	ldr	r3, [r0, #32]
 800bbbe:	b90b      	cbnz	r3, 800bbc4 <__swsetup_r+0x14>
 800bbc0:	f7fc fca2 	bl	8008508 <__sinit>
 800bbc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbc8:	0719      	lsls	r1, r3, #28
 800bbca:	d422      	bmi.n	800bc12 <__swsetup_r+0x62>
 800bbcc:	06da      	lsls	r2, r3, #27
 800bbce:	d407      	bmi.n	800bbe0 <__swsetup_r+0x30>
 800bbd0:	2209      	movs	r2, #9
 800bbd2:	602a      	str	r2, [r5, #0]
 800bbd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbd8:	81a3      	strh	r3, [r4, #12]
 800bbda:	f04f 30ff 	mov.w	r0, #4294967295
 800bbde:	e033      	b.n	800bc48 <__swsetup_r+0x98>
 800bbe0:	0758      	lsls	r0, r3, #29
 800bbe2:	d512      	bpl.n	800bc0a <__swsetup_r+0x5a>
 800bbe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbe6:	b141      	cbz	r1, 800bbfa <__swsetup_r+0x4a>
 800bbe8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbec:	4299      	cmp	r1, r3
 800bbee:	d002      	beq.n	800bbf6 <__swsetup_r+0x46>
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	f7fd fc05 	bl	8009400 <_free_r>
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbfa:	89a3      	ldrh	r3, [r4, #12]
 800bbfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bc00:	81a3      	strh	r3, [r4, #12]
 800bc02:	2300      	movs	r3, #0
 800bc04:	6063      	str	r3, [r4, #4]
 800bc06:	6923      	ldr	r3, [r4, #16]
 800bc08:	6023      	str	r3, [r4, #0]
 800bc0a:	89a3      	ldrh	r3, [r4, #12]
 800bc0c:	f043 0308 	orr.w	r3, r3, #8
 800bc10:	81a3      	strh	r3, [r4, #12]
 800bc12:	6923      	ldr	r3, [r4, #16]
 800bc14:	b94b      	cbnz	r3, 800bc2a <__swsetup_r+0x7a>
 800bc16:	89a3      	ldrh	r3, [r4, #12]
 800bc18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc20:	d003      	beq.n	800bc2a <__swsetup_r+0x7a>
 800bc22:	4621      	mov	r1, r4
 800bc24:	4628      	mov	r0, r5
 800bc26:	f000 f883 	bl	800bd30 <__smakebuf_r>
 800bc2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc2e:	f013 0201 	ands.w	r2, r3, #1
 800bc32:	d00a      	beq.n	800bc4a <__swsetup_r+0x9a>
 800bc34:	2200      	movs	r2, #0
 800bc36:	60a2      	str	r2, [r4, #8]
 800bc38:	6962      	ldr	r2, [r4, #20]
 800bc3a:	4252      	negs	r2, r2
 800bc3c:	61a2      	str	r2, [r4, #24]
 800bc3e:	6922      	ldr	r2, [r4, #16]
 800bc40:	b942      	cbnz	r2, 800bc54 <__swsetup_r+0xa4>
 800bc42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc46:	d1c5      	bne.n	800bbd4 <__swsetup_r+0x24>
 800bc48:	bd38      	pop	{r3, r4, r5, pc}
 800bc4a:	0799      	lsls	r1, r3, #30
 800bc4c:	bf58      	it	pl
 800bc4e:	6962      	ldrpl	r2, [r4, #20]
 800bc50:	60a2      	str	r2, [r4, #8]
 800bc52:	e7f4      	b.n	800bc3e <__swsetup_r+0x8e>
 800bc54:	2000      	movs	r0, #0
 800bc56:	e7f7      	b.n	800bc48 <__swsetup_r+0x98>
 800bc58:	2000002c 	.word	0x2000002c

0800bc5c <_raise_r>:
 800bc5c:	291f      	cmp	r1, #31
 800bc5e:	b538      	push	{r3, r4, r5, lr}
 800bc60:	4605      	mov	r5, r0
 800bc62:	460c      	mov	r4, r1
 800bc64:	d904      	bls.n	800bc70 <_raise_r+0x14>
 800bc66:	2316      	movs	r3, #22
 800bc68:	6003      	str	r3, [r0, #0]
 800bc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}
 800bc70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc72:	b112      	cbz	r2, 800bc7a <_raise_r+0x1e>
 800bc74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc78:	b94b      	cbnz	r3, 800bc8e <_raise_r+0x32>
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	f000 f830 	bl	800bce0 <_getpid_r>
 800bc80:	4622      	mov	r2, r4
 800bc82:	4601      	mov	r1, r0
 800bc84:	4628      	mov	r0, r5
 800bc86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc8a:	f000 b817 	b.w	800bcbc <_kill_r>
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d00a      	beq.n	800bca8 <_raise_r+0x4c>
 800bc92:	1c59      	adds	r1, r3, #1
 800bc94:	d103      	bne.n	800bc9e <_raise_r+0x42>
 800bc96:	2316      	movs	r3, #22
 800bc98:	6003      	str	r3, [r0, #0]
 800bc9a:	2001      	movs	r0, #1
 800bc9c:	e7e7      	b.n	800bc6e <_raise_r+0x12>
 800bc9e:	2100      	movs	r1, #0
 800bca0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bca4:	4620      	mov	r0, r4
 800bca6:	4798      	blx	r3
 800bca8:	2000      	movs	r0, #0
 800bcaa:	e7e0      	b.n	800bc6e <_raise_r+0x12>

0800bcac <raise>:
 800bcac:	4b02      	ldr	r3, [pc, #8]	@ (800bcb8 <raise+0xc>)
 800bcae:	4601      	mov	r1, r0
 800bcb0:	6818      	ldr	r0, [r3, #0]
 800bcb2:	f7ff bfd3 	b.w	800bc5c <_raise_r>
 800bcb6:	bf00      	nop
 800bcb8:	2000002c 	.word	0x2000002c

0800bcbc <_kill_r>:
 800bcbc:	b538      	push	{r3, r4, r5, lr}
 800bcbe:	4d07      	ldr	r5, [pc, #28]	@ (800bcdc <_kill_r+0x20>)
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	4608      	mov	r0, r1
 800bcc6:	4611      	mov	r1, r2
 800bcc8:	602b      	str	r3, [r5, #0]
 800bcca:	f7f6 fa41 	bl	8002150 <_kill>
 800bcce:	1c43      	adds	r3, r0, #1
 800bcd0:	d102      	bne.n	800bcd8 <_kill_r+0x1c>
 800bcd2:	682b      	ldr	r3, [r5, #0]
 800bcd4:	b103      	cbz	r3, 800bcd8 <_kill_r+0x1c>
 800bcd6:	6023      	str	r3, [r4, #0]
 800bcd8:	bd38      	pop	{r3, r4, r5, pc}
 800bcda:	bf00      	nop
 800bcdc:	200051a4 	.word	0x200051a4

0800bce0 <_getpid_r>:
 800bce0:	f7f6 ba2e 	b.w	8002140 <_getpid>

0800bce4 <__swhatbuf_r>:
 800bce4:	b570      	push	{r4, r5, r6, lr}
 800bce6:	460c      	mov	r4, r1
 800bce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcec:	2900      	cmp	r1, #0
 800bcee:	b096      	sub	sp, #88	@ 0x58
 800bcf0:	4615      	mov	r5, r2
 800bcf2:	461e      	mov	r6, r3
 800bcf4:	da0d      	bge.n	800bd12 <__swhatbuf_r+0x2e>
 800bcf6:	89a3      	ldrh	r3, [r4, #12]
 800bcf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bcfc:	f04f 0100 	mov.w	r1, #0
 800bd00:	bf14      	ite	ne
 800bd02:	2340      	movne	r3, #64	@ 0x40
 800bd04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bd08:	2000      	movs	r0, #0
 800bd0a:	6031      	str	r1, [r6, #0]
 800bd0c:	602b      	str	r3, [r5, #0]
 800bd0e:	b016      	add	sp, #88	@ 0x58
 800bd10:	bd70      	pop	{r4, r5, r6, pc}
 800bd12:	466a      	mov	r2, sp
 800bd14:	f000 f848 	bl	800bda8 <_fstat_r>
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	dbec      	blt.n	800bcf6 <__swhatbuf_r+0x12>
 800bd1c:	9901      	ldr	r1, [sp, #4]
 800bd1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bd22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bd26:	4259      	negs	r1, r3
 800bd28:	4159      	adcs	r1, r3
 800bd2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd2e:	e7eb      	b.n	800bd08 <__swhatbuf_r+0x24>

0800bd30 <__smakebuf_r>:
 800bd30:	898b      	ldrh	r3, [r1, #12]
 800bd32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd34:	079d      	lsls	r5, r3, #30
 800bd36:	4606      	mov	r6, r0
 800bd38:	460c      	mov	r4, r1
 800bd3a:	d507      	bpl.n	800bd4c <__smakebuf_r+0x1c>
 800bd3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bd40:	6023      	str	r3, [r4, #0]
 800bd42:	6123      	str	r3, [r4, #16]
 800bd44:	2301      	movs	r3, #1
 800bd46:	6163      	str	r3, [r4, #20]
 800bd48:	b003      	add	sp, #12
 800bd4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd4c:	ab01      	add	r3, sp, #4
 800bd4e:	466a      	mov	r2, sp
 800bd50:	f7ff ffc8 	bl	800bce4 <__swhatbuf_r>
 800bd54:	9f00      	ldr	r7, [sp, #0]
 800bd56:	4605      	mov	r5, r0
 800bd58:	4639      	mov	r1, r7
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	f7fd fbc4 	bl	80094e8 <_malloc_r>
 800bd60:	b948      	cbnz	r0, 800bd76 <__smakebuf_r+0x46>
 800bd62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd66:	059a      	lsls	r2, r3, #22
 800bd68:	d4ee      	bmi.n	800bd48 <__smakebuf_r+0x18>
 800bd6a:	f023 0303 	bic.w	r3, r3, #3
 800bd6e:	f043 0302 	orr.w	r3, r3, #2
 800bd72:	81a3      	strh	r3, [r4, #12]
 800bd74:	e7e2      	b.n	800bd3c <__smakebuf_r+0xc>
 800bd76:	89a3      	ldrh	r3, [r4, #12]
 800bd78:	6020      	str	r0, [r4, #0]
 800bd7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd7e:	81a3      	strh	r3, [r4, #12]
 800bd80:	9b01      	ldr	r3, [sp, #4]
 800bd82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd86:	b15b      	cbz	r3, 800bda0 <__smakebuf_r+0x70>
 800bd88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f000 f81d 	bl	800bdcc <_isatty_r>
 800bd92:	b128      	cbz	r0, 800bda0 <__smakebuf_r+0x70>
 800bd94:	89a3      	ldrh	r3, [r4, #12]
 800bd96:	f023 0303 	bic.w	r3, r3, #3
 800bd9a:	f043 0301 	orr.w	r3, r3, #1
 800bd9e:	81a3      	strh	r3, [r4, #12]
 800bda0:	89a3      	ldrh	r3, [r4, #12]
 800bda2:	431d      	orrs	r5, r3
 800bda4:	81a5      	strh	r5, [r4, #12]
 800bda6:	e7cf      	b.n	800bd48 <__smakebuf_r+0x18>

0800bda8 <_fstat_r>:
 800bda8:	b538      	push	{r3, r4, r5, lr}
 800bdaa:	4d07      	ldr	r5, [pc, #28]	@ (800bdc8 <_fstat_r+0x20>)
 800bdac:	2300      	movs	r3, #0
 800bdae:	4604      	mov	r4, r0
 800bdb0:	4608      	mov	r0, r1
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	602b      	str	r3, [r5, #0]
 800bdb6:	f7f6 fa2b 	bl	8002210 <_fstat>
 800bdba:	1c43      	adds	r3, r0, #1
 800bdbc:	d102      	bne.n	800bdc4 <_fstat_r+0x1c>
 800bdbe:	682b      	ldr	r3, [r5, #0]
 800bdc0:	b103      	cbz	r3, 800bdc4 <_fstat_r+0x1c>
 800bdc2:	6023      	str	r3, [r4, #0]
 800bdc4:	bd38      	pop	{r3, r4, r5, pc}
 800bdc6:	bf00      	nop
 800bdc8:	200051a4 	.word	0x200051a4

0800bdcc <_isatty_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	4d06      	ldr	r5, [pc, #24]	@ (800bde8 <_isatty_r+0x1c>)
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	4608      	mov	r0, r1
 800bdd6:	602b      	str	r3, [r5, #0]
 800bdd8:	f7f6 fa2a 	bl	8002230 <_isatty>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d102      	bne.n	800bde6 <_isatty_r+0x1a>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	b103      	cbz	r3, 800bde6 <_isatty_r+0x1a>
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	200051a4 	.word	0x200051a4

0800bdec <_init>:
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	bf00      	nop
 800bdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdf2:	bc08      	pop	{r3}
 800bdf4:	469e      	mov	lr, r3
 800bdf6:	4770      	bx	lr

0800bdf8 <_fini>:
 800bdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfa:	bf00      	nop
 800bdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdfe:	bc08      	pop	{r3}
 800be00:	469e      	mov	lr, r3
 800be02:	4770      	bx	lr
